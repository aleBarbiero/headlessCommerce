"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const handlebarsConfig_1 = require("./handlebarsConfig");
/**
 * Holds a template and renders the template with the given data
 */
class Template {
    /**
     * Creates a Template object
     * @param path - Path to the template file
     * @param handlebars - Optional handlebars instance, default instance is used if not provided
     */
    constructor(path, handlebars = handlebarsConfig_1.HandlebarsWithAmfHelpers) {
        this.path = path;
        this.handlebars = handlebars;
        try {
            this.content = fs_extra_1.default.readFileSync(path, "utf8");
        }
        catch (error) {
            error.message = `Error initializing template: ${error.message}`;
            throw error;
        }
        if (!this.content) {
            throw new Error(`Invalid template content: ${this.content}`);
        }
    }
    /**
     * Make substitutions and write the template to a file.
     *
     * @param context - The data model to use for substitutions
     * @param destination - The file path to write the rendered template to
     */
    render(context, destination) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield fs_extra_1.default.outputFile(destination, 
                //Parts of the AMF model use prototype properties and methods, we need to make those available to Handlebars
                this.handlebars.compile(this.content)(context, {
                    allowProtoPropertiesByDefault: true,
                    allowProtoMethodsByDefault: true
                }));
            }
            catch (error) {
                error.message = `Error rendering template: ${error.message}`;
                throw error;
            }
        });
    }
}
exports.Template = Template;
//# sourceMappingURL=template.js.map