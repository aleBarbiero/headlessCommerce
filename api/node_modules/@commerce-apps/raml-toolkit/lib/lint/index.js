"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const amf_client_js_1 = require("amf-client-js");
const command_1 = require("@oclif/command");
const lint_1 = require("./lint");
exports.profilePath = path_1.default.join(__dirname, "../../resources/lint/profiles");
const profiles = fs_1.default
    .readdirSync(exports.profilePath)
    .filter(file => path_1.default.extname(file).toLowerCase() === ".raml")
    .map(file => file.slice(0, -5)); // Strip .raml extension from file name
class LintCommand extends command_1.Command {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { argv, flags } = this.parse(LintCommand);
            if (argv.length === 0) {
                this.error("Requires at least one file to validate", { exit: 1 });
            }
            let exitCode = 0;
            const promises = [];
            // Initialize AMF so that we have a clean environment to work with
            yield amf_client_js_1.AMF.init();
            for (const arg of argv) {
                promises.push(lint_1.validateFile(arg, flags.profile).then(results => {
                    if (results.conforms === false) {
                        exitCode += 1;
                    }
                    return lint_1.printResults(results, flags.warnings);
                }));
            }
            yield Promise.all(promises).catch(e => {
                console.error(e.message);
                exitCode += 1;
            });
            if (exitCode !== 0) {
                this.error(`Validation for ${exitCode} file(s) failed.`, {
                    exit: exitCode
                });
            }
        });
    }
}
exports.default = LintCommand;
LintCommand.description = `A linting tool for raml for commerce cloud and beyond

FILENAME is one or more RAML files to lint.
`;
LintCommand.flags = {
    // Add --profile flag to set the custom profile
    profile: command_1.flags.enum({
        char: "p",
        options: profiles,
        description: "profile to apply",
        required: true
    }),
    // Add --warnings flag to show warnings
    warnings: command_1.flags.boolean({
        char: "w",
        default: false,
        description: "Show all the warnings"
    }),
    // Add --version flag to show CLI version
    version: command_1.flags.version({ char: "v" }),
    // Add --help flag to show CLI version
    help: command_1.flags.help({ char: "h" })
};
LintCommand.args = [{ name: "filename" }];
// This allows a variable length list of files
LintCommand.strict = false;
//# sourceMappingURL=index.js.map