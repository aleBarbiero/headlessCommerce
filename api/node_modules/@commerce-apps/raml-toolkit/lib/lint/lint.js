"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = tslib_1.__importDefault(require("path"));
const amf_client_js_1 = require("amf-client-js");
const parser_1 = require("../common/parser");
const _1 = require(".");
function validateCustom(amfModel, profileFile) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let profileName;
        try {
            profileName = yield amf_client_js_1.Core.loadValidationProfile(profileFile);
        }
        catch (err) {
            // We rethrow to provide a cleaner error message
            throw new Error(err.vw);
        }
        const report = yield amf_client_js_1.Core.validate(amfModel, profileName, amf_client_js_1.MessageStyles.RAML);
        return report;
    });
}
exports.validateCustom = validateCustom;
function validateModel(model, profile) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const results = yield validateCustom(model, `file://${path_1.default.join(_1.profilePath, `${profile}.raml`)}`);
        return results;
    });
}
exports.validateModel = validateModel;
function printResults(results, warnings = false) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (results && !warnings && results.conforms) {
            console.log(`Model: ${results.model}
Profile: ${results.profile}
Conforms? ${results.conforms}
Number of results: 0
Number of hidden warnings: ${results.results.length}
    `);
        }
        else if (results) {
            console.log(results.toString());
        }
    });
}
exports.printResults = printResults;
function validateFile(filename, profile) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const model = yield parser_1.parseRamlFile(filename);
        if (!model)
            throw new Error("Error validating file");
        return yield validateModel(model, profile);
    });
}
exports.validateFile = validateFile;
//# sourceMappingURL=lint.js.map