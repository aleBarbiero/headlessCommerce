"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const amf_client_js_1 = tslib_1.__importDefault(require("amf-client-js"));
const path_1 = tslib_1.__importDefault(require("path"));
const fileSystemAdapter_1 = require("./fileSystemAdapter");
const EXCHANGE_MODULES = "exchange_modules/";
const FILE_PROTOCOL_REGEX = /^file:\/\//i;
class FatRamlResourceLoader {
    constructor(workingDir) {
        this.workingDir = workingDir;
        this.workingDir = this.normalizeWorkingDir(this.workingDir);
        this.fsAdapter = new fileSystemAdapter_1.FileSystemAdapter();
    }
    normalizeWorkingDir(workingDir) {
        var _a;
        let absoluteWorkingDir = (_a = this.workingDir) === null || _a === void 0 ? void 0 : _a.split(FILE_PROTOCOL_REGEX)[1];
        if (!absoluteWorkingDir) {
            throw new Error("workingDir does not begin with 'file://' protocol");
        }
        absoluteWorkingDir = path_1.default.normalize(absoluteWorkingDir);
        if (!path_1.default.isAbsolute(absoluteWorkingDir)) {
            throw new Error(`workingDir '${workingDir}' must be an absolute path`);
        }
        return absoluteWorkingDir;
    }
    accepts(resource) {
        var _a;
        return ((_a = resource) === null || _a === void 0 ? void 0 : _a.indexOf(EXCHANGE_MODULES)) >= 0;
    }
    fetch(resource) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!resource || resource.indexOf(EXCHANGE_MODULES) < 0) {
                throw new amf_client_js_1.default.ResourceNotFound(`Resource cannot be found: ${resource}`);
            }
            const resourceUriParts = resource.split(EXCHANGE_MODULES);
            const resourceAbsolutePath = path_1.default.join(this.workingDir, EXCHANGE_MODULES, resourceUriParts[resourceUriParts.length - 1]);
            try {
                const data = this.fsAdapter.readFileSync(resourceAbsolutePath);
                return new amf_client_js_1.default.client.remote.Content(data, `file://${resourceAbsolutePath}`, "application/yaml");
            }
            catch (err) {
                throw new amf_client_js_1.default.ResourceNotFound(`Resource failed to load: ${resource}. ${err.toString()}`);
            }
        });
    }
}
exports.FatRamlResourceLoader = FatRamlResourceLoader;
//# sourceMappingURL=fatRamlResourceLoader.js.map