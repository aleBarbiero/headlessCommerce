import { model } from "amf-client-js";
/**
 * Parses a RAML file to an AMF model.
 *
 * @param filename The path to the RAML file to load
 *
 * @returns an AMF model of the RAML
 */
export declare function parseRamlFile(filename: string): Promise<model.document.Document>;
/**
 * Get all the referenced data types
 *
 * @param apiReferences - Array of references
 * @param dataTypes - Array of data types
 * @param existingDataTypes - Set of names of data types, used to de-duplicate the data types
 */
export declare function getReferenceDataTypes(apiReferences: model.document.BaseUnit[], dataTypes: model.domain.CustomDomainProperty[], existingDataTypes: Set<string>): void;
/**
 * Extract all of the delcared data types from an AMF model.
 *
 * @param api - The model to extract data types from
 *
 * @returns data types from model
 */
export declare function getAllDataTypes(api: model.document.BaseUnitWithDeclaresModel): model.domain.CustomDomainProperty[];
/**
 * Resolves the AMF model using the given resolution pipeline
 *
 * @param apiModel - AMF model of the API
 * @param resolutionPipeline - resolution pipeline.
 *
 * @returns AMF model after resolving with the given pipeline
 */
export declare function resolveApiModel(apiModel: model.document.BaseUnit, resolutionPipeline: "default" | "editing" | "compatibility"): model.document.Document;
/**
 * Get normalized name for the file/directory that is created while rendering the templates
 *
 * @param name - File or directory name to normalize
 * @returns a normalized name
 */
export declare function getNormalizedName(name: string): string;
/**
 * Returns API name from the AMF model in Pascal Case ("Shopper Customers" is returned as "ShopperCustomers")
 *
 * @param apiModel - AMF Model of the API
 * @returns Name of the API
 */
export declare function getApiName(apiModel: model.document.BaseUnitWithEncodesModel): string;
//# sourceMappingURL=parser.d.ts.map