"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const command_1 = require("@oclif/command");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const diffDirectories_1 = require("./diffDirectories");
const diffProcessor_1 = require("./diffProcessor");
class DiffCommand extends command_1.Command {
    /**
     * If a file is given, saves data to the file. Otherwise, just logs the data.
     * The data must be JSON-serializable.
     *
     * @param json - The data to save or log
     * @param file - The file to save to
     */
    _saveOrLog(json, file) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (file) {
                yield fs_extra_1.default.writeJson(file, json);
            }
            else {
                console.log(json);
            }
        });
    }
    /**
     * Find the differences between two directories containing API spec files.
     * Only finds differences, does not classify using a ruleset.
     *
     * @param baseApis - Path to an API config file in the base directory
     * @param newApis - Path to an API config file in the new directory
     * @param flags - Parsed CLI flags passed to the command
     */
    _diffDirs(baseApis, newApis, flags) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const results = yield diffDirectories_1.diffRamlDirectories(baseApis, newApis);
            yield this._saveOrLog(results, flags["out-file"]);
            if (results.length > 0) {
                this.exit(1);
            }
        });
    }
    /**
     * Find the differences between two API specification files. Does not classify
     * the differences.
     *
     * @param baseApis - Path to a base API spec file
     * @param newApis - Path to a new API spec file
     * @param flags - Parsed CLI flags passed to the command
     */
    _diffFiles(baseApis, newApis, flags) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Don't apply any ruleset, exit 0 for no differences, exit 1 for any
            // differences, exit 2 for unsuccessful
            let results;
            try {
                results = yield diffProcessor_1.diffRaml(baseApis, newApis);
                yield this._saveOrLog(results, flags["out-file"]);
            }
            catch (err) {
                this.error(err.message, { exit: 2 });
            }
            if (results.length > 0) {
                this.exit(1);
            }
        });
    }
    /**
     * Find the differences between two API specification files and classifies
     * the changes according to a ruleset.
     *
     * @param baseApis - Path to a base API spec file
     * @param newApis - Path to a new API spec file
     * @param flags - Parsed CLI flags passed to the command
     */
    _diffFilesUsingRuleset(baseApis, newApis, flags) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Apply ruleset, exit 0 for no breaking changes, exit 1 for breaking
            // changes, exit 2 for unsuccessful
            let results;
            try {
                results = yield diffProcessor_1.findApiChanges(baseApis, newApis, flags.ruleset);
                yield this._saveOrLog(results, flags["out-file"]);
            }
            catch (err) {
                this.error(err.message, { exit: 2 });
            }
            // TODO: Move to logic to the library
            const hasBreakingChanges = (diff) => diff.some(n => { var _a, _b; return ((_b = (_a = n.rule) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.category) === "Breaking"; });
            if (hasBreakingChanges(results)) {
                this.error("Breaking changes found.", { exit: 1 });
            }
        });
    }
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { args, flags } = this.parse(DiffCommand);
            if (flags.dir) {
                yield this._diffDirs(args.base, args.new, flags);
            }
            else if (flags["diff-only"]) {
                yield this._diffFiles(args.base, args.new, flags);
            }
            else {
                yield this._diffFilesUsingRuleset(args.base, args.new, flags);
            }
            this.exit();
        });
    }
}
exports.DiffCommand = DiffCommand;
// Oclif eats the first line of the description, so it's left blank.
DiffCommand.description = `
This command has three modes: ruleset, diff-only, and directory.
  Ruleset mode (default) compares two files and applies a ruleset to determine if any changes are breaking.
  Diff-only mode compares two files to determine if there are any differences, without applying a ruleset.
  Directory mode compares all the files in two directories and determines if there are any differences.

In ruleset and diff-only mode, the arguments must be API specification (RAML) files.
In directory mode, the arguments must be API configuration (JSON) files.

Exit statuses:
  0 - No breaking changes (ruleset mode) or no differences (diff-only / directory)
  1 - Breaking changes (ruleset mode) or differences found (diff only / directory)
  2 - Evaluation could not be completed`;
DiffCommand.flags = {
    // Add --version flag to show CLI version
    version: command_1.flags.version({ char: "v" }),
    // Add --help flag to show CLI version
    help: command_1.flags.help({ char: "h" }),
    ruleset: command_1.flags.string({
        char: "r",
        // Oclif by default generated help text with [default: value], but in this
        // case the default is speciified by the function, not the command. Also,
        // it is a full path to the file, which would change based on install location.
        // Displaying the require()-able form is shorter and always the same.
        description: `[default:${diffProcessor_1.defaultRulesPackagePath}] Path to ruleset to apply to diff`,
        env: "DIFF_RULESET",
        exclusive: ["diff-only", "dir"]
    }),
    "diff-only": command_1.flags.boolean({
        description: "Only show differences without evaluating a ruleset",
        default: false,
        exclusive: ["ruleset", "dir"]
    }),
    dir: command_1.flags.boolean({
        description: "Find the differences for all files in two directories",
        default: false,
        exclusive: ["ruleset", "diff-only"]
    }),
    "out-file": command_1.flags.string({
        char: "o",
        description: "File to store the computed difference"
    })
};
DiffCommand.args = [
    {
        name: "base",
        required: true,
        description: "The base API spec file (ruleset / diff-only mode) or configuration (directory mode)"
    },
    {
        name: "new",
        required: true,
        description: "The new API spec file (ruleset / diff-only mode) or configuration (directory mode)"
    }
];
//# sourceMappingURL=index.js.map