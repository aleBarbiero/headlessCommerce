"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const diffProcessor_1 = require("./diffProcessor");
const logger_1 = require("../common/logger");
/**
 * Extracts all the RAML file names from the specified config file.
 *
 * @param configPath - Target config file
 *
 * @returns An array of `assetId/fileName` for every api in the input file
 */
function listRamlsFromConfig(configPath) {
    // path.resolve() is required to ensure configPath is absolute
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const config = require(path_1.default.resolve(configPath));
    const ramls = [];
    for (const apiFamily of Object.keys(config)) {
        for (const api of config[apiFamily]) {
            ramls.push(path_1.default.join(api.assetId, api.fatRaml.mainFile));
        }
    }
    return ramls;
}
exports.listRamlsFromConfig = listRamlsFromConfig;
/**
 * Compares two arrays and returns their intersection and symmetric difference.
 * Expects arrays to have no duplicate elements.
 *
 * @param leftArr - One of the arrays being compared
 * @param rightArr - The other array being compared
 *
 * @returns An array each for all the common, exclusive to left and exclusive to
 * right elements.
 */
function getCommonAndUniqueElements(leftArr, rightArr) {
    const left = new Set(leftArr);
    const right = new Set(rightArr);
    const common = new Set();
    left.forEach(val => {
        if (right.has(val)) {
            left.delete(val);
            right.delete(val);
            common.add(val);
        }
    });
    return {
        common: [...common],
        unique: [[...left], [...right]]
    };
}
/**
 * Get diffs for all the common RAMLs. If diff operation fails for a RAML, log
 * the error, add a message to the diff object and continue with the rest of the
 * RAML files.
 *
 * @param dir1 - One of the directories with raml files
 * @param dir2 - The other directory with raml files
 * @param commonRamls - List of all the ramls to be compared
 * @returns An array of differences
 */
function diffCommonRamls(dir1, dir2, commonRamls) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const result = [];
        for (const raml of commonRamls) {
            const leftRaml = path_1.default.join(dir1, raml);
            const rightRaml = path_1.default.join(dir2, raml);
            const diffDetails = { file: raml };
            try {
                diffDetails.diff = yield diffProcessor_1.diffRaml(leftRaml, rightRaml);
                if (!lodash_1.default.isEmpty(diffDetails.diff)) {
                    result.push(diffDetails);
                }
            }
            catch (error) {
                logger_1.ramlToolLogger.error(`Diff operation for '${raml}' failed:`, error);
                diffDetails.message = "The operation was unsuccessful";
                result.push(diffDetails);
            }
        }
        return result;
    });
}
/**
 * Finds differences between the given directories for all the raml files in the
 * provided config.
 *
 * @param oldApiDir - Existing APIs
 * @param newApiDir - Newly downloaded APIs
 * @param configFile - Config file name
 *
 * @returns An array of RamlDiff objects containing differences between all the
 * old and new RAML files
 */
function diffRamlDirectories(oldConfigFile, newConfigFile) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const oldApiDir = path_1.default.dirname(oldConfigFile);
        const newApiDir = path_1.default.dirname(newConfigFile);
        const oldRamls = listRamlsFromConfig(oldConfigFile);
        const newRamls = listRamlsFromConfig(newConfigFile);
        const ramls = getCommonAndUniqueElements(oldRamls, newRamls);
        const result = yield diffCommonRamls(oldApiDir, newApiDir, ramls.common);
        const removedRamls = ramls.unique[0].map(r => ({
            file: r,
            message: "This RAML has been removed"
        }));
        const addedRamls = ramls.unique[1].map(r => ({
            file: r,
            message: "This RAML has been added recently"
        }));
        return result.concat(removedRamls, addedRamls);
    });
}
exports.diffRamlDirectories = diffRamlDirectories;
//# sourceMappingURL=diffDirectories.js.map