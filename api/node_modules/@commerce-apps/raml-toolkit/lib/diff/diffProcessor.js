"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint-disable @typescript-eslint/no-use-before-define */
const amf_client_js_1 = tslib_1.__importDefault(require("amf-client-js"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const jsonDiff_1 = require("./jsonDiff");
const logger_1 = require("../common/logger");
const path = tslib_1.__importStar(require("path"));
const rulesProcessor_1 = require("./rulesProcessor");
const parser_1 = require("../common/parser");
// Path relative to project root
const defaultRulesBasePath = "resources/diff/rules/defaultRules.json";
// Full path
exports.defaultRulesPath = path.join(__dirname, "../../", defaultRulesBasePath);
// Path prefixed with package name, short form usable by require()
exports.defaultRulesPackagePath = path.join("@commerce-apps/raml-toolkit", path.dirname(defaultRulesBasePath), path.basename(defaultRulesBasePath, ".json"));
/**
 * Generate differences between two RAML files and apply rules
 * @param leftRaml - Base RAML file to compare
 * @param rightRaml - Other RAML file to compare with the left RAML to find differences
 * @param rulesPath - Optional rules file to apply on the differences
 *
 * @returns Changes to the APIs
 */
function findApiChanges(leftRaml, rightRaml, rulesPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const diffs = yield diffRaml(leftRaml, rightRaml);
        if (rulesPath == null) {
            logger_1.ramlToolLogger.info("Applying default rules on the differences");
            rulesPath = exports.defaultRulesPath;
        }
        return rulesProcessor_1.applyRules(diffs, rulesPath);
    });
}
exports.findApiChanges = findApiChanges;
/**
 * Generate differences between two RAML files
 * @param leftRaml - Base RAML file to compare
 * @param rightRaml - Other RAML file to compare with the left RAML to find differences
 *
 * @returns Array of NodeDiff objects
 */
function diffRaml(leftRaml, rightRaml) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const [leftGraph, rightGraph] = yield Promise.all([
            generateGraph(leftRaml),
            generateGraph(rightRaml)
        ]);
        logger_1.ramlToolLogger.info(`Finding differences between flattened JSON-LD of ${leftRaml} and ${rightRaml}`);
        return jsonDiff_1.findJsonDiffs(leftGraph, rightGraph);
    });
}
exports.diffRaml = diffRaml;
/**
 * Generate flattened JSON-LD AMF graph from the RAML files
 * @param ramlFilePath - RAML file path
 *
 * @returns flattened JSON-LD AMF graph
 */
function generateGraph(ramlFilePath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const parsedRaml = yield parser_1.parseRamlFile(ramlFilePath);
        const model = new amf_client_js_1.default.Raml10Resolver().resolve(parsedRaml);
        const renderOptions = new amf_client_js_1.default.render.RenderOptions().withoutSourceMaps
            .withCompactUris.withFlattenedJsonLd;
        let graphStr = yield amf_client_js_1.default.AMF.amfGraphGenerator().generateString(model, renderOptions);
        /**
         * Types referenced from another RAML contain the filepath in their ID. Replace with empty string so that paths are not compared
         * TODO: Find if we can avoid this, if not handle escape special characters in the directory path
         */
        graphStr = lodash_1.default.replace(graphStr, new RegExp(path.dirname(ramlFilePath), "g"), "");
        return JSON.parse(graphStr);
    });
}
//# sourceMappingURL=diffProcessor.js.map