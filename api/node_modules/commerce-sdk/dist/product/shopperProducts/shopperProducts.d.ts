/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import { OperationOptions } from "retry";
export declare namespace ShopperProducts {
  type OptionValue = {
    default?: boolean;
    id: string;
    name?: string;
    price?: number;
  } & {
    [key: string]: any;
  };
  type Master = {
    masterId: string;
    orderable?: boolean;
    price?: number;
    priceMax?: number;
    prices?: {} & {
      [key: string]: any;
    };
  } & {
    [key: string]: any;
  };
  type Category = {
    categories?: Array<Category>;
    description?: string;
    id: string;
    image?: string;
    name?: string;
    pageDescription?: string;
    pageKeywords?: string;
    pageTitle?: string;
    parentCategoryId?: string;
    thumbnail?: string;
  } & {
    [key: string]: any;
  };
  type CategoryResult = {
    limit: number;
    data: Array<Category>;
    total: number;
  } & {
    [key: string]: any;
  };
  type VariationAttribute = {
    id: string;
    name?: string;
    values?: Array<VariationAttributeValue>;
  } & {
    [key: string]: any;
  };
  type RecommendationType = {
    displayValue: string;
    value: number;
  } & {
    [key: string]: any;
  };
  type ProductType = {
    bundle?: boolean;
    item?: boolean;
    master?: boolean;
    option?: boolean;
    set?: boolean;
    variant?: boolean;
    variationGroup?: boolean;
  } & {
    [key: string]: any;
  };
  type Recommendation = {
    calloutMsg?: string;
    image?: Image;
    longDescription?: string;
    name?: string;
    recommendationType: RecommendationType;
    recommendedItemId?: string;
    shortDescription?: string;
  } & {
    [key: string]: any;
  };
  type Variant = {
    orderable?: boolean;
    price?: number;
    productId: string;
    variationValues?: {} & {
      [key: string]: any;
    };
  } & {
    [key: string]: any;
  };
  type VariationGroup = {
    orderable: boolean;
    price: number;
    productId: string;
    variationValues: {} & {
      [key: string]: any;
    };
  } & {
    [key: string]: any;
  };
  type ProductResult = {
    limit: number;
    data: Array<Product>;
    total: number;
  } & {
    [key: string]: any;
  };
  type ProductLink = {
    sourceProductId: string;
    sourceProductLink: string;
    targetProductId: string;
    targetProductLink: string;
    type: string;
  } & {
    [key: string]: any;
  };
  type Inventory = {
    ats?: number;
    backorderable?: boolean;
    id: string;
    inStockDate?: any;
    orderable?: boolean;
    preorderable?: boolean;
    stockLevel?: number;
  } & {
    [key: string]: any;
  };
  type ImageGroup = {
    images: Array<Image>;
    variationAttributes?: Array<VariationAttribute>;
    viewType: string;
  } & {
    [key: string]: any;
  };
  type Option = {
    description?: string;
    id: string;
    image?: string;
    name?: string;
    values?: Array<OptionValue>;
  } & {
    [key: string]: any;
  };
  type Product = {
    brand?: string;
    bundledProducts?: Array<BundledProduct>;
    currency?: string;
    ean?: string;
    fetchDate?: number;
    id: string;
    imageGroups?: Array<ImageGroup>;
    inventories?: Array<Inventory>;
    inventory?: Inventory;
    longDescription?: string;
    manufacturerName?: string;
    manufacturerSku?: string;
    master?: Master;
    minOrderQuantity?: number;
    name?: string;
    options?: Array<Option>;
    pageDescription?: string;
    pageKeywords?: string;
    pageTitle?: string;
    price?: number;
    priceMax?: number;
    prices?: {} & {
      [key: string]: any;
    };
    primaryCategoryId?: string;
    productLinks?: Array<ProductLink>;
    productPromotions?: Array<ProductPromotion>;
    recommendations?: Array<Recommendation>;
    setProducts?: Array<Product>;
    shortDescription?: string;
    stepQuantity?: number;
    type?: ProductType;
    unit?: string;
    upc?: string;
    validFrom?: any;
    validTo?: any;
    variants?: Array<Variant>;
    variationAttributes?: Array<VariationAttribute>;
    variationGroups?: Array<VariationGroup>;
    variationValues?: {} & {
      [key: string]: any;
    };
  } & {
    [key: string]: any;
  };
  type Image = {
    alt?: string;
    disBaseLink?: string;
    link: string;
    title?: string;
  } & {
    [key: string]: any;
  };
  type VariationAttributeValue = {
    description?: string;
    image?: Image;
    imageSwatch?: Image;
    name?: string;
    orderable?: boolean;
    value: string;
  } & {
    [key: string]: any;
  };
  type ProductPromotion = {
    calloutMsg: string;
    promotionId: string;
    promotionalPrice: number;
  } & {
    [key: string]: any;
  };
  type BundledProduct = {
    id: string;
    product: Product;
    quantity: number;
  } & {
    [key: string]: any;
  };
  type ErrorResponse = {
    type: string;
    title?: string;
    detail?: string;
    instance?: string;
  } & {
    [key: string]: any;
  };
  type Money = {
    currencyMnemonic?: string;
    value?: number;
  } & {
    [key: string]: any;
  };
  type SimpleSearchResult = {
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type SearchRequest = {
    limit?: number;
    query: any;
    sorts?: Array<Sort>;
    offset?: number;
  } & {
    [key: string]: any;
  };
  type PaginatedSearchResult = {
    query: any;
    sorts?: Array<Sort>;
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type ClosedObject = {} & {
    [key: string]: any;
  };
  type OpenObject = {} & {
    [key: string]: any;
  };
  type NoPropertiesAllowed = {};
  type SpecifiedPropertiesAllowed = {} & {
    [key: string]: any;
  };
  type MoneyMnemonic = {
    currencyMnemonic?: string;
    value?: number;
  } & {
    [key: string]: any;
  };
  type BoolFilter = {
    filters?: Array<any>;
    operator: string;
  } & {
    [key: string]: any;
  };
  type PaginatedSearchResultBase = {
    query: any;
    sorts?: Array<Sort>;
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type MatchAllQuery = {} & {
    [key: string]: any;
  };
  type FilteredQuery = {
    filter: any;
    query: any;
  } & {
    [key: string]: any;
  };
  type QueryFilter = {
    query: any;
  } & {
    [key: string]: any;
  };
  type Query = {
    boolQuery?: BoolQuery;
    filteredQuery?: FilteredQuery;
    matchAllQuery?: MatchAllQuery;
    nestedQuery?: NestedQuery;
    termQuery?: TermQuery;
    textQuery?: TextQuery;
  } & {
    [key: string]: any;
  };
  type TermQuery = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
  } & {
    [key: string]: any;
  };
  type TermFilter = {
    field: string;
    operator: string;
    values?: Array<any>;
  } & {
    [key: string]: any;
  };
  type TextQuery = {
    fields: Array<string>;
    searchPhrase: string;
  } & {
    [key: string]: any;
  };
  type Range2Filter = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
  } & {
    [key: string]: any;
  };
  type BoolQuery = {
    must?: Array<any>;
    mustNot?: Array<any>;
    should?: Array<any>;
  } & {
    [key: string]: any;
  };
  type SimpleSearchResultBase = {
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type NestedQuery = {
    path: string;
    query: any;
    scoreMode?: string;
  } & {
    [key: string]: any;
  };
  type Filter = {
    boolFilter?: BoolFilter;
    queryFilter?: QueryFilter;
    range2Filter?: Range2Filter;
    rangeFilter?: RangeFilter;
    termFilter?: TermFilter;
  } & {
    [key: string]: any;
  };
  type Sort = {
    field: string;
    sortOrder?: string;
  } & {
    [key: string]: any;
  };
  type RangeFilter = {
    field: string;
    from?: any;
    fromInclusive?: boolean;
    to?: any;
    toInclusive?: boolean;
  } & {
    [key: string]: any;
  };
  type SearchRequestBase = {
    limit?: number;
    query: any;
    sorts?: Array<Sort>;
    offset?: number;
  } & {
    [key: string]: any;
  };
}
/**
* [Shopper Products](https://developer.commercecloud.com/s/api-details/a003k00000UHvp0AAD)
* ==================================
*
* *Display product details across your storefront.*<br />
*
* Simple example:
*
* ```typescript
*   import { Product, ClientConfig } from "commerce-sdk";
*   // or
*   const { Product, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const shopperProductsClient = new Product.ShopperProducts(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const shopperProductsClient = new Product.ShopperProducts(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 0.0.13<br />
* Last Updated: 2020-07-17T16:57:45.585Z<br />
* </span>

*

*/
export declare class ShopperProducts extends BaseClient {
  constructor(config: ClientConfig);
  /**
   * Allows access to multiple products by a single request. Only products that are online and assigned to a site catalog are returned. The maximum number of productIDs that can be requested are 24. Alongwith product details, the availability, images, price, promotion and variations data for the valid products will be included as appropriate.
   *
   * If you would like to get a raw Response object use the other getProducts function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param ids - The IDs of the requested products (comma-separated, max 24 IDs).
   * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
   * @param currency - The currency mnemonic specified for price.
   * @param locale - The locale context.
   * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type ShopperProducts.ProductResult.
   *
   */
  getProducts(options?: {
    parameters?: {
      organizationId?: string;
      ids: string;
      inventoryIds?: string;
      currency?: string;
      locale?: string;
      allImages?: boolean;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<ShopperProducts.ProductResult>;
  /**
   * Allows access to multiple products by a single request. Only products that are online and assigned to a site catalog are returned. The maximum number of productIDs that can be requested are 24. Alongwith product details, the availability, images, price, promotion and variations data for the valid products will be included as appropriate.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param ids - The IDs of the requested products (comma-separated, max 24 IDs).
   * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
   * @param currency - The currency mnemonic specified for price.
   * @param locale - The locale context.
   * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperProducts.ProductResult otherwise.
   *
   */
  getProducts<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        ids: string;
        inventoryIds?: string;
        currency?: string;
        locale?: string;
        allImages?: boolean;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : ShopperProducts.ProductResult>;
  /**
   * Allows access to product details for a single product ID. Only products that are online and assigned to a site catalog are returned. Along with product details, the availability,images,price,bundled_products,set_products,recommedations,productoptions,variation and promotion data for the products will be included as appropriate.
   *
   * If you would like to get a raw Response object use the other getProduct function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param id - The ID of the requested product.
   * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
   * @param currency - The currency mnemonic specified for price.
   * @param locale - The locale context.
   * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type ShopperProducts.Product.
   *
   */
  getProduct(options?: {
    parameters?: {
      organizationId?: string;
      id: string;
      inventoryIds?: string;
      currency?: string;
      locale?: string;
      allImages?: boolean;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<ShopperProducts.Product>;
  /**
   * Allows access to product details for a single product ID. Only products that are online and assigned to a site catalog are returned. Along with product details, the availability,images,price,bundled_products,set_products,recommedations,productoptions,variation and promotion data for the products will be included as appropriate.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param id - The ID of the requested product.
   * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
   * @param currency - The currency mnemonic specified for price.
   * @param locale - The locale context.
   * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperProducts.Product otherwise.
   *
   */
  getProduct<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        id: string;
        inventoryIds?: string;
        currency?: string;
        locale?: string;
        allImages?: boolean;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : ShopperProducts.Product>;
  /**
   * When you use the URL template, the server returns multiple categories (a result object of category documents). You can use this template as a convenient way of obtaining multiple categories in a single request, instead of issuing separate requests for each category. You can specify up to 50 multiple IDs. You must enclose the list of IDs in parentheses. If a category identifier contains parenthesis or the separator sign, you must URL encode the character. The server only returns online categories.
   *
   * If you would like to get a raw Response object use the other getCategories function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param ids - The comma separated list of category IDs (max 50).
   * @param levels - Specifies how many levels of nested subcategories you want the server to return. The default value is 1. Valid values are 0, 1, or 2.
   * @param locale - The locale context.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type ShopperProducts.CategoryResult.
   *
   */
  getCategories(options?: {
    parameters?: {
      organizationId?: string;
      ids: string;
      levels?: number;
      locale?: string;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<ShopperProducts.CategoryResult>;
  /**
   * When you use the URL template, the server returns multiple categories (a result object of category documents). You can use this template as a convenient way of obtaining multiple categories in a single request, instead of issuing separate requests for each category. You can specify up to 50 multiple IDs. You must enclose the list of IDs in parentheses. If a category identifier contains parenthesis or the separator sign, you must URL encode the character. The server only returns online categories.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param ids - The comma separated list of category IDs (max 50).
   * @param levels - Specifies how many levels of nested subcategories you want the server to return. The default value is 1. Valid values are 0, 1, or 2.
   * @param locale - The locale context.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperProducts.CategoryResult otherwise.
   *
   */
  getCategories<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        ids: string;
        levels?: number;
        locale?: string;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : ShopperProducts.CategoryResult>;
  /**
    * When you use the URL template below, the server returns a category identified by its ID; by default, the server
also returns the first level of subcategories, but you can specify another level by setting the levels
parameter. The server only returns online categories.
    *
    * If you would like to get a raw Response object use the other getCategory function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the requested category.
    * @param levels -
    * @param locale -
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type ShopperProducts.Category.
    *
    */
  getCategory(options?: {
    parameters?: {
      organizationId?: string;
      id: string;
      levels?: number;
      locale?: string;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<ShopperProducts.Category>;
  /**
    * When you use the URL template below, the server returns a category identified by its ID; by default, the server
also returns the first level of subcategories, but you can specify another level by setting the levels
parameter. The server only returns online categories.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param id - The ID of the requested category.
    * @param levels -
    * @param locale -
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperProducts.Category otherwise.
    *
    */
  getCategory<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        id: string;
        levels?: number;
        locale?: string;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : ShopperProducts.Category>;
}
