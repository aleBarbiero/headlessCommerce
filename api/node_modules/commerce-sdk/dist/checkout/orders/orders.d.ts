/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import { OperationOptions } from "retry";
export declare namespace Orders {
  type PaymentTransactionUpdateRequest = {} & {
    [key: string]: any;
  };
  type PaymentInstrumentUpdateRequest = {} & {
    [key: string]: any;
  };
  type OrderPaymentStatusUpdateRequest = {
    status: string;
  };
  type OrderConfirmationStatusUpdateRequest = {
    status: string;
  };
  type ShippingAddressUpdateRequest = {
    address1?: string;
    address2?: string;
    city?: string;
    companyName?: string;
    countryCode?: string;
    firstName?: string;
    fullName?: string;
    id?: string;
    jobTitle?: string;
    lastName?: string;
    phone?: string;
    postBox?: string;
    postalCode?: string;
    salutation?: string;
    secondName?: string;
    stateCode?: string;
    suffix?: string;
    suite?: string;
    title?: string;
  } & {
    [key: string]: any;
  };
  type OrderExternalStatusUpdateRequest = {
    status: string;
  };
  type OrderShippingStatusUpdateRequest = {
    status: string;
  };
  type OrderUpdateRequest = {} & {
    [key: string]: any;
  };
  type ErrorResponse = {
    type: string;
    title?: string;
    detail?: string;
    instance?: string;
  } & {
    [key: string]: any;
  };
  type OrderExportStatusUpdateRequest = {
    status: string;
  };
  type OrderStatusUpdateRequest = {
    status: string;
  };
  type Money = {
    currencyMnemonic?: string;
    value?: number;
  } & {
    [key: string]: any;
  };
  type SimpleSearchResult = {
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type SearchRequest = {
    limit?: number;
    query: any;
    sorts?: Array<Sort>;
    offset?: number;
  } & {
    [key: string]: any;
  };
  type PaginatedSearchResult = {
    query: any;
    sorts?: Array<Sort>;
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type ClosedObject = {} & {
    [key: string]: any;
  };
  type OpenObject = {} & {
    [key: string]: any;
  };
  type BoolFilter = {
    filters?: Array<any>;
    operator: string;
  } & {
    [key: string]: any;
  };
  type PaginatedSearchResultBase = {
    query: any;
    sorts?: Array<Sort>;
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type MatchAllQuery = {} & {
    [key: string]: any;
  };
  type FilteredQuery = {
    filter: any;
    query: any;
  } & {
    [key: string]: any;
  };
  type QueryFilter = {
    query: any;
  } & {
    [key: string]: any;
  };
  type Query = {
    boolQuery?: BoolQuery;
    filteredQuery?: FilteredQuery;
    matchAllQuery?: MatchAllQuery;
    nestedQuery?: NestedQuery;
    termQuery?: TermQuery;
    textQuery?: TextQuery;
  } & {
    [key: string]: any;
  };
  type TermQuery = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
  } & {
    [key: string]: any;
  };
  type TermFilter = {
    field: string;
    operator: string;
    values?: Array<any>;
  } & {
    [key: string]: any;
  };
  type TextQuery = {
    fields: Array<string>;
    searchPhrase: string;
  } & {
    [key: string]: any;
  };
  type Range2Filter = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
  } & {
    [key: string]: any;
  };
  type BoolQuery = {
    must?: Array<any>;
    mustNot?: Array<any>;
    should?: Array<any>;
  } & {
    [key: string]: any;
  };
  type SimpleSearchResultBase = {
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type NestedQuery = {
    path: string;
    query: any;
    scoreMode?: string;
  } & {
    [key: string]: any;
  };
  type Filter = {
    boolFilter?: BoolFilter;
    queryFilter?: QueryFilter;
    range2Filter?: Range2Filter;
    rangeFilter?: RangeFilter;
    termFilter?: TermFilter;
  } & {
    [key: string]: any;
  };
  type Sort = {
    field: string;
    sortOrder?: string;
  } & {
    [key: string]: any;
  };
  type RangeFilter = {
    field: string;
    from?: any;
    fromInclusive?: boolean;
    to?: any;
    toInclusive?: boolean;
  } & {
    [key: string]: any;
  };
  type SearchRequestBase = {
    limit?: number;
    query: any;
    sorts?: Array<Sort>;
    offset?: number;
  } & {
    [key: string]: any;
  };
  type NoPropertiesAllowed = {};
  type SpecifiedPropertiesAllowed = {} & {
    [key: string]: any;
  };
  type MoneyMnemonic = {
    currencyMnemonic?: string;
    value?: number;
  } & {
    [key: string]: any;
  };
}
/**
* [Orders](https://developer.commercecloud.com/s/api-details/a003k00000UHvp4AAD)
* ==================================
*
* *Manage order and order payment status.*<br />
*
* Simple example:
*
* ```typescript
*   import { Checkout, ClientConfig } from "commerce-sdk";
*   // or
*   const { Checkout, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const ordersClient = new Checkout.Orders(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const ordersClient = new Checkout.Orders(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.0.16<br />
* Last Updated: 2020-07-16T20:32:53.594Z<br />
* </span>

*

*/
export declare class Orders extends BaseClient {
  constructor(config: ClientConfig);
  /**
   * Updates the order.
   *
   * If you would like to get a raw Response object use the other updateOrder function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type void.
   *
   */
  updateOrder(options: {
    parameters?: {
      organizationId?: string;
      orderNo: string;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Orders.OrderUpdateRequest;
  }): Promise<void>;
  /**
   * Updates the order.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrder<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        orderNo: string;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Orders.OrderUpdateRequest;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : void>;
  /**
   * Updates the order confirmation status.
   *
   * If you would like to get a raw Response object use the other updateOrderConfirmationStatus function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type void.
   *
   */
  updateOrderConfirmationStatus(options: {
    parameters?: {
      organizationId?: string;
      orderNo: string;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Orders.OrderConfirmationStatusUpdateRequest;
  }): Promise<void>;
  /**
   * Updates the order confirmation status.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderConfirmationStatus<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        orderNo: string;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Orders.OrderConfirmationStatusUpdateRequest;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : void>;
  /**
   * Updates the order export status. Setting the status to EXPORTED will also trigger the finalization of on-order inventory transactions for this order, meaning that all inventory transactions with type on-order are moved into final inventory transactions. This is only relevant when on-order inventory is turned on for the inventory list ordered products are in.
   *
   * If you would like to get a raw Response object use the other updateOrderExportStatus function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type void.
   *
   */
  updateOrderExportStatus(options: {
    parameters?: {
      organizationId?: string;
      orderNo: string;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Orders.OrderExportStatusUpdateRequest;
  }): Promise<void>;
  /**
   * Updates the order export status. Setting the status to EXPORTED will also trigger the finalization of on-order inventory transactions for this order, meaning that all inventory transactions with type on-order are moved into final inventory transactions. This is only relevant when on-order inventory is turned on for the inventory list ordered products are in.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderExportStatus<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        orderNo: string;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Orders.OrderExportStatusUpdateRequest;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : void>;
  /**
   * Updates the order external status.
   *
   * If you would like to get a raw Response object use the other updateOrderExternalStatus function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type void.
   *
   */
  updateOrderExternalStatus(options: {
    parameters?: {
      organizationId?: string;
      orderNo: string;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Orders.OrderExternalStatusUpdateRequest;
  }): Promise<void>;
  /**
   * Updates the order external status.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderExternalStatus<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        orderNo: string;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Orders.OrderExternalStatusUpdateRequest;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : void>;
  /**
   * Updates the order payment status.
   *
   * If you would like to get a raw Response object use the other updateOrderPaymentStatus function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type void.
   *
   */
  updateOrderPaymentStatus(options: {
    parameters?: {
      organizationId?: string;
      orderNo: string;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Orders.OrderPaymentStatusUpdateRequest;
  }): Promise<void>;
  /**
   * Updates the order payment status.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderPaymentStatus<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        orderNo: string;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Orders.OrderPaymentStatusUpdateRequest;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : void>;
  /**
   * Updates the order shipping status.
   *
   * If you would like to get a raw Response object use the other updateOrderShippingStatus function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type void.
   *
   */
  updateOrderShippingStatus(options: {
    parameters?: {
      organizationId?: string;
      orderNo: string;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Orders.OrderShippingStatusUpdateRequest;
  }): Promise<void>;
  /**
   * Updates the order shipping status.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderShippingStatus<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        orderNo: string;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Orders.OrderShippingStatusUpdateRequest;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : void>;
  /**
   * Updates the order status. Orders which are in status NEW, COMPLETED, or CANCELLED can not be set to status CREATED or FAILED.
   *
   * If you would like to get a raw Response object use the other updateOrderStatus function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type void.
   *
   */
  updateOrderStatus(options: {
    parameters?: {
      organizationId?: string;
      orderNo: string;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Orders.OrderStatusUpdateRequest;
  }): Promise<void>;
  /**
   * Updates the order status. Orders which are in status NEW, COMPLETED, or CANCELLED can not be set to status CREATED or FAILED.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderStatus<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        orderNo: string;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Orders.OrderStatusUpdateRequest;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : void>;
  /**
   * Updates the payment instrument of an order.
   *
   * If you would like to get a raw Response object use the other updateOrderPaymentInstrument function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param paymentInstrumentId - ID of the payment instrument.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type void.
   *
   */
  updateOrderPaymentInstrument(options: {
    parameters?: {
      organizationId?: string;
      orderNo: string;
      paymentInstrumentId: string;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Orders.PaymentInstrumentUpdateRequest;
  }): Promise<void>;
  /**
   * Updates the payment instrument of an order.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param paymentInstrumentId - ID of the payment instrument.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderPaymentInstrument<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        orderNo: string;
        paymentInstrumentId: string;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Orders.PaymentInstrumentUpdateRequest;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : void>;
  /**
   * Updates the transaction of an order payment instrument.
   *
   * If you would like to get a raw Response object use the other updateOrderPaymentTransaction function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param paymentInstrumentId - ID of the payment instrument.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type void.
   *
   */
  updateOrderPaymentTransaction(options: {
    parameters?: {
      organizationId?: string;
      orderNo: string;
      paymentInstrumentId: string;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Orders.PaymentTransactionUpdateRequest;
  }): Promise<void>;
  /**
   * Updates the transaction of an order payment instrument.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param paymentInstrumentId - ID of the payment instrument.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderPaymentTransaction<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        orderNo: string;
        paymentInstrumentId: string;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Orders.PaymentTransactionUpdateRequest;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : void>;
  /**
   * Updates (create or replace) the order shipment address.
   *
   * If you would like to get a raw Response object use the other updateOrderShippingAddress function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param shipmentId - ID of the shipment.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type void.
   *
   */
  updateOrderShippingAddress(options: {
    parameters?: {
      organizationId?: string;
      orderNo: string;
      shipmentId: string;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Orders.ShippingAddressUpdateRequest;
  }): Promise<void>;
  /**
   * Updates (create or replace) the order shipment address.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param orderNo - The order number.
   * @param shipmentId - ID of the shipment.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  updateOrderShippingAddress<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        orderNo: string;
        shipmentId: string;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Orders.ShippingAddressUpdateRequest;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : void>;
}
