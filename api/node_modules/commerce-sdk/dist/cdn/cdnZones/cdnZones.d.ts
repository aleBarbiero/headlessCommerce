/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import { OperationOptions } from "retry";
export declare namespace CdnZones {
  type FirewallRule = {
    firewallruleId?: string;
    zoneId: string;
    type: string;
    action: string;
    values: Array<string>;
  } & {
    [key: string]: any;
  };
  type CollectionResponseEnvelope = {
    data?: Array<any>;
  } & {
    [key: string]: any;
  };
  type WafGroupEnvelope = {
    data: WafGroup;
  } & {
    [key: string]: any;
  };
  type Zone = {
    zoneId: string;
    name: string;
    status: string;
  } & {
    [key: string]: any;
  };
  type ZonesEnvelope = {
    data: Array<Zone>;
  } & {
    [key: string]: any;
  };
  type ItemResponseEnvelope = {
    data?: {} & {
      [key: string]: any;
    };
  } & {
    [key: string]: any;
  };
  type ZoneEnvelope = {
    data: Zone;
  } & {
    [key: string]: any;
  };
  type FirewallRuleEnvelope = {
    data: FirewallRule;
  } & {
    [key: string]: any;
  };
  type FirewallRulesEnvelope = {
    data: Array<FirewallRule>;
  } & {
    [key: string]: any;
  };
  type ErrorResponse = {
    type: string;
    title?: string;
    detail?: string;
    instance?: string;
  } & {
    [key: string]: any;
  };
  type WafGroupsEnvelope = {
    data: Array<WafGroup>;
  } & {
    [key: string]: any;
  };
  type WafRulesEnvelope = {
    data: Array<WafRule>;
  } & {
    [key: string]: any;
  };
  type WafGroup = {
    groupId?: string;
    action?: string;
    mode: string;
    description?: string;
  } & {
    [key: string]: any;
  };
  type WafRuleEnvelope = {
    data: WafRule;
  } & {
    [key: string]: any;
  };
  type WafRule = {
    ruleId?: string;
    groupId?: string;
    action: string;
    defaultAction?: string;
    description?: string;
  } & {
    [key: string]: any;
  };
  type Money = {
    currencyMnemonic?: string;
    value?: number;
  } & {
    [key: string]: any;
  };
  type SimpleSearchResult = {
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type SearchRequest = {
    limit?: number;
    query: any;
    sorts?: Array<Sort>;
    offset?: number;
  } & {
    [key: string]: any;
  };
  type PaginatedSearchResult = {
    query: any;
    sorts?: Array<Sort>;
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type BoolFilter = {
    filters?: Array<any>;
    operator: string;
  } & {
    [key: string]: any;
  };
  type MatchAllQuery = {} & {
    [key: string]: any;
  };
  type FilteredQuery = {
    filter: any;
    query: any;
  } & {
    [key: string]: any;
  };
  type QueryFilter = {
    query: any;
  } & {
    [key: string]: any;
  };
  type Query = {
    boolQuery?: BoolQuery;
    filteredQuery?: FilteredQuery;
    matchAllQuery?: MatchAllQuery;
    nestedQuery?: NestedQuery;
    termQuery?: TermQuery;
    textQuery?: TextQuery;
  } & {
    [key: string]: any;
  };
  type TermQuery = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
  } & {
    [key: string]: any;
  };
  type TermFilter = {
    field: string;
    operator: string;
    values?: Array<any>;
  } & {
    [key: string]: any;
  };
  type TextQuery = {
    fields: Array<string>;
    searchPhrase: string;
  } & {
    [key: string]: any;
  };
  type Range2Filter = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
  } & {
    [key: string]: any;
  };
  type BoolQuery = {
    must?: Array<any>;
    mustNot?: Array<any>;
    should?: Array<any>;
  } & {
    [key: string]: any;
  };
  type NestedQuery = {
    path: string;
    query: any;
    scoreMode?: string;
  } & {
    [key: string]: any;
  };
  type Filter = {
    boolFilter?: BoolFilter;
    queryFilter?: QueryFilter;
    range2Filter?: Range2Filter;
    rangeFilter?: RangeFilter;
    termFilter?: TermFilter;
  } & {
    [key: string]: any;
  };
  type Sort = {
    field: string;
    sortOrder?: string;
  } & {
    [key: string]: any;
  };
  type RangeFilter = {
    field: string;
    from?: any;
    fromInclusive?: boolean;
    to?: any;
    toInclusive?: boolean;
  } & {
    [key: string]: any;
  };
}
/**
* [CDN Zones](https://developer.commercecloud.com/s/api-details/a003k00000UIKk2AAH)
* ==================================
*
* *Extend your eCDN beyond Business Manager configuration.*<br />
*
* Simple example:
*
* ```typescript
*   import { Cdn, ClientConfig } from "commerce-sdk";
*   // or
*   const { Cdn, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const cdnZonesClient = new Cdn.CdnZones(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const cdnZonesClient = new Cdn.CdnZones(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.0.5<br />
* Last Updated: 2020-03-09T13:39:14.678Z<br />
* </span>

*

*/
export declare class CdnZones extends BaseClient {
  constructor(config: ClientConfig);
  /**
   * Retrieves zone information.
   *
   * If you would like to get a raw Response object use the other getZonesInfo function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param offset -
   * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type CdnZones.ZonesEnvelope.
   *
   */
  getZonesInfo(options?: {
    parameters?: {
      organizationId?: string;
      offset?: number;
      limit?: number;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<CdnZones.ZonesEnvelope>;
  /**
   * Retrieves zone information.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param offset -
   * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.ZonesEnvelope otherwise.
   *
   */
  getZonesInfo<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        offset?: number;
        limit?: number;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : CdnZones.ZonesEnvelope>;
  /**
   * Retrieves all WAF groups accessible to the caller.
   *
   * If you would like to get a raw Response object use the other getWafGroups function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type CdnZones.WafGroupsEnvelope.
   *
   */
  getWafGroups(options?: {
    parameters?: {
      organizationId?: string;
      zoneId: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<CdnZones.WafGroupsEnvelope>;
  /**
   * Retrieves all WAF groups accessible to the caller.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafGroupsEnvelope otherwise.
   *
   */
  getWafGroups<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        zoneId: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : CdnZones.WafGroupsEnvelope>;
  /**
   * Update action or mode of a specific WAF group.
   *
   * If you would like to get a raw Response object use the other updateWafGroup function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param groupId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type CdnZones.WafGroupEnvelope.
   *
   */
  updateWafGroup(options: {
    parameters?: {
      organizationId?: string;
      zoneId: string;
      groupId: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: CdnZones.WafGroup;
  }): Promise<CdnZones.WafGroupEnvelope>;
  /**
   * Update action or mode of a specific WAF group.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param groupId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafGroupEnvelope otherwise.
   *
   */
  updateWafGroup<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        zoneId: string;
        groupId: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: CdnZones.WafGroup;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : CdnZones.WafGroupEnvelope>;
  /**
   * Retrieve WAF rules under the waf group specified by the caller.
   *
   * If you would like to get a raw Response object use the other getWafRules function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param groupId - WAF Group that contains the WAF rules.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type CdnZones.WafRulesEnvelope.
   *
   */
  getWafRules(options?: {
    parameters?: {
      organizationId?: string;
      zoneId: string;
      groupId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<CdnZones.WafRulesEnvelope>;
  /**
   * Retrieve WAF rules under the waf group specified by the caller.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param groupId - WAF Group that contains the WAF rules.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafRulesEnvelope otherwise.
   *
   */
  getWafRules<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        zoneId: string;
        groupId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : CdnZones.WafRulesEnvelope>;
  /**
   * Retrieve details of a specific WAF rule.
   *
   * If you would like to get a raw Response object use the other getWafRule function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param ruleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type CdnZones.WafRuleEnvelope.
   *
   */
  getWafRule(options?: {
    parameters?: {
      organizationId?: string;
      zoneId: string;
      ruleId: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<CdnZones.WafRuleEnvelope>;
  /**
   * Retrieve details of a specific WAF rule.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param ruleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafRuleEnvelope otherwise.
   *
   */
  getWafRule<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        zoneId: string;
        ruleId: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : CdnZones.WafRuleEnvelope>;
  /**
   * Update action of a specific WAF rule.
   *
   * If you would like to get a raw Response object use the other updateWafRule function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param ruleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type CdnZones.WafRuleEnvelope.
   *
   */
  updateWafRule(options: {
    parameters?: {
      organizationId?: string;
      zoneId: string;
      ruleId: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: CdnZones.WafRule;
  }): Promise<CdnZones.WafRuleEnvelope>;
  /**
   * Update action of a specific WAF rule.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param ruleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafRuleEnvelope otherwise.
   *
   */
  updateWafRule<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        zoneId: string;
        ruleId: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: CdnZones.WafRule;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : CdnZones.WafRuleEnvelope>;
  /**
   * Retrieves existing firewall rules.
   *
   * If you would like to get a raw Response object use the other getFirewallRules function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type CdnZones.FirewallRulesEnvelope.
   *
   */
  getFirewallRules(options?: {
    parameters?: {
      organizationId?: string;
      zoneId: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<CdnZones.FirewallRulesEnvelope>;
  /**
   * Retrieves existing firewall rules.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.FirewallRulesEnvelope otherwise.
   *
   */
  getFirewallRules<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        zoneId: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : CdnZones.FirewallRulesEnvelope>;
  /**
   * Creates a firewall rule.
   *
   * If you would like to get a raw Response object use the other createFirewallRule function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type CdnZones.FirewallRuleEnvelope.
   *
   */
  createFirewallRule(options: {
    parameters?: {
      organizationId?: string;
      zoneId: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: CdnZones.FirewallRule;
  }): Promise<CdnZones.FirewallRuleEnvelope>;
  /**
   * Creates a firewall rule.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.FirewallRuleEnvelope otherwise.
   *
   */
  createFirewallRule<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        zoneId: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: CdnZones.FirewallRule;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : CdnZones.FirewallRuleEnvelope>;
  /**
   * Retrieve a specific firewall rule.
   *
   * If you would like to get a raw Response object use the other getFirewallRule function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param firewallRuleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type CdnZones.FirewallRuleEnvelope.
   *
   */
  getFirewallRule(options?: {
    parameters?: {
      organizationId?: string;
      zoneId: string;
      firewallRuleId: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<CdnZones.FirewallRuleEnvelope>;
  /**
   * Retrieve a specific firewall rule.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param firewallRuleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.FirewallRuleEnvelope otherwise.
   *
   */
  getFirewallRule<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        zoneId: string;
        firewallRuleId: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : CdnZones.FirewallRuleEnvelope>;
  /**
   * Update a specific firewall rule.
   *
   * If you would like to get a raw Response object use the other updateFirewallRule function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param firewallRuleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type CdnZones.FirewallRuleEnvelope.
   *
   */
  updateFirewallRule(options: {
    parameters?: {
      organizationId?: string;
      zoneId: string;
      firewallRuleId: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: CdnZones.FirewallRule;
  }): Promise<CdnZones.FirewallRuleEnvelope>;
  /**
   * Update a specific firewall rule.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param firewallRuleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.FirewallRuleEnvelope otherwise.
   *
   */
  updateFirewallRule<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        zoneId: string;
        firewallRuleId: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: CdnZones.FirewallRule;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : CdnZones.FirewallRuleEnvelope>;
  /**
   * Delete a specific firewall rule.
   *
   * If you would like to get a raw Response object use the other deleteFirewallRule function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param firewallRuleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type void.
   *
   */
  deleteFirewallRule(options?: {
    parameters?: {
      organizationId?: string;
      zoneId: string;
      firewallRuleId: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<void>;
  /**
   * Delete a specific firewall rule.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param firewallRuleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  deleteFirewallRule<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        zoneId: string;
        firewallRuleId: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : void>;
}
