/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import { OperationOptions } from "retry";
export declare namespace Assignments {
  type TimeOfDay = {
    timeFrom: string;
    timeTo: string;
  } & {
    [key: string]: any;
  };
  type Campaign = {
    campaignId: string;
    coupons?: Array<string>;
    creationDate?: any;
    customerGroups?: Array<string>;
    description?: string;
    enabled?: boolean;
    endDate?: any;
    lastModified?: any;
    sourceCodeGroups?: Array<string>;
    startDate?: any;
  } & {
    [key: string]: any;
  };
  type PromotionCampaignAssignment = {
    campaign: Campaign;
    campaignId: string;
    coupons: Array<string>;
    customerGroups: Array<string>;
    description: string;
    enabled: boolean;
    promotion: Promotion;
    promotionId: string;
    rank: number;
    schedule: Schedule;
    sourceCodeGroups: Array<string>;
  } & {
    [key: string]: any;
  };
  type Tag = {
    tagId: string;
  } & {
    [key: string]: any;
  };
  type Promotion = {
    archived?: boolean;
    assignmentInformation?: PromotionAssignmentInformation;
    creationDate?: any;
    currencyCode?: string;
    disableGloballyExcluded?: boolean;
    enabled?: boolean;
    exclusivity: string;
    id: string;
    lastModified?: any;
    name?: {} & {
      [key: string]: any;
    };
    promotionClass?: string;
    tags?: Array<Tag>;
  } & {
    [key: string]: any;
  };
  type PromotionAssignmentInformation = {
    abtestId: string;
    abtestSegmentId: string;
    active: boolean;
    activeAbtestAssignments: Array<PromotionAbtestGroupAssignment>;
    activeCampaignAssignments: Array<PromotionCampaignAssignment>;
    campaignId: string;
    enabled: boolean;
    endDate: any;
    schedule: Schedule;
    scheduleType: string;
    startDate: any;
    upcomingAbtestAssignments: Array<PromotionAbtestGroupAssignment>;
    upcomingCampaignAssignments: Array<PromotionCampaignAssignment>;
  } & {
    [key: string]: any;
  };
  type Schedule = {
    endDate: any;
    recurrence: Recurrence;
    startDate: any;
  } & {
    [key: string]: any;
  };
  type PromotionCampaignAssignmentSearchResult = {
    hits: Array<PromotionCampaignAssignment>;
    query: any;
    sorts?: Array<Sort>;
    limit: number;
    offset: any;
    total: any;
  } & {
    [key: string]: any;
  };
  type Recurrence = {
    dayOfWeek: Array<string>;
    timeOfDay: TimeOfDay;
  } & {
    [key: string]: any;
  };
  type PromotionAbtestGroupAssignment = {
    abtestDescription: string;
    abtestId: string;
    enabled: boolean;
    schedule: Schedule;
    segmentDescription: string;
    segmentId: string;
  } & {
    [key: string]: any;
  };
  type ErrorResponse = {
    type: string;
    title?: string;
    detail?: string;
    instance?: string;
  } & {
    [key: string]: any;
  };
  type Money = {
    currencyMnemonic?: string;
    value?: number;
  } & {
    [key: string]: any;
  };
  type SimpleSearchResult = {
    limit: number;
    hits?: Array<object>;
    offset: any;
    total: any;
  } & {
    [key: string]: any;
  };
  type SearchRequest = {
    limit?: number;
    query: any;
    sorts?: Array<Sort>;
    offset?: any;
  } & {
    [key: string]: any;
  };
  type PaginatedSearchResult = {
    query: any;
    sorts?: Array<Sort>;
    limit: number;
    hits?: Array<object>;
    offset: any;
    total: any;
  } & {
    [key: string]: any;
  };
  type ClosedObject = {} & {
    [key: string]: any;
  };
  type OpenObject = {} & {
    [key: string]: any;
  };
  type MoneyMnemonic = {
    currencyMnemonic?: string;
    value?: number;
  } & {
    [key: string]: any;
  };
  type NoPropertiesAllowed = {};
  type SpecifiedPropertiesAllowed = {} & {
    [key: string]: any;
  };
  type BoolFilter = {
    filters?: Array<any>;
    operator: string;
  } & {
    [key: string]: any;
  };
  type PaginatedSearchResultBase = {
    query: any;
    sorts?: Array<Sort>;
    limit: number;
    hits?: Array<object>;
    offset: any;
    total: any;
  } & {
    [key: string]: any;
  };
  type MatchAllQuery = {} & {
    [key: string]: any;
  };
  type FilteredQuery = {
    filter: any;
    query: any;
  } & {
    [key: string]: any;
  };
  type QueryFilter = {
    query: any;
  } & {
    [key: string]: any;
  };
  type Query = {
    boolQuery?: BoolQuery;
    filteredQuery?: FilteredQuery;
    matchAllQuery?: MatchAllQuery;
    nestedQuery?: NestedQuery;
    termQuery?: TermQuery;
    textQuery?: TextQuery;
  } & {
    [key: string]: any;
  };
  type TermQuery = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
  } & {
    [key: string]: any;
  };
  type TermFilter = {
    field: string;
    operator: string;
    values?: Array<any>;
  } & {
    [key: string]: any;
  };
  type TextQuery = {
    fields: Array<string>;
    searchPhrase: string;
  } & {
    [key: string]: any;
  };
  type Range2Filter = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
  } & {
    [key: string]: any;
  };
  type BoolQuery = {
    must?: Array<any>;
    mustNot?: Array<any>;
    should?: Array<any>;
  } & {
    [key: string]: any;
  };
  type SimpleSearchResultBase = {
    limit: number;
    hits?: Array<object>;
    offset: any;
    total: any;
  } & {
    [key: string]: any;
  };
  type NestedQuery = {
    path: string;
    query: any;
    scoreMode?: string;
  } & {
    [key: string]: any;
  };
  type Filter = {
    boolFilter?: BoolFilter;
    queryFilter?: QueryFilter;
    range2Filter?: Range2Filter;
    rangeFilter?: RangeFilter;
    termFilter?: TermFilter;
  } & {
    [key: string]: any;
  };
  type Sort = {
    field: string;
    sortOrder?: string;
  } & {
    [key: string]: any;
  };
  type RangeFilter = {
    field: string;
    from?: any;
    fromInclusive?: boolean;
    to?: any;
    toInclusive?: boolean;
  } & {
    [key: string]: any;
  };
  type SearchRequestBase = {
    limit?: number;
    query: any;
    sorts?: Array<Sort>;
    offset?: any;
  } & {
    [key: string]: any;
  };
}
/**
* [Assignments](https://developer.commercecloud.com/s/api-details/a003k00000UHvoaAAD)
* ==================================
*
* *Search for promotions associated with campaigns.*<br />
*
* Simple example:
*
* ```typescript
*   import { Pricing, ClientConfig } from "commerce-sdk";
*   // or
*   const { Pricing, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const assignmentsClient = new Pricing.Assignments(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const assignmentsClient = new Pricing.Assignments(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.0.15<br />
* Last Updated: 2020-07-16T20:27:04.095Z<br />
* </span>

*

*/
export declare class Assignments extends BaseClient {
  constructor(config: ClientConfig);
  /**
    * Searches for promotion campaign assignments.

The promotion campaign assignment search document contains a search object that allows filtering on various attributes.

The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped into different buckets.

The following is a list of searchable attributes with their corresponding buckets:
  
  main:
  
  | Attribute | Type |
  |-----------|--------|
  | rank| Integer |
  | startDate | Date |
  | endDate | Date |
   
  campaign:
  
  | Attribute | Type |
  |-----------|--------|
  | campaign| String |
   
  promotion:
  
  | Attribute | Type |
  |-----------|--------|
  | promotionId| String |
  | description | String |
  | enabled | Boolean |
   
  special handling:
  
  | Attribute | Type |
  |-----------|--------|
  | couponId| String |
   
Only fields in the same bucket can be joined using a disjunction (or). For instance, when joining campaignId and rank, only a conjunction (and) is allowed, whereas promotionId and description can be joined to each other using a disjunction because they are in the same bucket. Special handling fields must always use conjunctions. If the field is used in a disjunction that violates this rule, an exception is thrown.

   
Note that only searchable attributes can be used in sorting.

    *
    * If you would like to get a raw Response object use the other assignmentsSearch function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Assignments.PromotionCampaignAssignmentSearchResult.
    *
    */
  assignmentsSearch(options: {
    parameters?: {
      organizationId?: string;
      siteId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Assignments.SearchRequest;
  }): Promise<Assignments.PromotionCampaignAssignmentSearchResult>;
  /**
    * Searches for promotion campaign assignments.

The promotion campaign assignment search document contains a search object that allows filtering on various attributes.

The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped into different buckets.

The following is a list of searchable attributes with their corresponding buckets:
  
  main:
  
  | Attribute | Type |
  |-----------|--------|
  | rank| Integer |
  | startDate | Date |
  | endDate | Date |
   
  campaign:
  
  | Attribute | Type |
  |-----------|--------|
  | campaign| String |
   
  promotion:
  
  | Attribute | Type |
  |-----------|--------|
  | promotionId| String |
  | description | String |
  | enabled | Boolean |
   
  special handling:
  
  | Attribute | Type |
  |-----------|--------|
  | couponId| String |
   
Only fields in the same bucket can be joined using a disjunction (or). For instance, when joining campaignId and rank, only a conjunction (and) is allowed, whereas promotionId and description can be joined to each other using a disjunction because they are in the same bucket. Special handling fields must always use conjunctions. If the field is used in a disjunction that violates this rule, an exception is thrown.

   
Note that only searchable attributes can be used in sorting.

    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Assignments.PromotionCampaignAssignmentSearchResult otherwise.
    *
    */
  assignmentsSearch<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        siteId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Assignments.SearchRequest;
    },
    rawResponse?: T
  ): Promise<
    T extends true
      ? Response
      : Assignments.PromotionCampaignAssignmentSearchResult
  >;
}
