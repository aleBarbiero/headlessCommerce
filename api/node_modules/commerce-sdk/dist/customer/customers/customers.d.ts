/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import { OperationOptions } from "retry";
export declare namespace Customers {
  type CustomerAddress = {
    address1?: string;
    address2?: string;
    addressId: string;
    city?: string;
    companyName?: string;
    countryCode: string;
    creationDate?: any;
    etag?: string;
    firstName?: string;
    fullName?: string;
    jobTitle?: string;
    lastModified?: any;
    lastName: string;
    phone?: string;
    postBox?: string;
    postalCode?: string;
    salutation?: string;
    secondName?: string;
    stateCode?: string;
    suffix?: string;
    suite?: string;
    title?: string;
  } & {
    [key: string]: any;
  };
  type CustomerList = {
    id: string;
  } & {
    [key: string]: any;
  };
  type CustomerSearchHit = {
    data: Customer;
    relevance: number;
  } & {
    [key: string]: any;
  };
  type CustomerAddressResult = {
    limit?: number;
    data?: Array<CustomerAddress>;
    offset?: number;
    total?: number;
  } & {
    [key: string]: any;
  };
  type Customer = {
    birthday?: any;
    companyName?: string;
    creationDate?: any;
    credentials?: Credentials;
    customerId?: string;
    customerNo: string;
    email?: string;
    fax?: string;
    firstName?: string;
    gender?: number;
    jobTitle?: string;
    lastLoginTime?: any;
    lastModified?: any;
    lastName: string;
    lastVisitTime?: any;
    phoneBusiness?: string;
    phoneHome?: string;
    phoneMobile?: string;
    preferredLocale?: string;
    previousLoginTime?: any;
    previousVisitTime?: any;
    primaryAddress?: CustomerAddress;
    salutation?: string;
    secondName?: string;
    suffix?: string;
    title?: string;
  } & {
    [key: string]: any;
  };
  type Credentials = {
    enabled?: boolean;
    locked?: boolean;
    login: string;
    passwordQuestion?: string;
  } & {
    [key: string]: any;
  };
  type CustomerSearchResult = {
    hits: Array<CustomerSearchHit>;
    query: any;
    sorts?: Array<Sort>;
    limit: number;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type Money = {
    currencyMnemonic?: string;
    value?: number;
  } & {
    [key: string]: any;
  };
  type SimpleSearchResult = {
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type SearchRequest = {
    limit?: number;
    query: any;
    sorts?: Array<Sort>;
    offset?: number;
  } & {
    [key: string]: any;
  };
  type PaginatedSearchResult = {
    query: any;
    sorts?: Array<Sort>;
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type ClosedObject = {} & {
    [key: string]: any;
  };
  type OpenObject = {} & {
    [key: string]: any;
  };
  type BoolFilter = {
    filters?: Array<any>;
    operator: string;
  } & {
    [key: string]: any;
  };
  type PaginatedSearchResultBase = {
    query: any;
    sorts?: Array<Sort>;
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type MatchAllQuery = {} & {
    [key: string]: any;
  };
  type FilteredQuery = {
    filter: any;
    query: any;
  } & {
    [key: string]: any;
  };
  type QueryFilter = {
    query: any;
  } & {
    [key: string]: any;
  };
  type Query = {
    boolQuery?: BoolQuery;
    filteredQuery?: FilteredQuery;
    matchAllQuery?: MatchAllQuery;
    nestedQuery?: NestedQuery;
    termQuery?: TermQuery;
    textQuery?: TextQuery;
  } & {
    [key: string]: any;
  };
  type TermQuery = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
  } & {
    [key: string]: any;
  };
  type TermFilter = {
    field: string;
    operator: string;
    values?: Array<any>;
  } & {
    [key: string]: any;
  };
  type TextQuery = {
    fields: Array<string>;
    searchPhrase: string;
  } & {
    [key: string]: any;
  };
  type Range2Filter = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
  } & {
    [key: string]: any;
  };
  type BoolQuery = {
    must?: Array<any>;
    mustNot?: Array<any>;
    should?: Array<any>;
  } & {
    [key: string]: any;
  };
  type SimpleSearchResultBase = {
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type NestedQuery = {
    path: string;
    query: any;
    scoreMode?: string;
  } & {
    [key: string]: any;
  };
  type Filter = {
    boolFilter?: BoolFilter;
    queryFilter?: QueryFilter;
    range2Filter?: Range2Filter;
    rangeFilter?: RangeFilter;
    termFilter?: TermFilter;
  } & {
    [key: string]: any;
  };
  type Sort = {
    field: string;
    sortOrder?: string;
  } & {
    [key: string]: any;
  };
  type RangeFilter = {
    field: string;
    from?: any;
    fromInclusive?: boolean;
    to?: any;
    toInclusive?: boolean;
  } & {
    [key: string]: any;
  };
  type SearchRequestBase = {
    limit?: number;
    query: any;
    sorts?: Array<Sort>;
    offset?: number;
  } & {
    [key: string]: any;
  };
  type NoPropertiesAllowed = {};
  type SpecifiedPropertiesAllowed = {} & {
    [key: string]: any;
  };
  type MoneyMnemonic = {
    currencyMnemonic?: string;
    value?: number;
  } & {
    [key: string]: any;
  };
  type ErrorResponse = {
    type: string;
    title?: string;
    detail?: string;
    instance?: string;
  } & {
    [key: string]: any;
  };
}
/**
* [Customers](https://developer.commercecloud.com/s/api-details/a003k00000UHvouAAD)
* ==================================
*
* *Manage customer information within a customer list.*<br />
*
* Simple example:
*
* ```typescript
*   import { Customer, ClientConfig } from "commerce-sdk";
*   // or
*   const { Customer, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const customersClient = new Customer.Customers(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const customersClient = new Customer.Customers(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 0.0.15<br />
* Last Updated: 2020-07-16T16:56:02.036Z<br />
* </span>

*

*/
export declare class Customers extends BaseClient {
  constructor(config: ClientConfig);
  /**
    * Action to search for customers in a customer list.
The query attribute specifies a complex query that can be used to narrow down the search. These are the list
of searchable attributes:
  
| Attribute | Type |
|-----------|--------|
| customerNo| String |
| firstName | String |
| secondName | String |
| lastName | String |
| suffix | String |
| salutation | String |
| title | String |
| fax| String |
| phoneHome | String |
| phoneBusiness | String |
| phoneMobile | String |
| email | String |
| gender | Integer |
| companyName | String |
| credentials.login | String |
| credentials.enabled | Boolean |

  
    *
    * If you would like to get a raw Response object use the other searchCustomerInCustomerList function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param customerListId - The customer list ID to search in.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Customers.CustomerSearchResult.
    *
    */
  searchCustomerInCustomerList(options: {
    parameters?: {
      organizationId?: string;
      customerListId: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Customers.SearchRequest;
  }): Promise<Customers.CustomerSearchResult>;
  /**
    * Action to search for customers in a customer list.
The query attribute specifies a complex query that can be used to narrow down the search. These are the list
of searchable attributes:
  
| Attribute | Type |
|-----------|--------|
| customerNo| String |
| firstName | String |
| secondName | String |
| lastName | String |
| suffix | String |
| salutation | String |
| title | String |
| fax| String |
| phoneHome | String |
| phoneBusiness | String |
| phoneMobile | String |
| email | String |
| gender | Integer |
| companyName | String |
| credentials.login | String |
| credentials.enabled | Boolean |

  
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param customerListId - The customer list ID to search in.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Customers.CustomerSearchResult otherwise.
    *
    */
  searchCustomerInCustomerList<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        customerListId: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Customers.SearchRequest;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : Customers.CustomerSearchResult>;
  /**
    * Action to create a new customer. The customer is created using the specified credentials and customer
information. This action verifies the following:

  - Login acceptance criteria and uniqueness.
  - Mandatory customer properties.

If the action fails to create the customer, it returns a 400 fault with an appropriate message.

    *
    * If you would like to get a raw Response object use the other createCustomerList function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Customers.Customer.
    *
    */
  createCustomerList(options: {
    parameters?: {
      organizationId?: string;
      listId: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Customers.Customer;
  }): Promise<Customers.Customer>;
  /**
    * Action to create a new customer. The customer is created using the specified credentials and customer
information. This action verifies the following:

  - Login acceptance criteria and uniqueness.
  - Mandatory customer properties.

If the action fails to create the customer, it returns a 400 fault with an appropriate message.

    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Customers.Customer otherwise.
    *
    */
  createCustomerList<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        listId: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Customers.Customer;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : Customers.Customer>;
  /**
   * Deletes the customer, including all related information like the customer addresses.
   *
   * If you would like to get a raw Response object use the other deleteCustomerFromCustomerList function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type void.
   *
   */
  deleteCustomerFromCustomerList(options?: {
    parameters?: {
      organizationId?: string;
      listId: string;
      customerNo: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<void>;
  /**
   * Deletes the customer, including all related information like the customer addresses.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  deleteCustomerFromCustomerList<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        listId: string;
        customerNo: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : void>;
  /**
   * Action to get customer information.
   *
   * If you would like to get a raw Response object use the other getCustomerFromCustomerList function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type Customers.Customer.
   *
   */
  getCustomerFromCustomerList(options?: {
    parameters?: {
      organizationId?: string;
      listId: string;
      customerNo: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<Customers.Customer>;
  /**
   * Action to get customer information.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Customers.Customer otherwise.
   *
   */
  getCustomerFromCustomerList<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        listId: string;
        customerNo: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : Customers.Customer>;
  /**
    * Updates the customer with the specified information. The customer number is allowed to be updated but results in a
CustomerNumberAlreadyInUseException if there is another customer with the same customer number existing.
    *
    * If you would like to get a raw Response object use the other updateCustomerInCustomerList function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param customerNo - The customer number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Customers.Customer.
    *
    */
  updateCustomerInCustomerList(options: {
    parameters?: {
      organizationId?: string;
      listId: string;
      customerNo: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Customers.Customer;
  }): Promise<Customers.Customer>;
  /**
    * Updates the customer with the specified information. The customer number is allowed to be updated but results in a
CustomerNumberAlreadyInUseException if there is another customer with the same customer number existing.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param customerNo - The customer number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Customers.Customer otherwise.
    *
    */
  updateCustomerInCustomerList<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        listId: string;
        customerNo: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Customers.Customer;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : Customers.Customer>;
  /**
    * Action to create a new customer. The customer is created using the specified customer number, credentials, and
customer information. This action verifies the following:

- Login acceptance criteria and uniqueness.
- Mandatory customer properties.

If the action fails to create the customer, it returns a 400 fault with an appropriate message.

    *
    * If you would like to get a raw Response object use the other createCustomerInCustomerList function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param customerNo - The customer number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Customers.Customer | Customers.Customer.
    *
    */
  createCustomerInCustomerList(options: {
    parameters?: {
      organizationId?: string;
      listId: string;
      customerNo: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Customers.Customer;
  }): Promise<Customers.Customer | Customers.Customer>;
  /**
    * Action to create a new customer. The customer is created using the specified customer number, credentials, and
customer information. This action verifies the following:

- Login acceptance criteria and uniqueness.
- Mandatory customer properties.

If the action fails to create the customer, it returns a 400 fault with an appropriate message.

    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param customerNo - The customer number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Customers.Customer | Customers.Customer otherwise.
    *
    */
  createCustomerInCustomerList<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        listId: string;
        customerNo: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Customers.Customer;
    },
    rawResponse?: T
  ): Promise<
    T extends true ? Response : Customers.Customer | Customers.Customer
  >;
  /**
    * Action that returns a pageable list of all customer addresses. The
default page size is 10 customer addresses.
    *
    * If you would like to get a raw Response object use the other getAddressesForCustomerFromCustomerList function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param customerNo - The customer number.
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    *
    * @returns A promise of type Customers.CustomerAddressResult.
    *
    */
  getAddressesForCustomerFromCustomerList(options?: {
    parameters?: {
      organizationId?: string;
      listId: string;
      customerNo: string;
      offset?: number;
      limit?: number;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<Customers.CustomerAddressResult>;
  /**
    * Action that returns a pageable list of all customer addresses. The
default page size is 10 customer addresses.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param customerNo - The customer number.
    * @param offset -
    * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Customers.CustomerAddressResult otherwise.
    *
    */
  getAddressesForCustomerFromCustomerList<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        listId: string;
        customerNo: string;
        offset?: number;
        limit?: number;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : Customers.CustomerAddressResult>;
  /**
    * The action creates a new customer address with the given address
information.
    *
    * If you would like to get a raw Response object use the other createAddressForCustomerInCustomerList function.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param customerNo - The customer number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    *
    * @returns A promise of type Customers.CustomerAddress.
    *
    */
  createAddressForCustomerInCustomerList(options: {
    parameters?: {
      organizationId?: string;
      listId: string;
      customerNo: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Customers.CustomerAddress;
  }): Promise<Customers.CustomerAddress>;
  /**
    * The action creates a new customer address with the given address
information.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param listId -
    * @param customerNo - The customer number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Customers.CustomerAddress otherwise.
    *
    */
  createAddressForCustomerInCustomerList<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        listId: string;
        customerNo: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Customers.CustomerAddress;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : Customers.CustomerAddress>;
  /**
   * Action that returns a single customer address from a customer list.
   *
   * If you would like to get a raw Response object use the other getAddressForCustomerFromCustomerList function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param addressId - The address ID.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type Customers.CustomerAddress.
   *
   */
  getAddressForCustomerFromCustomerList(options?: {
    parameters?: {
      organizationId?: string;
      listId: string;
      customerNo: string;
      addressId: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<Customers.CustomerAddress>;
  /**
   * Action that returns a single customer address from a customer list.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param addressId - The address ID.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Customers.CustomerAddress otherwise.
   *
   */
  getAddressForCustomerFromCustomerList<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        listId: string;
        customerNo: string;
        addressId: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : Customers.CustomerAddress>;
  /**
   * Action which deletes a customer address.
   *
   * If you would like to get a raw Response object use the other removeAddressForCustomerInCustomerList function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param addressId - The address ID.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type void.
   *
   */
  removeAddressForCustomerInCustomerList(options?: {
    parameters?: {
      organizationId?: string;
      listId: string;
      customerNo: string;
      addressId: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<void>;
  /**
   * Action which deletes a customer address.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param addressId - The address ID.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  removeAddressForCustomerInCustomerList<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        listId: string;
        customerNo: string;
        addressId: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : void>;
  /**
   * Action which updates an address of a customer with the given address information.
   *
   * If you would like to get a raw Response object use the other updateAddressForCustomerInCustomerList function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param addressId - The address ID.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type Customers.CustomerAddress.
   *
   */
  updateAddressForCustomerInCustomerList(options: {
    parameters?: {
      organizationId?: string;
      listId: string;
      customerNo: string;
      addressId: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: Customers.CustomerAddress;
  }): Promise<Customers.CustomerAddress>;
  /**
   * Action which updates an address of a customer with the given address information.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param listId -
   * @param customerNo - The customer number.
   * @param addressId - The address ID.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Customers.CustomerAddress otherwise.
   *
   */
  updateAddressForCustomerInCustomerList<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
        listId: string;
        customerNo: string;
        addressId: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: Customers.CustomerAddress;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : Customers.CustomerAddress>;
}
