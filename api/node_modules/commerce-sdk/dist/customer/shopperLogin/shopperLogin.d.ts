/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { BaseClient, ClientConfig, Response } from "@commerce-apps/core";
import { OperationOptions } from "retry";
export declare namespace ShopperLogin {
  type RevokeTokenRequest = {
    token: string;
    tokenTypeHint?: string;
  } & {
    [key: string]: any;
  };
  type IntrospectResponse = {
    active: boolean;
    scope: string;
    clientId: string;
    sub: string;
    exp: number;
    iat: number;
    tokenType: string;
  } & {
    [key: string]: any;
  };
  type ErrorResponse = {
    type: string;
    title?: string;
    detail?: string;
    instance?: string;
  } & {
    [key: string]: any;
  };
  type IntrospectTokenRequest = {
    token: string;
    tokenTypeHint?: string;
  } & {
    [key: string]: any;
  };
  type TokenResponse = {
    accessToken: string;
    refreshToken: string;
    expiresIn: number;
    accessTokenType: string;
    usid: string;
  } & {
    [key: string]: any;
  };
  type TokenRequest = {
    refreshToken?: string;
    code?: string;
    usid?: string;
    grantType: string;
  } & {
    [key: string]: any;
  };
  type SearchRequest = {
    limit?: number;
    query: any;
    sorts?: Array<Sort>;
    offset?: number;
  } & {
    [key: string]: any;
  };
  type PaginatedSearchResult = {
    query: any;
    sorts?: Array<Sort>;
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type SimpleSearchResult = {
    limit: number;
    hits?: Array<object>;
    offset: number;
    total: number;
  } & {
    [key: string]: any;
  };
  type BoolFilter = {
    filters?: Array<any>;
    operator: string;
  } & {
    [key: string]: any;
  };
  type MatchAllQuery = {} & {
    [key: string]: any;
  };
  type FilteredQuery = {
    filter: any;
    query: any;
  } & {
    [key: string]: any;
  };
  type QueryFilter = {
    query: any;
  } & {
    [key: string]: any;
  };
  type Query = {
    boolQuery?: BoolQuery;
    filteredQuery?: FilteredQuery;
    matchAllQuery?: MatchAllQuery;
    nestedQuery?: NestedQuery;
    termQuery?: TermQuery;
    textQuery?: TextQuery;
  } & {
    [key: string]: any;
  };
  type TermQuery = {
    fields: Array<string>;
    operator: string;
    values?: Array<any>;
  } & {
    [key: string]: any;
  };
  type TermFilter = {
    field: string;
    operator: string;
    values?: Array<any>;
  } & {
    [key: string]: any;
  };
  type TextQuery = {
    fields: Array<string>;
    searchPhrase: string;
  } & {
    [key: string]: any;
  };
  type Range2Filter = {
    filterMode?: string;
    fromField: string;
    fromInclusive?: boolean;
    fromValue?: any;
    toField: string;
    toInclusive?: boolean;
    toValue?: any;
  } & {
    [key: string]: any;
  };
  type BoolQuery = {
    must?: Array<any>;
    mustNot?: Array<any>;
    should?: Array<any>;
  } & {
    [key: string]: any;
  };
  type NestedQuery = {
    path: string;
    query: any;
    scoreMode?: string;
  } & {
    [key: string]: any;
  };
  type Filter = {
    boolFilter?: BoolFilter;
    queryFilter?: QueryFilter;
    range2Filter?: Range2Filter;
    rangeFilter?: RangeFilter;
    termFilter?: TermFilter;
  } & {
    [key: string]: any;
  };
  type Sort = {
    field: string;
    sortOrder?: string;
  } & {
    [key: string]: any;
  };
  type RangeFilter = {
    field: string;
    from?: any;
    fromInclusive?: boolean;
    to?: any;
    toInclusive?: boolean;
  } & {
    [key: string]: any;
  };
}
/**
* [Shopper Login](https://developer.commercecloud.com/s/api-details/)
* ==================================
*
* *Enable shoppers to login via federation to any external IDP, get access token and use it to access shopper APIs*<br />
*
* Simple example:
*
* ```typescript
*   import { Customer, ClientConfig } from "commerce-sdk";
*   // or
*   const { Customer, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const shopperLoginClient = new Customer.ShopperLogin(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const shopperLoginClient = new Customer.ShopperLogin(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.1.0<br />
* Last Updated: 2020-07-17T19:05:14.764Z<br />
* </span>
* @beta
*
*

*/
export declare class ShopperLogin extends BaseClient {
  constructor(config: ClientConfig);
  /**
   * Get authorization code after authenticating a user against an IDP. This is the first step of the Authorization code grant flow, where a user is able to login via federation to the IDP configured for the client, and gets an authorization code after succesful login via a callback/redirect URI. Mandatory fields are the shopping app's clientId, redirectURI, responseType and authType. This API can be called from the front channel (from the browser).
   *
   * If you would like to get a raw Response object use the other authorizeCustomer function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param redirectUri - The URL to which the server redirects the browser after the user grants the authorization.  The URI must be pre-registered.
   * @param responseType - Must be 'code'.  'code' indicates that the client wants an authorization code (authorization code grant flow).
   * @param clientId - The client id obtained during application registration.
   * @param scope - (Not Supported)
   * @param state - Value to be sent by the client to determine the state between the authorization request and the server response.  Optional but strongly recommended.
   * @param uuid - Id that uniquely identifies the shopper. This is an optional field, a new UUID will be generated if this field is empty.
   * @param hint - Idp name that can be optionally added to redirect directly to skipping the Idp selection step.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   *
   * @returns A promise of type void.
   *
   * @beta
   *
   */
  authorizeCustomer(options?: {
    parameters?: {
      organizationId?: string;
      redirectUri: string;
      responseType: string;
      clientId?: string;
      scope?: string;
      state?: string;
      uuid?: string;
      hint?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
  }): Promise<void>;
  /**
   * Get authorization code after authenticating a user against an IDP. This is the first step of the Authorization code grant flow, where a user is able to login via federation to the IDP configured for the client, and gets an authorization code after succesful login via a callback/redirect URI. Mandatory fields are the shopping app's clientId, redirectURI, responseType and authType. This API can be called from the front channel (from the browser).
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param redirectUri - The URL to which the server redirects the browser after the user grants the authorization.  The URI must be pre-registered.
   * @param responseType - Must be 'code'.  'code' indicates that the client wants an authorization code (authorization code grant flow).
   * @param clientId - The client id obtained during application registration.
   * @param scope - (Not Supported)
   * @param state - Value to be sent by the client to determine the state between the authorization request and the server response.  Optional but strongly recommended.
   * @param uuid - Id that uniquely identifies the shopper. This is an optional field, a new UUID will be generated if this field is empty.
   * @param hint - Idp name that can be optionally added to redirect directly to skipping the Idp selection step.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   * @beta
   *
   */
  authorizeCustomer<T extends boolean>(
    options?: {
      parameters?: {
        organizationId?: string;
        redirectUri: string;
        responseType: string;
        clientId?: string;
        scope?: string;
        state?: string;
        uuid?: string;
        hint?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : void>;
  /**
   * Get the shopper or guest JWT/access token along with a refresh token. This is the second step of the OAuth2 Authorization code flow where a client app is able to get an access token for the shopper through the backchannel (a trusted server side) by passing in the client credentials and the authorization code retrieved from authorize endpoint. Mandatory fields when using the token endpoint to get the accesstoken are clientId, clientSecret, authorizationCode, grantType of authorization_code. \<br/\>\<br/\> As a guest user get the shopper JWT / access token along with a refresh token. This is where a client app is able to get an access token for the guest user through the back-channel (a trusted server side) by passing in the client credentials. Mandatory fields when asking for the guest token endpoint to get the access token are clientId, clientSecret, grantType of client_credentials.\<br/\>\<br/\> Mandatory fields when using using the token endpoint to refresh an access token are refreshToken, grantType of refresh_token.
   *
   * If you would like to get a raw Response object use the other getAccessToken function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type ShopperLogin.TokenResponse.
   *
   * @beta
   *
   */
  getAccessToken(options: {
    parameters?: {
      organizationId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: ShopperLogin.TokenRequest;
  }): Promise<ShopperLogin.TokenResponse>;
  /**
   * Get the shopper or guest JWT/access token along with a refresh token. This is the second step of the OAuth2 Authorization code flow where a client app is able to get an access token for the shopper through the backchannel (a trusted server side) by passing in the client credentials and the authorization code retrieved from authorize endpoint. Mandatory fields when using the token endpoint to get the accesstoken are clientId, clientSecret, authorizationCode, grantType of authorization_code. \<br/\>\<br/\> As a guest user get the shopper JWT / access token along with a refresh token. This is where a client app is able to get an access token for the guest user through the back-channel (a trusted server side) by passing in the client credentials. Mandatory fields when asking for the guest token endpoint to get the access token are clientId, clientSecret, grantType of client_credentials.\<br/\>\<br/\> Mandatory fields when using using the token endpoint to refresh an access token are refreshToken, grantType of refresh_token.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperLogin.TokenResponse otherwise.
   *
   * @beta
   *
   */
  getAccessToken<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: ShopperLogin.TokenRequest;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : ShopperLogin.TokenResponse>;
  /**
   * Invalidate the refresh token. A basic auth header with base64 encoded clientId:secret is required in the Authorization header and the refresh token to be revoked is required in the body.
   *
   * If you would like to get a raw Response object use the other revokeToken function.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   *
   * @returns A promise of type Object.
   *
   * @beta
   *
   */
  revokeToken(options: {
    parameters?: {
      organizationId?: string;
    };
    retrySettings?: OperationOptions;
    headers?: {
      [key: string]: string;
    };
    body: ShopperLogin.RevokeTokenRequest;
  }): Promise<Record<string, any>>;
  /**
   * Invalidate the refresh token. A basic auth header with base64 encoded clientId:secret is required in the Authorization header and the refresh token to be revoked is required in the body.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
   *
   * @beta
   *
   */
  revokeToken<T extends boolean>(
    options: {
      parameters?: {
        organizationId?: string;
      };
      retrySettings?: OperationOptions;
      headers?: {
        [key: string]: string;
      };
      body: ShopperLogin.RevokeTokenRequest;
    },
    rawResponse?: T
  ): Promise<T extends true ? Response : Record<string, any>>;
}
