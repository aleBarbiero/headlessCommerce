/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { ShopperToken } from "@commerce-apps/core";
import * as sdk from "./";
declare type AuthFuncParamType = Parameters<
  typeof sdk.Customer.ShopperCustomers.prototype.authorizeCustomer
>[0];
declare type Unpacked<T> = T extends Promise<infer U> ? U : T;
declare type CustomerReturnType = ReturnType<
  typeof sdk.Customer.ShopperCustomers.prototype.authorizeCustomer
>;
declare type CustomerType = Exclude<Unpacked<CustomerReturnType>, Response>;
/**
 * This wraps the parameters for the authorization call to retrieve a token.
 * That call can be made directly, this is here just for convenience
 * ```ts
 * const clientConfig: ClientConfig = {
 *  parameters: {
 *      clientId: "XXXXXX",
 *      organizationId: "XXXX",
 *      shortCode: "XXX",
 *      siteId: "XX"
 *  }
 * };
 * helpers.getShopperToken(clientConfig, { type: "guest" })
 * ```
 * @param clientConfig - Client configuration properties
 * @param body - Post body required for authorization
 * @returns the retrieved Shopper token
 */
export declare function getShopperToken(
  clientConfig: sdk.ClientConfig,
  body: AuthFuncParamType["body"]
): Promise<ShopperToken<CustomerType>>;
export {};
