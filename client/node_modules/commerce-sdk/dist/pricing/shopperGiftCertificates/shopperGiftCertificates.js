/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShopperGiftCertificates = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@commerce-apps/core");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
/**
* [Shopper Gift Certificates](https://developer.commercecloud.com/s/api-details/a003k00000UHvogAAD)
* ==================================
*
* *Obtain details about a gift certificate.*<br />
*
* Simple example:
*
* ```typescript
*   import { Pricing, ClientConfig } from "commerce-sdk";
*   // or
*   const { Pricing, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const shopperGiftCertificatesClient = new Pricing.ShopperGiftCertificates(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const shopperGiftCertificatesClient = new Pricing.ShopperGiftCertificates(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.0.7<br />
* Last Updated: 2020-05-20T23:53:29.701Z<br />
* </span>

*

*/
class ShopperGiftCertificates extends core_1.BaseClient {
  /**
   *
   */
  constructor(config) {
    super(config);
    if (!!!config.baseUri) {
      this.clientConfig.baseUri =
        "https://{shortCode}.api.commercecloud.salesforce.com/pricing/shopper-gift-certificates/{version}";
    }
  }
  /**
   * Action to retrieve an existing gift certificate.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperGiftCertificates.GiftCertificate otherwise.
   *
   */
  getGiftCertificate(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.post({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/gift-certificate",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
}
exports.ShopperGiftCertificates = ShopperGiftCertificates;
//# sourceMappingURL=shopperGiftCertificates.js.map
