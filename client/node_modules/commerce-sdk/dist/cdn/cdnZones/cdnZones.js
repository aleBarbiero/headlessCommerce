/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdnZones = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@commerce-apps/core");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
/**
* [CDN Zones](https://developer.commercecloud.com/s/api-details/a003k00000UIKk2AAH)
* ==================================
*
* *Extend your eCDN beyond Business Manager configuration.*<br />
*
* Simple example:
*
* ```typescript
*   import { Cdn, ClientConfig } from "commerce-sdk";
*   // or
*   const { Cdn, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const cdnZonesClient = new Cdn.CdnZones(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const cdnZonesClient = new Cdn.CdnZones(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 1.0.5<br />
* Last Updated: 2020-03-09T13:39:14.678Z<br />
* </span>

*

*/
class CdnZones extends core_1.BaseClient {
  /**
   *
   */
  constructor(config) {
    super(config);
    if (!!!config.baseUri) {
      this.clientConfig.baseUri =
        "https://{shortCode}.api.commercecloud.salesforce.com/cdn/zones/{version}";
    }
  }
  /**
   * Retrieves zone information.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param offset -
   * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.ZonesEnvelope otherwise.
   *
   */
  getZonesInfo(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/zones/info",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * Retrieves all WAF groups accessible to the caller.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafGroupsEnvelope otherwise.
   *
   */
  getWafGroups(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      zoneId: parameters["zoneId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/zones/{zoneId}/waf/groups",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * Update action or mode of a specific WAF group.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param groupId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafGroupEnvelope otherwise.
   *
   */
  updateWafGroup(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      zoneId: parameters["zoneId"],
      groupId: parameters["groupId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.put({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/zones/{zoneId}/waf/groups/{groupId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Retrieve WAF rules under the waf group specified by the caller.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param groupId - WAF Group that contains the WAF rules.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafRulesEnvelope otherwise.
   *
   */
  getWafRules(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      zoneId: parameters["zoneId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/zones/{zoneId}/waf/rules",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * Retrieve details of a specific WAF rule.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param ruleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafRuleEnvelope otherwise.
   *
   */
  getWafRule(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      zoneId: parameters["zoneId"],
      ruleId: parameters["ruleId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/zones/{zoneId}/waf/rules/{ruleId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * Update action of a specific WAF rule.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param ruleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.WafRuleEnvelope otherwise.
   *
   */
  updateWafRule(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      zoneId: parameters["zoneId"],
      ruleId: parameters["ruleId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.put({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/zones/{zoneId}/waf/rules/{ruleId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Retrieves existing firewall rules.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.FirewallRulesEnvelope otherwise.
   *
   */
  getFirewallRules(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      zoneId: parameters["zoneId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/zones/{zoneId}/firewall/rules",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * Creates a firewall rule.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.FirewallRuleEnvelope otherwise.
   *
   */
  createFirewallRule(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      zoneId: parameters["zoneId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.post({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/zones/{zoneId}/firewall/rules",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Retrieve a specific firewall rule.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param firewallRuleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.FirewallRuleEnvelope otherwise.
   *
   */
  getFirewallRule(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      zoneId: parameters["zoneId"],
      firewallRuleId: parameters["firewallRuleId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/zones/{zoneId}/firewall/rules/{firewallRuleId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * Update a specific firewall rule.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param firewallRuleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type CdnZones.FirewallRuleEnvelope otherwise.
   *
   */
  updateFirewallRule(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      zoneId: parameters["zoneId"],
      firewallRuleId: parameters["firewallRuleId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.put({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/zones/{zoneId}/firewall/rules/{firewallRuleId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Delete a specific firewall rule.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param zoneId -
   * @param firewallRuleId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  deleteFirewallRule(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      zoneId: parameters["zoneId"],
      firewallRuleId: parameters["firewallRuleId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.delete({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/zones/{zoneId}/firewall/rules/{firewallRuleId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
}
exports.CdnZones = CdnZones;
//# sourceMappingURL=cdnZones.js.map
