/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShopperBaskets = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@commerce-apps/core");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
/**
* [Shopper Baskets](https://developer.commercecloud.com/s/api-details/a003k00000UHvpEAAT)
* ==================================
*
* *Build a checkout experience.*<br />
*
* Simple example:
*
* ```typescript
*   import { Checkout, ClientConfig } from "commerce-sdk";
*   // or
*   const { Checkout, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const shopperBasketsClient = new Checkout.ShopperBaskets(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const shopperBasketsClient = new Checkout.ShopperBaskets(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 0.1.2<br />
* Last Updated: 2020-07-14T08:32:32.726Z<br />
* </span>

*

*/
class ShopperBaskets extends core_1.BaseClient {
  /**
   *
   */
  constructor(config) {
    super(config);
    if (!!!config.baseUri) {
      this.clientConfig.baseUri =
        "https://{shortCode}.api.commercecloud.salesforce.com/checkout/shopper-baskets/{version}";
    }
  }
  /**
    * Creates a new basket.

The created basket is initialized with default values. Data provided in the body document is populated into the created basket. It can be updated with API endpoints listed below.

The taxMode query parameter can be used to choose the basket tax mode. The default is internal, in which case the tax calculation is done automatically based on internal tax tables. Alternatively, external taxation mode can be set which allows manual modification of the tax rates and values. External tax data is mandatory for product line items, option line items, shipping line items, coupon line items, and bonus discount line item. Gift certificate line items are optional and use zero tax rate per default, which can be overwritten. Price adjustments cannot be set because they are either calculated or inherited (depending on the type, the tax rate is either obtained from the related line item or computed as prorate of the basket).

API endpoints allowing further basket modification:

- customer information: PUT /baskets/\{basketId\}/customer

- billing address: PUT /baskets/\{basketId\}/billing-address

- shipments including shipping address and shipping method: POST /baskets/\{basketId\}/shipments

- product items: POST /baskets/\{basketId\}/items

- coupon items: POST /baskets/\{basketId\}/coupons

- gift certificate items: POST /baskets/\{basketId\}/gift-certificates

- basket taxation: PUT /baskets/\{basketId\}/taxes

- basket item taxation: PUT /baskets/\{basketId\}/items/\{itemId\}/taxes

- payment method and card type: POST /baskets/\{basketId\}/payment-instruments

- custom properties: PATCH /baskets/\{basketId\}

Related resource means with which resource you can specify the same data after the basket creation.
Identify the basket using the basketId property, which
should be integrated into the path of an update request (for example a POST to
/baskets/\{basketId\}/items).

A customer must provide a JSON Web Token (JWT), which specifies exactly one customer (it can be a guest or a registered
customer). In this case, the resource creates a basket for this customer.

The number of baskets which can be created per customer is limited. When a
basket is created, it is said to be open. It remains open until either an order is created from it
using a POST to resource /orders, or it is deleted using a DELETE to resource
/baskets/\{basketId\}. Each customer can have just one open basket.

Custom properties in the form c_\<CUSTOM_NAME\> are supported. A custom property must correspond to a custom
attribute (\<CUSTOM_NAME\>) defined for the basket system object, and its value must be valid for that custom
attribute.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param taxMode -
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
    *
    */
  createBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.post({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/baskets",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Removes a basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  deleteBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.delete({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/baskets/{basketId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * Gets a basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
   *
   */
  getBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/baskets/{basketId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
    * Updates a basket. Only the currency of the basket, source code, the custom
properties of the basket, and the shipping items will be considered.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param basketId - The ID of the basket to be modified.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
    *
    */
  updateBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.patch({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/baskets/{basketId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Sets the billing address of a basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param useAsShipping -
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
   *
   */
  updateBillingAddressForBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.put({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/baskets/{basketId}/billing-address",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Adds a coupon to an existing basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
   *
   */
  addCouponToBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.post({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/baskets/{basketId}/coupons",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Removes a coupon from the basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param couponItemId - The ID of the coupon item to be removed.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
   *
   */
  removeCouponFromBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
      couponItemId: parameters["couponItemId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.delete({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/baskets/{basketId}/coupons/{couponItemId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * Sets customer information for an existing basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
   *
   */
  updateCustomerForBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.put({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/baskets/{basketId}/customer",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Adds a gift certificate item to an existing basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
   *
   */
  addGiftCertificateItemToBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.post({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/baskets/{basketId}/gift-certificate-items",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Deletes a gift certificate item from an existing basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
   *
   */
  removeGiftCertificateItemFromBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
      giftCertificateItemId: parameters["giftCertificateItemId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.delete({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/baskets/{basketId}/gift-certificate-items/{giftCertificateItemId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * Updates a gift certificate item of an existing basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
   *
   */
  updateGiftCertificateItemInBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
      giftCertificateItemId: parameters["giftCertificateItemId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.patch({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/baskets/{basketId}/gift-certificate-items/{giftCertificateItemId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
    * Adds new items to a basket. The added items are associated with the
specified shipment. If no shipment id is specified, the added items are associated with the default shipment.
Considered values from the request body, for each item are:

- productId: a valid product ID. This is the ID of the product to be added to the basket. If the
product is already in the basket, the API either increments the quantity of the existing product line item or
creates a new product line item, based on the site preference 'Add Product Behavior'. For option products and
product bundles containing variation masters, the API creates a new product line item regardless of the site
preference.
- shipmentId: a valid shipment ID (optional). This is the ID of the shipment in which the product item
is created.
- quantity: a number between 0.01 and 999. This is the quantity of the product to order.
- inventoryId: a valid inventory ID (optional). This is the ID of the inventory from which the item is
allocated.
- bonusDiscountLineItemId: a valid bonus discount line item ID (optional). This is the ID of the
bonus discount line item for which the added product is a selected bonus product.
- optionItems/optionValueId: a valid option value ID. This is an option value for an option item of
an option product.  This is only possible if the product item is an option
product. To set option values, you must specify a collection of option items in the optionItems
property. These option items must contain optionId and optionValueId. Also,
the values you specify must be valid for the option product that this product item represents. Otherwise, the
server throws an InvalidProductOptionItemException or an
InvalidProductOptionValueItemException.
- custom properties in the form c_\<CUSTOM_NAME\>: the custom property must correspond to a custom
attribute (\<CUSTOM_NAME\>) defined for ProductLineItem. The value of this property must be valid for the
type of custom attribute defined for ProductLineItem.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param basketId - The ID of the basket to be modified.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
    *
    */
  addItemToBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.post({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/baskets/{basketId}/items",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Removes a product item from the basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param itemId - The ID of the item to be updated.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
   *
   */
  removeItemFromBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
      itemId: parameters["itemId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.delete({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/baskets/{basketId}/items/{itemId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
    * Updates an item in a basket. The
following values in the request body are considered by the server:

- productId: a valid product ID. The purpose of this
value is to exchange a variation of a variation product.
- shipmentId: a valid shipment ID. The purpose of
this value is to move a product item to another shipment.
- quantity: a number between 0 and 999. The purpose of
this value is to change quantity of the product item. If quantity is 0,
the product item is removed.
- optionItems/optionValueId: a valid option value
ID. The purpose of this value is to exchange an option value for an
option item of an option product.
This is only possible if the product item is an option product. To change
option values a collection of option items to be changed need to be
provided in property optionItems. Those
optionItems need to contain optionId
and optionValueId. The provided values must be valid
for the option product that this product item represents. Otherwise
InvalidProductOptionItemException or
InvalidProductOptionValueItemException will be thrown.
custom properties c_\<CUSTOM_NAME\>: a
value corresponding to the type defined for custom attribute
\<CUSTOM_NAME\> of ProductLineItem. The purpose of this value is to
add or change the value of a custom attribute defined for
ProductLineItem.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param basketId - The ID of the basket to be modified.
    * @param itemId - The ID of the item to be updated.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
    *
    */
  updateItemInBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
      itemId: parameters["itemId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.patch({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/baskets/{basketId}/items/{itemId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for a specific taxable line item. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param itemId - The ID of the item to be updated.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  addTaxesForBasketItem(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
      itemId: parameters["itemId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.put({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/baskets/{basketId}/items/{itemId}/taxes",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Adds a payment instrument to a basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
   *
   */
  addPaymentInstrumentToBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.post({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/baskets/{basketId}/payment-instruments",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Removes a payment instrument of a basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param paymentInstrumentId -
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
   *
   */
  removePaymentInstrumentFromBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
      paymentInstrumentId: parameters["paymentInstrumentId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.delete({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/baskets/{basketId}/payment-instruments/{paymentInstrumentId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * Gets applicable payment methods for an existing basket considering the open payment amount only.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.PaymentMethodResult otherwise.
   *
   */
  getPaymentMethodsForBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/baskets/{basketId}/payment-methods",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
    * Creates a new shipment for a basket.

The created shipment is initialized with values provided in the body
document and can be updated with further data API calls. Considered from
the body are the following properties if specified:

- the ID
- the shipping address
- the shipping method
- gift boolean flag
- gift message
- custom properties
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param basketId - The ID of the basket to be modified.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
    *
    */
  createShipmentForBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.post({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/baskets/{basketId}/shipments",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
    * Removes a specified shipment and all associated product, gift certificate,
shipping, and price adjustment line items from a basket.
It is not allowed to remove the default shipment.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param basketId - The ID of the basket to be modified.
    * @param shipmentId - The ID of the shipment to be modified.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
    *
    */
  removeShipmentFromBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
      shipmentId: parameters["shipmentId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.delete({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/baskets/{basketId}/shipments/{shipmentId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
    * Updates a shipment for a basket.

The shipment is initialized with values provided in the body
document and can be updated with further data API calls. Considered from
the body are the following properties if specified:
- the ID
- the shipping address
- the shipping method
- gift boolean flag
- gift message
- custom properties
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId - An identifier for the organization the request is being made by.
    * @param basketId - The ID of the basket to be modified.
    * @param shipmentId - The ID of the shipment to be modified.
    * @param siteId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
    *
    */
  updateShipmentForBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
      shipmentId: parameters["shipmentId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.patch({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/baskets/{basketId}/shipments/{shipmentId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Sets a shipping address of a specific shipment of a basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param shipmentId - The ID of the shipment to be modified.
   * @param useAsBilling -
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
   *
   */
  updateShippingAddressForShipment(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
      shipmentId: parameters["shipmentId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.put({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/baskets/{basketId}/shipments/{shipmentId}/shipping-address",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Sets a shipping method to a specific shipment of a basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param shipmentId - The ID of the shipment to be modified.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Basket otherwise.
   *
   */
  updateShippingMethodForShipment(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
      shipmentId: parameters["shipmentId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.put({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/baskets/{basketId}/shipments/{shipmentId}/shipping-method",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Gets the applicable shipping methods for a certain shipment of a basket.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param shipmentId - The ID of the shipment to be modified.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.ShippingMethodResult otherwise.
   *
   */
  getShippingMethodsForShipment(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
      shipmentId: parameters["shipmentId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/baskets/{basketId}/shipments/{shipmentId}/shipping-methods",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * This method gives you the external taxation data set by the PUT taxes API. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type ShopperBaskets.Taxes otherwise.
   *
   */
  getTaxesFromBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/baskets/{basketId}/taxes",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for all taxable line items. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId - An identifier for the organization the request is being made by.
   * @param basketId - The ID of the basket to be modified.
   * @param siteId -
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  addTaxesForBasket(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      basketId: parameters["basketId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.put({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/baskets/{basketId}/taxes",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
}
exports.ShopperBaskets = ShopperBaskets;
//# sourceMappingURL=shopperBaskets.js.map
