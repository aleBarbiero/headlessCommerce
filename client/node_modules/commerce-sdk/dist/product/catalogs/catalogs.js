/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Catalogs = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@commerce-apps/core");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
/**
* [Catalogs](https://developer.commercecloud.com/s/api-details/a003k00000UHvofAAD)
* ==================================
*
* *Build searchable product categories and catalogs.*<br />
*
* Simple example:
*
* ```typescript
*   import { Product, ClientConfig } from "commerce-sdk";
*   // or
*   const { Product, ClientConfig } = require("commerce-sdk");
*
*   const clientConfig: ClientConfig = { ... };
*   const catalogsClient = new Product.Catalogs(clientConfig);
* ```
*
* Example with shopper auth
* ```typescript
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* token = await helpers.getShopperToken(clientConfig, { type: "guest" });
* clientConfig.headers["authorization"] = token.getBearerHeader();
* const catalogsClient = new Product.Catalogs(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: 0.0.14<br />
* Last Updated: 2020-07-16T20:28:01.813Z<br />
* </span>

*

*/
class Catalogs extends core_1.BaseClient {
  /**
   *
   */
  constructor(config) {
    super(config);
    if (!!!config.baseUri) {
      this.clientConfig.baseUri =
        "https://{shortCode}.api.commercecloud.salesforce.com/product/catalogs/{version}";
    }
  }
  /**
   * Action to get the list of catalog IDs with no filtering.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param offset -
   * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Catalogs otherwise.
   *
   */
  getCatalogs(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/catalogs",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * Gets the catalog with the specified information.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param catalogId - The ID of the requested catalog.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Catalog otherwise.
   *
   */
  getCatalog(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      catalogId: parameters["catalogId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/catalogs/{catalogId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * Updates the catalog with the specified information.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param catalogId - The ID of the requested catalog.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Catalog otherwise.
   *
   */
  updateCatalog(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      catalogId: parameters["catalogId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.patch({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/catalogs/{catalogId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Action to get all the categories with no filtering.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param catalogId - The ID of the requested catalog.
   * @param offset -
   * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Categories otherwise.
   *
   */
  getCategoriesFromCatalog(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      catalogId: parameters["catalogId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/catalogs/{catalogId}/categories",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * Deletes the category by catalog ID and category ID.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param catalogId - The ID of the requested catalog.
   * @param categoryId - The ID of the category to be created.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
   *
   */
  deleteCategoryFromCatalog(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      catalogId: parameters["catalogId"],
      categoryId: parameters["categoryId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.delete({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
    * Action to read an existing category within a catalog. By default, the server
also returns the first level of sub-categories, but you can specify another level by setting the levels
parameter. Using a large value for levels may cause performance
issues in case of a large and deep category tree.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param levels - The level number
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Category otherwise.
    *
    */
  getCategoryFromCatalog(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      catalogId: parameters["catalogId"],
      categoryId: parameters["categoryId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
   * Updates a catalog category using the information provided.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param catalogId - The ID of the requested catalog.
   * @param categoryId - The ID of the category to be created.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Category otherwise.
   *
   */
  updateCategoryInCatalog(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      catalogId: parameters["catalogId"],
      categoryId: parameters["categoryId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.patch({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
   * Creates a catalog category using the information provided.
   *
   * @param options - An object containing the options for this method.
   * @param parameters - An object containing the parameters for this method.
   * @param organizationId -
   * @param catalogId - The ID of the requested catalog.
   * @param categoryId - The ID of the category to be created.
   * @param headers - An object literal of key value pairs of the headers to be
   * sent with this request.
   * @param body - The data to send as the request body.
   * @param rawResponse - Set to true to return entire Response object instead of DTO.
   *
   * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.Category | Catalogs.Category otherwise.
   *
   */
  createCategoryInCatalog(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      catalogId: parameters["catalogId"],
      categoryId: parameters["categoryId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.put({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
    * Searches for category product assignments. The query attribute specifies a complex query that can be used to narrow down the search.

The following are searchable attributes:

  | Attribute | Type |
  |-----------|--------|
  | productId| String |
  | productName | String |
  | onlineFlag | Boolean |
  | searchable | Boolean |
  | validFrom | DateTime |
  | validTo | DateTime |
  | creationDate | DateTime |


 Sortable Fields:

  | Attribute | Type |
  |-----------|--------|
  | productId| String |
  | productName | String |
  | position | Double |
  | creationDate | DateTime |

Expansions that can be applied for the search request:
  - productBase - String

The productBase expand will enable retrieval of the following basic product information:

  | Attribute | Type | Function |
  |-----------|--------|-----|
  | productImages| String | Fetch preview image and image groups specified for the given product. |
  | productAllImages | String | Fetch preview image, image groups specified for the product, and variant and variation group images. |
  | productVariations | String | Fetch variations related information. |
  | productAvailability | String | Fetch availability related information. |
  | productCategories | String | Fetch category related information. |
  | productPrices | String | Fetch price related information. |
  | productOptions | String | Fetch options related information. |
  | productAll | String | Fetch all expanded information. |

Note: productAll includes the following:
  - brand
  - ean
  - link
  - longDescription
  - manufacturerName
  - manufacturerSku
  - name
  - pageDescription
  - pageKeywords
  - pageTitle
  - searchable
  - shortDescription
  - type
  - unit
  - upc
  

    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param siteId - The site ID of the context for the product being queried for in the request.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.CategoryProductAssignmentSearchResult otherwise.
    *
    */
  searchProductsAssignedToCategory(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      catalogId: parameters["catalogId"],
      categoryId: parameters["categoryId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    queryParameters["siteId"] =
      queryParameters["siteId"] !== undefined
        ? parameters["siteId"]
        : this.clientConfig.parameters["siteId"];
    // @ts-ignore
    return core_1.StaticClient.post({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}/category-product-assignment-search",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
    * Retrieves a category product assignment.


For example, if we have products A, B, C at positions 1, 2, 7.5, and delete assignment for product B,
  the products end up A, B, C at positions 1, null, 7.5.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param productId - The ID (SKU) of the requested product to assign.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.CategoryProductAssignment otherwise.
    *
    */
  getAssignedProductFromCategory(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      catalogId: parameters["catalogId"],
      categoryId: parameters["categoryId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.get({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}/products/{productId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
    * Removes a category product assignment.


For example, if we have products A, B, C at positions 1, 2, 7.5 and delete assignment for product B,
the products end up A, B, C at positions 1, null, 7.5.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param productId - The ID (SKU) of the requested product to assign.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
    *
    */
  unassignProductFromCategory(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      catalogId: parameters["catalogId"],
      categoryId: parameters["categoryId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.delete({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}/products/{productId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
    });
  }
  /**
    * Updates the category product assignment with the specified information, such as position.
  As the assigned position n is a normalized target position, we'll make sure that the product is assigned
to a position so that the order of positions are maintained.

For example, if we have products A, B, C, D at positions 1, 2, 3, 4 and update product A with a  new position of 3,
the end result is B, C, A, D with order of positions 1, 2, 3, 4. If we then update product C to no position,
the end result is B, A, D, C with order of positions 1, 2, 3, null.

If there are n existing positioned assignments, updating product to position \>= n will end with a new assignment with a position such that the order of positions is maintained.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param productId - The ID (SKU) of the requested product to assign.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.CategoryProductAssignment otherwise.
    *
    */
  updateProductCategoryAssignment(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      catalogId: parameters["catalogId"],
      categoryId: parameters["categoryId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.patch({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}/products/{productId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
    * Creates a category product assignment using the information provided.

As the assigned position n is a normalized target position, we'll make sure that the product is assigned
to a position so that the order of positions are maintained.

For example, if we have products A, B, C at positions 1, 2, 3, and product D is assigned to
position 2, the end result is A, D, B, C with order of positions 1, 2, 3, 4.

If there are n existing positioned assignment, assigning a new product to position \>= n+1 will end
with the new assignment with position n+1.
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param categoryId - The ID of the category to be created.
    * @param productId - The ID (SKU) of the requested product to assign.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.CategoryProductAssignment | Catalogs.CategoryProductAssignment otherwise.
    *
    */
  assignProductToCategory(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      catalogId: parameters["catalogId"],
      categoryId: parameters["categoryId"],
      productId: parameters["productId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.put({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}/products/{productId}",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
    * Searches for catalog categories in the scope of catalog.
By default, the server also returns the first level of subcategories,
  but you can specify another level by setting the levels parameter.
  Using a large value for levels may cause performance
  issues with a large and deep category tree.

The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|parentCategoryId | String|


The output of the query can also be sorted with the following sortable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|position | Double|
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param catalogId - The ID of the requested catalog.
    * @param levels - The level number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.CategorySearchResult otherwise.
    *
    */
  searchCategoriesInCatalog(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
      catalogId: parameters["catalogId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.post({
      client: this,
      rawResponse: rawResponse,
      path:
        "/organizations/{organizationId}/catalogs/{catalogId}/category-search",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
    * Searches for catalogs.

The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:
   
| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |

There are two additional fields that can be used as search filters. They are not attributes in CatalogWO object,
but can be used as filters to query catalogs based on site assignments.

| Attribute | Type |
|-----------|--------|
|isMasterCatalog | Boolean |
|isStorefrontCatalog | Boolean |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|position | Double|


On using isMasterCatalog in the search query, catalogs without any site assignments are returned.
On using isStorefrontCatalog in the search query, catalogs with one or more site assignments are returned.

The output of the query can also be sorted with the following sortable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.CatalogSearchResult otherwise.
    *
    */
  searchCatalogs(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.post({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/catalog-search",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
  /**
    * Searches for catalog categories anywhere they appear.
By default, the server also returns the first level of subcategories,
  but you can specify another level by setting the levels parameter.
  Please note, using a large value for levels may cause performance
  issues with a large and deep category tree.

The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|catalogId | String|

The output of the query can also be sorted with the following sortable attributes:

| Attribute | Type |
|-----------|--------|
|id | String |
|name | String |
|description | String |
|creationDate | DateTime |
|online | Boolean |
|position | Double|
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    * @param organizationId -
    * @param levels - The level number.
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    * @param body - The data to send as the request body.
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type Catalogs.CategorySearchResult otherwise.
    *
    */
  searchCategories(options, rawResponse) {
    const parameters = options && options.parameters ? options.parameters : {};
    const pathParameters = {
      organizationId:
        parameters["organizationId"] !== undefined
          ? parameters["organizationId"]
          : this.clientConfig.parameters["organizationId"],
    };
    const queryParameters = lodash_1.default.omit(
      parameters,
      lodash_1.default.keys(pathParameters)
    );
    // @ts-ignore
    return core_1.StaticClient.post({
      client: this,
      rawResponse: rawResponse,
      path: "/organizations/{organizationId}/category-search",
      pathParameters: pathParameters,
      queryParameters: queryParameters,
      retrySettings: (options || {}).retrySettings,
      headers: (options || {}).headers,
      body: (options || {}).body,
    });
  }
}
exports.Catalogs = Catalogs;
//# sourceMappingURL=catalogs.js.map
