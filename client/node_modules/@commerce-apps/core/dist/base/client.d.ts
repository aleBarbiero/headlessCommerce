import { OperationOptions } from "retry";
import { CommonParameters } from "./commonParameters";
import { ICacheManager } from "./cacheManager";
/**
 * Defines all the parameters that can be reused by the client.
 *
 * @remarks
 * Headers can be overwritten when actual calls are made.
 *
 * @class ClientConfig
 */
export declare class ClientConfig {
    baseUri?: string;
    cacheManager?: ICacheManager;
    headers?: {
        [key: string]: string;
    };
    parameters?: CommonParameters;
    retrySettings?: OperationOptions;
}
/**
 * A basic implementation of a client that all the Commerce API clients extend.
 *
 * @class BaseClient
 */
export declare class BaseClient {
    clientConfig: ClientConfig;
    constructor(config?: ClientConfig);
    /**
     * Initializes a mock service for the client to interact with.
     *
     * @remarks
     * It is used for testing purposes.
     *
     * @returns A promise of type void
     */
    initializeMockService(): Promise<void>;
}
export { Response } from "minipass-fetch";
export { ResponseError } from "./staticClient";
