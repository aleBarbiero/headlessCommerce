"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseClient = exports.ClientConfig = void 0;
const tslib_1 = require("tslib");
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const quick_lru_1 = tslib_1.__importDefault(require("quick-lru"));
const dotenv_1 = require("dotenv");
const raml_toolkit_1 = require("@commerce-apps/raml-toolkit");
const cacheManagerKeyv_1 = require("./cacheManagerKeyv");
// eslint-disable-next-line @typescript-eslint/no-var-requires
// dotenv config loads environmental variables.
dotenv_1.config();
/**
 * Defines all the parameters that can be reused by the client.
 *
 * @remarks
 * Headers can be overwritten when actual calls are made.
 *
 * @class ClientConfig
 */
class ClientConfig {
}
exports.ClientConfig = ClientConfig;
const DEFAULT_CLIENT_CONFIG = {
    // Enables quick-lru for local caching by default
    // Limits to 10000 unique entities to cache before
    // replacing least recently used (LRU) entities
    cacheManager: new cacheManagerKeyv_1.CacheManagerKeyv({
        keyvStore: new quick_lru_1.default({ maxSize: 10000 }),
    }),
    headers: {
        "content-type": "application/json",
        connection: "close",
    },
    parameters: {
        // Ideally, when version is set as a parameter in the baseUri, it's gets
        // filled in from the version field in the RAML. Until that's implemented,
        // we'll default to v1.
        version: "v1",
    },
};
/**
 * A basic implementation of a client that all the Commerce API clients extend.
 *
 * @class BaseClient
 */
class BaseClient {
    constructor(config) {
        this.clientConfig = {};
        lodash_1.default.merge(this.clientConfig, DEFAULT_CLIENT_CONFIG, config);
    }
    /**
     * Initializes a mock service for the client to interact with.
     *
     * @remarks
     * It is used for testing purposes.
     *
     * @returns A promise of type void
     */
    initializeMockService() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const token = yield raml_toolkit_1.getBearer(process.env.ANYPOINT_USERNAME, process.env.ANYPOINT_PASSWORD);
                lodash_1.default.merge(this.clientConfig.headers, {
                    "ms2-authorization": `bearer ${token}`,
                    "ms2-origin": "Exchange",
                });
            }
            catch (err) {
                throw new Error("Error while initializing mock client\n".concat(err));
            }
        });
    }
}
exports.BaseClient = BaseClient;
var minipass_fetch_1 = require("minipass-fetch");
Object.defineProperty(exports, "Response", { enumerable: true, get: function () { return minipass_fetch_1.Response; } });
var staticClient_1 = require("./staticClient");
Object.defineProperty(exports, "ResponseError", { enumerable: true, get: function () { return staticClient_1.ResponseError; } });
//# sourceMappingURL=client.js.map