"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const command_1 = require("@oclif/command");
const download = tslib_1.__importStar(require("./exchangeDownloader"));
const exchangeDirectoryParser_1 = require("./exchangeDirectoryParser");
const exchangeTools_1 = require("./exchangeTools");
class DownloadCommand extends command_1.Command {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!process.env.ANYPOINT_USERNAME || !process.env.ANYPOINT_PASSWORD) {
                this.error("Environment variables ANYPOINT_USERNAME and ANYPOINT_PASSWORD must be set to download files.", {
                    exit: 2
                });
            }
            const { flags } = this.parse(DownloadCommand);
            const configFile = flags["config-file"];
            if (configFile !== path_1.default.basename(configFile)) {
                this.error("Config file name must not be a path.", { exit: 2 });
            }
            const apis = yield download.search(flags.search, new RegExp(flags.deployment, flags["deployment-regex-flags"]));
            yield download.downloadRestApis(apis, flags.dest);
            yield exchangeDirectoryParser_1.extractFiles(flags.dest);
            const apiGroups = exchangeTools_1.groupByCategory(exchangeTools_1.removeRamlLinks(apis), flags["group-by"]);
            yield fs_extra_1.default.writeJson(path_1.default.join(flags.dest, configFile), apiGroups);
        });
    }
}
exports.DownloadCommand = DownloadCommand;
DownloadCommand.description = "Download API specification files from Anypoint Exchange";
DownloadCommand.flags = {
    help: command_1.flags.help({
        char: "h"
    }),
    search: command_1.flags.string({
        char: "s",
        description: "Search query to filter results from Anypoint Exchange",
        env: "ANYPOINT_SEARCH",
        default: ""
    }),
    deployment: command_1.flags.string({
        char: "D",
        description: "Deployment status to filter results from Anypoint Exchange",
        env: "ANYPOINT_DEPLOYMENT",
        default: "." // RegExp to match any non-empty string
    }),
    "deployment-regex-flags": command_1.flags.string({
        description: "RegExp flags to specify for advanced deployment matching",
        dependsOn: ["deployment"]
    }),
    dest: command_1.flags.string({
        char: "d",
        description: "Directory to download APIs into",
        env: "ANYPOINT_DOWNLOAD_DEST",
        default: "apis"
    }),
    "group-by": command_1.flags.string({
        char: "g",
        description: "Category to use to group APIs together",
        env: "ANYPOINT_GROUP_BY",
        required: true
    }),
    "config-file": command_1.flags.string({
        char: "c",
        description: "Name of the target file to save the API config",
        env: "ANYPOINT_CONFIG_FILE",
        default: "api-config.json"
    })
};
//# sourceMappingURL=index.js.map