import { Response } from "node-fetch";
import { RawRestApi, RestApi } from "./exchangeTypes";
export declare function downloadRestApi(restApi: RestApi, destinationFolder?: string): Promise<void | Response>;
export declare function downloadRestApis(restApi: RestApi[], destinationFolder?: string): Promise<string>;
/**
 * @description Get an asset from exchange.  This can be any of the following patterns
 *  * /groupId/assetId/version
 *  * /groupId/assetId
 *  * /groupId
 *
 * @export
 * @param {string} accessToken
 * @param {string} assetId
 * @returns {Promise<void | RawRestApi>}
 */
export declare function getAsset(accessToken: string, assetId: string): Promise<void | RawRestApi>;
/**
 * @description Searches exchange and gets a list of apis based on the search string
 * @export
 * @param {string} accessToken
 * @param {string} searchString
 * @returns {Promise<RestApi[]>}
 */
export declare function searchExchange(accessToken: string, searchString: string): Promise<RestApi[]>;
/**
 * @description Looks at all versions of an api in exchange for an instance that matched the deployment regex
 *
 * @export
 * @param {string} accessToken
 * @param {RestApi} restApi
 * @param {RegExp} deployment
 * @returns {Promise<string>} Returned the version string that matches the regex passed.  Will return first found result
 */
export declare function getVersionByDeployment(accessToken: string, restApi: RestApi, deployment: RegExp): Promise<void | string>;
/**
 * @description Gets details on a very specific api version combination
 * @export
 * @param {string} accessToken
 * @param {string} groupId
 * @param {string} assetId
 * @param {string} version
 * @returns {Promise<RestApi>}
 */
export declare function getSpecificApi(accessToken: string, groupId: string, assetId: string, version: string): Promise<RestApi | null>;
/**
 * Gets information about all the APIs from exchange that match the given search
 * string for the version deployed in the given environment.
 * If it fails to get information about the deployed version of an API, it
 * removes all the version specific information from the returned object.
 *
 * @param query - Exchange search query
 * @param deployment - RegExp matching the desired deployment targets
 *
 * @returns Information about the APIs found.
 */
export declare function search(query: string, deployment: RegExp): Promise<RestApi[]>;
//# sourceMappingURL=exchangeDownloader.d.ts.map