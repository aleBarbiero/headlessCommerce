"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const unzipper_1 = tslib_1.__importDefault(require("unzipper"));
function getFiles(directory) {
    return fs_extra_1.default.readdirSync(path_1.default.join(directory), {
        withFileTypes: true
    });
}
/**
 * @description Extracts zip files present in the given directory.
 *   zip files are usually downloaded from Anypoint exchange
 * @export
 * @param {string} directory Directory we want to download to
 * @param {boolean} [removeFiles=true] Whether to remove the zip files after extraction
 * @returns {Promise<void>} Just a promise to indicate we are done.
 */
function extractFiles(directory, removeFiles = true) {
    const files = getFiles(directory);
    const promises = [];
    files
        .filter(file => file.isFile() && path_1.default.extname(file.name) === ".zip")
        .forEach(file => {
        promises.push(new Promise((resolve, reject) => {
            fs_extra_1.default.createReadStream(path_1.default.join(path_1.default.resolve(directory), file.name)).pipe(unzipper_1.default
                .Extract({
                path: path_1.default.join(path_1.default.resolve(directory), path_1.default.basename(file.name, ".zip"))
            })
                .on("error", reject)
                .on("close", () => {
                if (removeFiles) {
                    fs_extra_1.default.removeSync(path_1.default.join(path_1.default.resolve(directory), file.name));
                }
                resolve();
            }));
        }));
    });
    return Promise.all(promises);
}
exports.extractFiles = extractFiles;
//# sourceMappingURL=exchangeDirectoryParser.js.map