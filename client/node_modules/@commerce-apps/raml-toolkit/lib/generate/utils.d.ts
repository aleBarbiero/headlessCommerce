import { model } from "amf-client-js";
export declare const ARRAY_DATA_TYPE = "Array";
export declare const DEFAULT_DATA_TYPE = "any";
export declare const OBJECT_DATA_TYPE = "object";
export declare const PRIMITIVE_DATA_TYPE_MAP: {
    "http://www.w3.org/2001/XMLSchema#string": string;
    "http://www.w3.org/2001/XMLSchema#integer": string;
    "http://www.w3.org/2001/XMLSchema#double": string;
    "http://www.w3.org/2001/XMLSchema#float": string;
    "http://www.w3.org/2001/XMLSchema#boolean": string;
};
/**
 * Get responses from the given operation object.
 *
 * @param operation - An AMF operation
 *
 * @returns An array of responses extracted from the given operation
 */
export declare const getResponsesFromPayload: (operation: model.domain.Operation) => model.domain.Response[];
/**
 * Get types from the given payload.
 *
 * @param payload - Contains schema(s) from which to extract the type(s).
 *
 * @returns string representation of the data types in the payload
 */
export declare const getTypeFromPayload: (payload: model.domain.Payload) => string;
/**
 * Get data type for the given namespaced data type.
 *
 * @param nsDataType - A namespaced datatype e.g. http://www.w3.org/2001/XMLSchema#string
 *
 * @returns a regular javascript type
 */
export declare const getDataTypeFromMap: (nsDataType: string) => string;
/**
 * Get data type from a ScalarShape object.
 *
 * @param scalarShape - A ScalarShape object
 *
 * @returns scalar data type if defined otherwise returns a default type
 */
export declare const getScalarType: (scalarShape: model.domain.ScalarShape) => string;
/**
 * Get data type that is linked/inherited.
 *
 * @param anyShape - instance of model.domain.AnyShape or its subclass
 *
 * @returns linked/inherited data type
 */
export declare const getLinkedType: (anyShape: model.domain.AnyShape) => string;
/**
 * Get object type
 *
 * @param anyShape - instance of model.domain.AnyShape or its subclass
 *
 * @returns object type if defined otherwise returns a default type
 */
export declare const getObjectType: (anyShape: model.domain.AnyShape) => string;
/**
 * Get data type of an element from AMF model.
 *
 * @param domainElement - An AMF DomainElement or its subclass
 *
 * @returns data type if defined otherwise returns a default type
 */
export declare const getDataType: (domainElement: model.domain.DomainElement) => string;
/**
 * Get type of AMF Shape object.
 *
 * @param shape - An AMF Shape object
 *
 * @returns 'object' if the name property of the Shape is null or 'schema', the
 * name itself otherwise
 *
 */
export declare const getTypeFromShape: (shape: model.domain.Shape) => string;
/**
 * Get value from an AMF field.
 *
 * @param name - The field to extract the value from
 *
 * @returns The string of the value
 */
export declare const getValue: <T>(name: model.ValueField<T>) => string;
declare type propertyFilter = (propertyName: string) => boolean;
/**
 * Get properties of a node (inherited and linked) after applying the given filter criteria
 *
 * @param node - An AMF node
 * @param propertyFilter - predicate to be used to filter properties
 *
 * @returns The filtered list of properties
 */
export declare const getFilteredProperties: (node: model.domain.NodeShape, propertyFilter: propertyFilter) => model.domain.PropertyShape[];
export {};
//# sourceMappingURL=utils.d.ts.map