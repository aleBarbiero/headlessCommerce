import { getValue } from "./utils";
import { model } from "amf-client-js";
/**
 * Get the baseUri from an AMF model.
 *
 * Note: TypeScript will not allow access to the data without the proper cast to
 * a WebApi type.
 *
 * @param property - A model from the the AMF parser
 *
 * @returns the base URI of the model
 */
export declare const getBaseUriFromDocument: (property: model.document.BaseUnitWithEncodesModel) => string;
/**
 * Check if the specified AMF domain element is a type definition or not.
 *
 * @param domainElement - The domain element to be evaluated
 *
 * @returns true if the domain element is a type definition, false if not
 */
export declare const isTypeDefinition: (domainElement: model.domain.DomainElement) => boolean;
/**
 * Get the return type info of an operation.
 *
 * @param operation - An AMF operation
 *
 * @returns a string for the data type returned by the successful operation
 */
export declare const getReturnTypeFromOperation: (operation: model.domain.Operation) => string;
/**
 * Get data type of a property.
 *
 * @param property - An AMF property
 *
 * @returns data type, if defined in the property, the default type otherwise
 */
export declare const getTypeFromProperty: (property: model.domain.PropertyShape) => string;
/**
 * Get data type of a parameter.
 *
 * @param param - An AMF parameter
 *
 * @returns data type, if defined in the parameter, the default type otherwise
 */
export declare const getTypeFromParameter: (param: model.domain.Parameter) => string;
/**
 * Get payload type from the request.
 *
 * @param request - An AMF request
 *
 * @returns Type of the request body
 */
export declare const getPayloadTypeFromRequest: (request: model.domain.Request) => string;
/**
 * Get all the properties of an AMF node.
 *
 * @param node - An AMF node
 *
 * @returns Array of properties in the node that are not regular expressions
 */
export declare const getProperties: (node: model.domain.NodeShape) => model.domain.PropertyShape[];
/**
 * Check if the property is defined as required.
 * Required properties have minimum count of at least 1
 * We ignore required additional properties because of the
 * different semantics used in rendering those properties.
 *
 * @param property - An AMF property
 *
 * @returns true if the property is required, false otherwise
 */
export declare const isRequiredProperty: (property: model.domain.PropertyShape) => boolean;
/**
 * Check if the property is optional.
 * Optional properties have minimum count of 0
 * We ignore optional additional properties which also have minimum count of 0,
 * because of the different semantics used in rendering those properties.
 *
 * @param property - An AMF property
 *
 * @returns true if the property is optional, false otherwise
 */
export declare const isOptionalProperty: (property: model.domain.PropertyShape) => boolean;
/**
 * Check if additional properties are allowed for a given AMF node or not.
 *
 * @param node - An AMF node
 *
 * @returns true if additional properties are allowed, false otherwise
 */
export declare const isAdditionalPropertiesAllowed: (node: model.domain.NodeShape) => boolean;
export { getValue };
//# sourceMappingURL=handlebarsAmfHelpers.d.ts.map