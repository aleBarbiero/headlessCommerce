{"ast":null,"code":"var _jsxFileName = \"/home/alessio_barbiero/headlessCommerce/client/src/contextAPI.js\";\nimport React, { Component } from 'react';\nconst ProductContext = React.createContext();\nexport default class ProductProvider extends Component {\n  constructor() {\n    super();\n\n    this.sort = event => {\n      let {\n        sortedProducts\n      } = this.state;\n      const value = event.target.value;\n      if (value === \"alpha\") sortedProducts = sortedProducts.sort((a, b) => a.name > b.name ? 1 : -1);else if (value === \"price\") sortedProducts = sortedProducts.sort((a, b) => a.price > b.price ? 1 : -1);\n      this.setState({\n        sortedProducts: sortedProducts\n      });\n    };\n\n    this.getProduct = element => {\n      let tempProduct = [...this.state.products];\n      const product = tempProduct.find(product => product.element === element);\n      return product;\n    };\n\n    this.resetChanges = event => {\n      let {\n        products\n      } = this.state;\n      this.setState({\n        sortedProducts: products\n      });\n    };\n\n    this.handleChanges = event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterProducts);\n    };\n\n    this.addToCart = async (id, variation) => {\n      let tempProducts = [...this.state.products];\n      const index = tempProducts.indexOf(this.getProduct(id));\n      const product = tempProducts[index];\n      fetch(`http://localhost:9000/addItemToBasketAPI?item=${product.compatibility[variation].id}`);\n      product.inCartStatus[variation].inCart = true;\n      product.inCartStatus[variation].qty = 1;\n      product.inCartStatus[variation].total = product.price;\n      let cartProduct = {\n        element: product.element,\n        variation: product.compatibility[variation].value,\n        variationId: variation,\n        name: product.name,\n        price: product.price,\n        qty: product.inCartStatus[variation].qty,\n        total: product.inCartStatus[variation].total,\n        images: product.images\n      };\n      this.setState(() => {\n        return {\n          products: tempProducts,\n          cart: [...this.state.cart, cartProduct]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.increment = async (id, variation) => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.element === id && item.variationId === variation);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.qty++;\n      product.total = product.qty * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.decrement = async (id, variation) => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.element === id && item.variationId === variation);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.qty--;\n      product.total = product.qty * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.clearCart = () => {\n      this.setState(() => {\n        return {\n          cart: []\n        };\n      }, () => {\n        this.restoreValues();\n      });\n    };\n\n    this.removeItem = async (id, variation) => {\n      let tempProducts = [...this.state.products];\n      let tempCart = [...this.state.cart];\n      tempCart = tempCart.filter(item => item.element !== id || item.element === id && item.variationId !== variation);\n      const index = tempProducts.indexOf(this.getProduct(id));\n      let removedProduct = tempProducts[index];\n      removedProduct.inCartStatus[variation].inCart = false;\n      removedProduct.inCartStatus[variation].qty = 0;\n      removedProduct.inCartStatus[variation].total = 0;\n      this.setState(() => {\n        return {\n          cart: [...tempCart],\n          products: [...tempProducts]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.restoreValues = () => {\n      let prods = [...this.state.products];\n      prods.map(item => {\n        item.inCartStatus.map(order => {\n          order.qty = 0;\n          order.total = 0;\n          order.inCart = false;\n        });\n      });\n      this.setState(() => {\n        return {\n          products: prods\n        };\n      });\n    };\n\n    this.addTotals = () => {\n      let cartTotal = 0;\n      this.state.cart.map(item => {\n        cartTotal += item.total;\n      });\n      this.setState(() => {\n        return {\n          cartTotal: cartTotal\n        };\n      });\n    };\n\n    this.filterProducts = () => {\n      let {\n        products,\n        type,\n        compatibility,\n        price,\n        brand\n      } = this.state;\n      let tempProducts = [...products]; //capacity\n\n      if (compatibility !== 'all') {\n        let tempFiltered = [];\n        tempProducts.map(product => {\n          product.compatibility.map(item => {\n            if (item.value.toLowerCase() === compatibility.toLowerCase()) tempFiltered.push(product);\n          });\n        });\n        tempProducts = tempFiltered;\n      } //type\n\n\n      if (type !== 'all') tempProducts = tempProducts.filter(product => product.type === type); //price\n\n      price = parseInt(price);\n      tempProducts = tempProducts.filter(product => product.price <= price); //brand\n\n      if (brand !== 'all') tempProducts = tempProducts.filter(product => product.brand === brand);\n      this.setState({\n        sortedProducts: tempProducts\n      });\n    };\n\n    this.state = {\n      categories: [],\n      products: [],\n      sortedProducts: [],\n      cart: [],\n      cartTotal: 0,\n      onesToWatch: [],\n      loading: true,\n      type: \"all\",\n      compatibility: \"all\",\n      brand: \"all\",\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0\n    };\n  }\n\n  async componentDidMount() {\n    /*categories*/\n    await this.getCategories().then(res => this.setState({\n      categories: res\n    })).then(res => {\n      this.setState({\n        categories: this.clean(this.state.categories)\n      });\n      console.log(this.state.categories);\n    })\n    /*products*/\n    .then(res => {\n      let temp = this.state.categories;\n      temp.map((item, index) => {\n        this.getProducts(item.id).then(res => this.setState({\n          products: this.state.products.concat(res)\n        })).then(res => {\n          if (index === temp.length - 1) {\n            let products = this.state.products;\n            console.log(products);\n            let tempSorted = products.sort((a, b) => a.price > b.price ? 1 : -1);\n            let onesToWatch = [tempSorted[0], tempSorted[1], tempSorted[2]];\n            let minPrice = Math.min(...products.map(item => item.price));\n            let maxPrice = Math.max(...products.map(item => item.price));\n            let price = maxPrice;\n            this.setState({\n              products,\n              sortedProducts: products,\n              onesToWatch,\n              maxPrice,\n              minPrice,\n              price,\n              loading: false\n            });\n          } //if\n\n        });\n      });\n    });\n    /*end-products*/\n\n    /*car\n    }//componentDidMount\n    clean = (list) =>{\n    return list.filter(function (el) {\n        return el != null && el !== \"\";\n      });\n    }//clean\n    //getCategories\n    getCategories = () => {\n    return fetch(\"http://localhost:9000/categoriesAPI\")\n    .then(res => res.json())\n    .then(categories => {\n        let tempCat = categories[\"data\"].map(item => {\n            let id=item.id;\n            let name=item.id;\n            let category={id,name};\n            if(category.id!==\"root\")\n                return category;\n        })\n        return tempCat;\n    })\n    }//getCategories\n    //getProducts\n    getProducts = (category) => {\n    return fetch(`http://localhost:9000/categoryProductsAPI?id=${category}`)\n    .then(res => res.json())\n    .then(products => {\n        let tempProd = products[\"hits\"].map(item => {\n            if(item.product.type.master){\n                let type=item.product.classificationCategory.categoryId;\n                let id=item.productId;\n                let name=item.productName.default;\n                let price=item.product.price;\n                let element=id;\n                let brand=item.product.brand;\n                let images=item.product.imageGroups[0].images.map(image => image.absUrl);\n                let inStock=item.product.inStock;\n                let extra=this.clean(item.product.longDescription.default.source.split('.'));\n                let desc=item.product.shortDescription.default.source;\n                let compatibility=[];\n                for(let i=0;i<item.product.variants.length;i++){\n                    compatibility[i]={id: item.product.variants[i].productId, value: item.product.variants[i].variationValues.compatibility};\n                }\n                let inCartStatus=[];\n                compatibility.map((item,index) => {\n                    inCartStatus[index]={qty:0,inCart:false,total:0}\n                })\n                let product={id,type,name,price,element,brand,images,inStock,extra,desc,compatibility,inCartStatus};\n                return product;\n            }\n        })\n        return this.clean(tempProd);\n    })\n    }//getProducts\n    getCart = () => {\n    return fetch(\"http://localhost:9000/getBasketAPI\")\n    .then(res => res.json())\n    .then(res => {console.log(res)})\n    /*.then(res => {\n        if(res[\"productItems\"]){\n            let tempCart=res[\"productItems\"].map(res => {\n                let cartProduct;\n                let price=res.basePrice;\n                let qty=res.quantity;\n                let name=res.productName;\n                let total=res.price;\n                let tempProducts=this.state.products;\n                let element,variationId,variation,images;\n                tempProducts.map(product => {\n                    product.compatibility.map((comp,index) => {\n                        if(comp.id === res.productId){\n                            element=product.element;\n                            variationId=index;\n                            variation=comp.value;\n                            images=product.images;\n                            product.inCartStatus[index].qty=1;\n                            product.inCartStatus[index].inCart=true;\n                            product.inCartStatus[index].total=total;\n                        }\n                    })\n                })\n                cartProduct={element,variationId,variation,price,qty,name,total,images};\n                return cartProduct;\n            })\n            return tempCart;\n        }else\n            return [];\n    }).then(res => console.log(res))*/\n  } //sort\n\n\n  //filterProducts\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        getProduct: this.getProduct,\n        handleChanges: this.handleChanges,\n        resetChanges: this.resetChanges,\n        sort: this.sort,\n        addToCart: this.addToCart,\n        increment: this.increment,\n        decrement: this.decrement,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart,\n        getDetails: this.getDetails\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  } //render\n\n\n} //ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\nexport function withProductConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(ProductConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 13\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 27\n      }\n    })));\n  };\n} //withProductConsumer\n\nexport { ProductProvider, ProductConsumer, ProductContext };","map":{"version":3,"sources":["/home/alessio_barbiero/headlessCommerce/client/src/contextAPI.js"],"names":["React","Component","ProductContext","createContext","ProductProvider","constructor","sort","event","sortedProducts","state","value","target","a","b","name","price","setState","getProduct","element","tempProduct","products","product","find","resetChanges","handleChanges","type","checked","filterProducts","addToCart","id","variation","tempProducts","index","indexOf","fetch","compatibility","inCartStatus","inCart","qty","total","cartProduct","variationId","images","cart","addTotals","increment","tempCart","selectedProduct","item","decrement","clearCart","restoreValues","removeItem","filter","removedProduct","prods","map","order","cartTotal","brand","tempFiltered","toLowerCase","push","parseInt","categories","onesToWatch","loading","minPrice","maxPrice","componentDidMount","getCategories","then","res","clean","console","log","temp","getProducts","concat","length","tempSorted","Math","min","max","render","getDetails","props","children","ProductConsumer","Consumer","withProductConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nconst ProductContext= React.createContext();\n\nexport default class ProductProvider extends Component {\n\n    constructor(){\n        super();\n        this.state={\n            categories: [],\n            products:[],\n            sortedProducts: [],\n            cart:[],\n            cartTotal:0,\n            onesToWatch: [],\n            loading: true,\n            type: \"all\",\n            compatibility: \"all\",\n            brand: \"all\",\n            price: 0,\n            minPrice: 0,\n            maxPrice: 0,\n        };\n    }\n\n    async componentDidMount(){\n        /*categories*/\n        await this.getCategories()\n        .then(res => this.setState({categories: res}))\n        .then(res => {\n            this.setState({categories: this.clean(this.state.categories)});\n            console.log(this.state.categories)\n        })\n        /*products*/\n        .then(res => {\n            let temp=this.state.categories;\n            temp.map((item,index) => {\n                this.getProducts(item.id)\n                .then(res => this.setState({products: this.state.products.concat(res)}))\n                .then(res => {\n                    if(index===temp.length-1){\n                        let products=this.state.products;\n                        console.log(products)\n                        let tempSorted=products.sort((a, b) => (a.price > b.price) ? 1 : -1);\n                        let onesToWatch=[tempSorted[0], tempSorted[1], tempSorted[2]];\n                        let minPrice=Math.min(...products.map(item => item.price));\n                        let maxPrice=Math.max(...products.map(item => item.price));\n                        let price=maxPrice;\n                        this.setState({\n                            products,\n                            sortedProducts:products,\n                            onesToWatch,\n                            maxPrice,\n                            minPrice,\n                            price,\n                            loading:false\n                        })\n                    }//if\n                })\n            });\n        })\n        /*end-products*/\n        /*car\n    }//componentDidMount\n\n    clean = (list) =>{\n        return list.filter(function (el) {\n            return el != null && el !== \"\";\n          });\n    }//clean\n\n    //getCategories\n    getCategories = () => {\n        return fetch(\"http://localhost:9000/categoriesAPI\")\n        .then(res => res.json())\n        .then(categories => {\n            let tempCat = categories[\"data\"].map(item => {\n                let id=item.id;\n                let name=item.id;\n                let category={id,name};\n                if(category.id!==\"root\")\n                    return category;\n            })\n            return tempCat;\n        })\n    }//getCategories\n\n    //getProducts\n    getProducts = (category) => {\n        return fetch(`http://localhost:9000/categoryProductsAPI?id=${category}`)\n        .then(res => res.json())\n        .then(products => {\n            let tempProd = products[\"hits\"].map(item => {\n                if(item.product.type.master){\n                    let type=item.product.classificationCategory.categoryId;\n                    let id=item.productId;\n                    let name=item.productName.default;\n                    let price=item.product.price;\n                    let element=id;\n                    let brand=item.product.brand;\n                    let images=item.product.imageGroups[0].images.map(image => image.absUrl);\n                    let inStock=item.product.inStock;\n                    let extra=this.clean(item.product.longDescription.default.source.split('.'));\n                    let desc=item.product.shortDescription.default.source;\n                    let compatibility=[];\n                    for(let i=0;i<item.product.variants.length;i++){\n                        compatibility[i]={id: item.product.variants[i].productId, value: item.product.variants[i].variationValues.compatibility};\n                    }\n                    let inCartStatus=[];\n                    compatibility.map((item,index) => {\n                        inCartStatus[index]={qty:0,inCart:false,total:0}\n                    })\n                    let product={id,type,name,price,element,brand,images,inStock,extra,desc,compatibility,inCartStatus};\n                    return product;\n                }\n            })\n            return this.clean(tempProd);\n        })\n    }//getProducts\n\n    getCart = () => {\n        return fetch(\"http://localhost:9000/getBasketAPI\")\n        .then(res => res.json())\n        .then(res => {console.log(res)})\n        /*.then(res => {\n            if(res[\"productItems\"]){\n                let tempCart=res[\"productItems\"].map(res => {\n                    let cartProduct;\n                    let price=res.basePrice;\n                    let qty=res.quantity;\n                    let name=res.productName;\n                    let total=res.price;\n                    let tempProducts=this.state.products;\n                    let element,variationId,variation,images;\n                    tempProducts.map(product => {\n                        product.compatibility.map((comp,index) => {\n                            if(comp.id === res.productId){\n                                element=product.element;\n                                variationId=index;\n                                variation=comp.value;\n                                images=product.images;\n                                product.inCartStatus[index].qty=1;\n                                product.inCartStatus[index].inCart=true;\n                                product.inCartStatus[index].total=total;\n                            }\n                        })\n                    })\n                    cartProduct={element,variationId,variation,price,qty,name,total,images};\n                    return cartProduct;\n                })\n                return tempCart;\n            }else\n                return [];\n        }).then(res => console.log(res))*/\n    }\n\n    //sort\n    sort = event => {\n        let {\n            sortedProducts\n        } = this.state;\n        const value=event.target.value;\n        if(value===\"alpha\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.name > b.name) ? 1 : -1);\n        else if(value===\"price\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.price > b.price) ? 1 : -1);\n        this.setState({sortedProducts:sortedProducts});\n    }//sort\n\n    //getProduct\n    getProduct = (element) => {\n        let tempProduct=[...this.state.products];\n        const product=tempProduct.find(product => product.element === element);\n        return product;\n    }//getProduct\n\n    //resetChanges\n    resetChanges = event => {\n        let{\n            products\n        } = this.state;\n        this.setState({sortedProducts:products})\n    }//resetChanges\n\n    //handleChanges\n    handleChanges = event => {\n        const target=event.target;\n        const value=target.type === 'checkbox' ? target.checked : target.value;\n        const name=event.target.name;\n        this.setState({[name]:value},this.filterProducts)\n    }//handleChanges\n\n    //addToCart\n    addToCart = async(id,variation) => {\n        let tempProducts=[...this.state.products];\n        const index=tempProducts.indexOf(this.getProduct(id));\n        const product=tempProducts[index];\n        fetch(`http://localhost:9000/addItemToBasketAPI?item=${product.compatibility[variation].id}`);\n        product.inCartStatus[variation].inCart=true;\n        product.inCartStatus[variation].qty=1;\n        product.inCartStatus[variation].total=product.price;\n        let cartProduct={element: product.element,variation: product.compatibility[variation].value,variationId: variation,name: product.name, price:product.price,\n            qty: product.inCartStatus[variation].qty,total: product.inCartStatus[variation].total,images: product.images}\n        this.setState(() => {\n            return{products: tempProducts, cart: [...this.state.cart,cartProduct]}\n        },\n        () => {\n            this.addTotals();\n        })\n    }\n\n    //increment\n    increment = async(id,variation) => {\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item => item.element === id && item.variationId === variation);\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n        product.qty++;\n        product.total=product.qty*product.price;\n        this.setState(() => {\n            return {\n                cart:[...tempCart]\n            }\n        },() => {\n            this.addTotals();\n        })\n    }\n\n    //decrement\n    decrement = async(id,variation) => {\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item => item.element === id && item.variationId === variation);\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n        product.qty--;\n        product.total=product.qty*product.price;\n        this.setState(() => {\n            return {\n                cart:[...tempCart]\n            }\n        },() => {\n            this.addTotals();\n        })\n    }\n\n    //clearCart\n    clearCart = () => {\n        this.setState(() => {\n            return{\n                cart:[]\n            }\n        }, () => {\n            this.restoreValues();\n        })\n    }\n\n    //removeItem\n    removeItem = async(id,variation) => {\n        let tempProducts = [...this.state.products];\n        let tempCart = [...this.state.cart];\n        tempCart = tempCart.filter(item => item.element !== id || (item.element === id && item.variationId !== variation));\n        const index = tempProducts.indexOf(this.getProduct(id));\n        let removedProduct = tempProducts[index];\n        removedProduct.inCartStatus[variation].inCart=false;\n        removedProduct.inCartStatus[variation].qty=0;\n        removedProduct.inCartStatus[variation].total=0;\n        this.setState(() => {\n            return {\n                cart:[...tempCart],\n                products:[...tempProducts]\n            }\n        },() => {\n            this.addTotals();\n        })\n    }\n\n    //restore\n    restoreValues = () => {\n        let prods=[...this.state.products];\n        prods.map(item => {\n            item.inCartStatus.map(order => {\n                order.qty=0;\n                order.total=0;\n                order.inCart=false;\n            })\n        })\n        this.setState(() => {\n            return {\n                products: prods\n            }\n        })\n    } \n\n    //addTotals\n    addTotals = () => {\n        let cartTotal=0;\n        this.state.cart.map(item => {\n            cartTotal+=item.total;\n        });\n        this.setState(() => {\n            return {\n                cartTotal: cartTotal\n            }\n        })\n    }\n\n    filterProducts = () => {\n        let{\n            products,\n            type,\n            compatibility,\n            price,\n            brand\n        } = this.state;\n        let tempProducts=[...products];\n\n        //capacity\n        if(compatibility!=='all'){\n            let tempFiltered=[];\n            tempProducts.map(product => {\n                product.compatibility.map((item) => {\n                    if(item.value.toLowerCase() === compatibility.toLowerCase())\n                        tempFiltered.push(product);\n                })\n            })\n            tempProducts=tempFiltered;\n        }\n\n        //type\n        if(type!=='all')\n            tempProducts=tempProducts.filter(product => product.type === type);\n        \n        //price\n        price=parseInt(price);\n        tempProducts=tempProducts.filter(product => product.price <= price);\n        \n        //brand\n        if(brand!=='all')\n                tempProducts=tempProducts.filter(product => product.brand === brand)\n\n        this.setState({\n            sortedProducts:tempProducts\n        })\n    }//filterProducts\n\n    render() {\n        return (\n            <ProductContext.Provider value={{...this.state,getProduct: this.getProduct,handleChanges: this.handleChanges,\n                resetChanges:this.resetChanges,sort:this.sort, addToCart:this.addToCart, increment:this.increment,decrement:this.decrement,\n            removeItem:this.removeItem,clearCart:this.clearCart,getDetails: this.getDetails}}>\n                {this.props.children}\n            </ProductContext.Provider>\n        );\n    }//render\n}//ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport function withProductConsumer(Component){\n    return function ConsumerWrapper(props){\n        return(\n            <ProductConsumer>\n                {value => <Component {...props} context={value}/>}\n            </ProductConsumer>\n        )}\n}//withProductConsumer\n\nexport{ProductProvider,ProductConsumer,ProductContext}"]},"metadata":{},"sourceType":"module"}