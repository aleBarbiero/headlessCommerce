{"ast":null,"code":"var _jsxFileName = \"/home/alessio_barbiero/headlessCommerce/client/src/context.js\";\nimport React, { Component } from 'react';\nimport Client from './dataAPI';\nconst ProductContext = React.createContext();\nexport default class ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      sortedProducts: [],\n      cart: [],\n      cartTotal: 0,\n      onesToWatch: [],\n      loading: true,\n      type: \"all\",\n      compatibility: \"all\",\n      brand: \"all\",\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0\n    };\n\n    this.getData = async () => {\n      await fetch(\"http://localhost:9000/toWatchAPI:hello\").then(res => res.json()).then(res => this.setState({\n        apiToWatch: res\n      })).catch(err => err);\n\n      try {\n        let response = await Client.getEntries({\n          content_type: \"photoStudio\",\n          order: \"fields.price\"\n        });\n        let products = this.formatData(response.items);\n        let tempSorted = products.sort((a, b) => a.price > b.price ? 1 : -1);\n        let onesToWatch = [tempSorted[0], tempSorted[1], tempSorted[2]];\n        let minPrice = Math.min(...products.map(item => item.price));\n        let maxPrice = Math.max(...products.map(item => item.price));\n        let maxSize = Math.max(...products.map(item => item.size));\n        let price = maxPrice;\n        this.setState({\n          products,\n          sortedProducts: products,\n          onesToWatch,\n          loading: false,\n          maxPrice,\n          minPrice,\n          maxSize,\n          price\n        });\n      } catch (error) {\n        console.log(error);\n      } //try_catch\n\n    };\n\n    this.sort = event => {\n      let {\n        sortedProducts\n      } = this.state;\n      const value = event.target.value;\n      if (value === \"alpha\") sortedProducts = sortedProducts.sort((a, b) => a.name > b.name ? 1 : -1);else if (value === \"price\") sortedProducts = sortedProducts.sort((a, b) => a.price > b.price ? 1 : -1);\n      this.setState({\n        sortedProducts: sortedProducts\n      });\n    };\n\n    this.getProduct = element => {\n      let tempProduct = [...this.state.products];\n      const product = tempProduct.find(product => product.element === element);\n      return product;\n    };\n\n    this.resetChanges = event => {\n      let {\n        products\n      } = this.state;\n      this.setState({\n        sortedProducts: products\n      });\n    };\n\n    this.handleChanges = event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterProducts);\n    };\n\n    this.filterProducts = () => {\n      let {\n        products,\n        type,\n        compatibility,\n        price,\n        brand\n      } = this.state;\n      let tempProducts = [...products]; //capacity\n\n      if (compatibility !== 'all') tempProducts = tempProducts.filter(product => product.compatibility.includes(compatibility)); //type\n\n      if (type !== 'all') tempProducts = tempProducts.filter(product => product.type === type); //price\n\n      price = parseInt(price);\n      tempProducts = tempProducts.filter(product => product.price <= price); //brand\n\n      if (brand !== 'all') tempProducts = tempProducts.filter(product => product.brand === brand);\n      this.setState({\n        sortedProducts: tempProducts\n      });\n    };\n\n    this.addToCart = id => {\n      let tempProducts = [...this.state.products];\n      const index = tempProducts.indexOf(this.getProduct(id));\n      const product = tempProducts[index];\n      product.inCart = true;\n      product.qty = 1;\n      product.total = product.price;\n      this.setState(() => {\n        return {\n          products: tempProducts,\n          cart: [...this.state.cart, product]\n        };\n      }, () => {\n        this.addTotals();\n      });\n      let cart = [...this.state.cart];\n      localStorage.setItem(\"cart\", cart);\n    };\n\n    this.increment = id => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.element === id);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.qty++;\n      product.total = product.qty * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        this.addTotals();\n      });\n      let cart = [...this.state.cart];\n      localStorage.setItem(\"cart\", cart);\n    };\n\n    this.decrement = id => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.element === id);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.qty--;\n      product.total = product.qty * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        this.addTotals();\n      });\n      let cart = [...this.state.cart];\n      localStorage.setItem(\"cart\", cart);\n    };\n\n    this.removeItem = id => {\n      let tempProducts = [...this.state.products];\n      let tempCart = [...this.state.cart];\n      tempCart = tempCart.filter(item => item.element !== id);\n      const index = tempProducts.indexOf(this.getProduct(id));\n      let removedProduct = tempProducts[index];\n      removedProduct.inCart = false;\n      removedProduct.qty = 0;\n      removedProduct.total = 0;\n      this.setState(() => {\n        return {\n          cart: [...tempCart],\n          products: [...tempProducts]\n        };\n      }, () => {\n        this.addTotals();\n      });\n      let cart = [...this.state.cart];\n      localStorage.setItem(\"cart\", cart);\n    };\n\n    this.clearCart = () => {\n      this.setState(() => {\n        return {\n          cart: []\n        };\n      }, () => {\n        this.restoreValues();\n      });\n      let cart = [...this.state.cart];\n      localStorage.setItem(\"cart\", cart);\n    };\n\n    this.restoreValues = () => {\n      let prods = [...this.state.products];\n      prods.map(item => {\n        item.qty = 0;\n        item.total = 0;\n        item.inCart = false;\n      });\n      this.setState(() => {\n        return {\n          products: prods\n        };\n      });\n    };\n\n    this.addTotals = () => {\n      let cartTotal = 0;\n      this.state.cart.map(item => cartTotal += item.total);\n      this.setState(() => {\n        return {\n          cartTotal: cartTotal\n        };\n      });\n    };\n  }\n\n  //getData\n  componentDidMount() {\n    this.getData();\n  } //componentDidMount\n\n\n  //sort\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let inCart = false;\n      let qty = 0;\n      let total = 0;\n      let product = { ...item.fields,\n        images,\n        id,\n        inCart,\n        qty,\n        total\n      };\n      return product;\n    });\n    return tempItems;\n  } //formatData\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        getProduct: this.getProduct,\n        handleChanges: this.handleChanges,\n        resetChanges: this.resetChanges,\n        sort: this.sort,\n        addToCart: this.addToCart,\n        increment: this.increment,\n        decrement: this.decrement,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  } //render\n\n\n} //ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\nexport function withProductConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(ProductConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 13\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 27\n      }\n    })));\n  };\n} //withProductConsumer\n\nexport { ProductProvider, ProductConsumer, ProductContext };","map":{"version":3,"sources":["/home/alessio_barbiero/headlessCommerce/client/src/context.js"],"names":["React","Component","Client","ProductContext","createContext","ProductProvider","state","products","sortedProducts","cart","cartTotal","onesToWatch","loading","type","compatibility","brand","price","minPrice","maxPrice","getData","fetch","then","res","json","setState","apiToWatch","catch","err","response","getEntries","content_type","order","formatData","items","tempSorted","sort","a","b","Math","min","map","item","max","maxSize","size","error","console","log","event","value","target","name","getProduct","element","tempProduct","product","find","resetChanges","handleChanges","checked","filterProducts","tempProducts","filter","includes","parseInt","addToCart","id","index","indexOf","inCart","qty","total","addTotals","localStorage","setItem","increment","tempCart","selectedProduct","decrement","removeItem","removedProduct","clearCart","restoreValues","prods","componentDidMount","tempItems","sys","images","fields","image","file","url","render","props","children","ProductConsumer","Consumer","withProductConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Client from './dataAPI';\n\nconst ProductContext= React.createContext();\n\nexport default class ProductProvider extends Component {\n\n    state={\n        products:[],\n        sortedProducts: [],\n        cart:[],\n        cartTotal:0,\n        onesToWatch: [],\n        loading: true,\n        type: \"all\",\n        compatibility: \"all\",\n        brand: \"all\",\n        price: 0,\n        minPrice: 0,\n        maxPrice: 0,\n    };\n\n    //getData\n    getData = async() =>{\n\n        await fetch(\"http://localhost:9000/toWatchAPI:hello\")\n        .then(res => res.json())\n        .then(res => this.setState({apiToWatch: res}))\n        .catch(err => err);\n\n        try{\n            let response = await Client.getEntries({\n                content_type: \"photoStudio\",\n                order: \"fields.price\"\n            });\n            let products=this.formatData(response.items);\n            let tempSorted=products.sort((a, b) => (a.price > b.price) ? 1 : -1);\n            let onesToWatch=[tempSorted[0], tempSorted[1], tempSorted[2]];\n            let minPrice=Math.min(...products.map(item => item.price));\n            let maxPrice=Math.max(...products.map(item => item.price));\n            let maxSize=Math.max(...products.map(item => item.size));\n            let price=maxPrice;\n            \n            this.setState({\n                products,\n                sortedProducts:products,\n                onesToWatch,\n                loading:false,\n                maxPrice,\n                minPrice,\n                maxSize,\n                price\n            });\n        }catch(error){\n            console.log(error);\n        }//try_catch\n    }//getData\n\n    componentDidMount(){\n        this.getData();\n    }//componentDidMount\n\n    sort = event => {\n        let {\n            sortedProducts\n        } = this.state;\n        const value=event.target.value;\n        if(value===\"alpha\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.name > b.name) ? 1 : -1);\n        else if(value===\"price\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.price > b.price) ? 1 : -1);\n        this.setState({sortedProducts:sortedProducts});\n    }//sort\n\n    formatData(items){\n        let tempItems=items.map(item =>{\n            let id=item.sys.id\n            let images=item.fields.images.map(image => image.fields.file.url);\n            let inCart=false;\n            let qty=0;\n            let total=0;\n            let product={...item.fields,images,id,inCart,qty,total};\n            return product;\n        });\n        return tempItems;\n    }//formatData\n\n    getProduct = (element) => {\n        let tempProduct=[...this.state.products];\n        const product=tempProduct.find(product => product.element === element);\n        return product;\n    }//getProduct\n\n    resetChanges = event => {\n        let{\n            products\n        } = this.state;\n        this.setState({sortedProducts:products})\n    }//resetChanges\n\n    handleChanges = event => {\n        const target=event.target;\n        const value=target.type === 'checkbox' ? target.checked : target.value;\n        const name=event.target.name;\n        this.setState({[name]:value},this.filterProducts)\n    }//handleChanges\n\n    filterProducts = () => {\n        let{\n            products,\n            type,\n            compatibility,\n            price,\n            brand\n        } = this.state;\n        let tempProducts=[...products];\n\n        //capacity\n        if(compatibility!=='all')\n            tempProducts=tempProducts.filter(product => product.compatibility.includes(compatibility))\n\n        //type\n        if(type!=='all')\n            tempProducts=tempProducts.filter(product => product.type === type);\n        \n        //price\n        price=parseInt(price);\n        tempProducts=tempProducts.filter(product => product.price <= price);\n        \n        //brand\n        if(brand!=='all')\n                tempProducts=tempProducts.filter(product => product.brand === brand)\n\n        this.setState({\n            sortedProducts:tempProducts\n        })\n    }//filterProducts\n\n    addToCart = id => {\n        let tempProducts=[...this.state.products];\n        const index=tempProducts.indexOf(this.getProduct(id));\n        const product=tempProducts[index];\n        product.inCart=true;\n        product.qty=1;\n        product.total=product.price;\n        this.setState(() => {\n            return{products: tempProducts, cart: [...this.state.cart,product]}\n        },\n        () => {\n            this.addTotals();\n        })\n        let cart = [...this.state.cart];\n        localStorage.setItem(\"cart\",cart);\n    }//addToCart\n\n    increment = id => {\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item => item.element === id);\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n        product.qty++;\n        product.total=product.qty*product.price;\n        this.setState(() => {\n            return {\n                cart:[...tempCart]\n            }\n        },() => {\n            this.addTotals();\n        })\n        let cart = [...this.state.cart];\n        localStorage.setItem(\"cart\",cart);\n    }\n\n    decrement = id => {\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item => item.element === id);\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n        product.qty--;\n        product.total=product.qty*product.price;\n        this.setState(() => {\n            return {\n                cart:[...tempCart]\n            }\n        },() => {\n            this.addTotals();\n        })\n        let cart = [...this.state.cart];\n        localStorage.setItem(\"cart\",cart);\n    }\n\n    removeItem = id => {\n        let tempProducts = [...this.state.products];\n        let tempCart = [...this.state.cart];\n        tempCart = tempCart.filter(item => item.element !== id);\n        const index = tempProducts.indexOf(this.getProduct(id));\n        let removedProduct = tempProducts[index];\n        removedProduct.inCart=false;\n        removedProduct.qty=0;\n        removedProduct.total=0;\n        this.setState(() => {\n            return {\n                cart:[...tempCart],\n                products:[...tempProducts]\n            }\n        },() => {\n            this.addTotals();\n        })\n        let cart = [...this.state.cart];\n        localStorage.setItem(\"cart\",cart);\n    }\n\n    clearCart = () => {\n        this.setState(() => {\n            return{\n                cart:[]\n            }\n        }, () => {\n            this.restoreValues();\n        })\n        let cart = [...this.state.cart];\n        localStorage.setItem(\"cart\",cart);\n    }\n\n    restoreValues = () => {\n        let prods=[...this.state.products];\n        prods.map(item => {\n            item.qty=0;\n            item.total=0;\n            item.inCart=false;\n        })\n        this.setState(() => {\n            return {\n                products: prods\n            }\n        })\n    }\n\n    addTotals = () => {\n        let cartTotal=0;\n        this.state.cart.map(item => (cartTotal += item.total));\n        this.setState(() => {\n            return {\n                cartTotal: cartTotal\n            }\n        })\n    }\n\n    render() {\n        return (\n            <ProductContext.Provider value={{...this.state,getProduct: this.getProduct,handleChanges: this.handleChanges,\n                resetChanges:this.resetChanges,sort:this.sort, addToCart:this.addToCart, increment:this.increment,decrement:this.decrement,\n                removeItem:this.removeItem,clearCart:this.clearCart}}>\n                {this.props.children}\n            </ProductContext.Provider>\n        );\n    }//render\n}//ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport function withProductConsumer(Component){\n    return function ConsumerWrapper(props){\n        return(\n            <ProductConsumer>\n                {value => <Component {...props} context={value}/>}\n            </ProductConsumer>\n        )}\n}//withProductConsumer\n\nexport{ProductProvider,ProductConsumer,ProductContext}"]},"metadata":{},"sourceType":"module"}