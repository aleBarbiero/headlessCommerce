{"ast":null,"code":"var _jsxFileName = \"/home/alessio_barbiero/headlessCommerce/client/src/contextAPI.js\";\nimport React, { Component } from 'react';\nconst ProductContext = React.createContext();\nexport default class ProductProvider extends Component {\n  constructor() {\n    super();\n\n    this.clean = list => {\n      return list.filter(function (el) {\n        return el != null && el !== \"\";\n      });\n    };\n\n    this.getCategories = () => {\n      return fetch(\"http://localhost:9000/categoriesAPI\").then(res => res.json()).then(categories => {\n        let tempCat = categories[\"data\"].map(item => {\n          let id = item.id;\n          let name = item.id;\n          let category = {\n            id,\n            name\n          };\n          if (category.id !== \"root\") return category;\n        });\n        return tempCat;\n      });\n    };\n\n    this.getProducts = category => {\n      return fetch(`http://localhost:9000/categoryProductsAPI?id=${category}`).then(res => res.json()).then(products => {\n        let tempProd = products[\"hits\"].map(item => {\n          if (item.product.type.master) {\n            let type = item.product.classificationCategory.categoryId;\n            let id = item.productId;\n            let name = item.productName.default;\n            let price = item.product.price;\n            let element = id;\n            let brand = item.product.brand;\n            let images = item.product.imageGroups[0].images.map(image => image.absUrl);\n            let inStock = item.product.inStock;\n            let onCar;\n            let inCart = false;\n            let qty = 0;\n            let total = 0;\n            let extra = this.clean(item.product.longDescription.default.source.split('.'));\n            let desc = item.product.shortDescription.default.source;\n            let compatibility = [];\n\n            for (let i = 0; i < item.product.variants.length; i++) {\n              compatibility[i] = {\n                id: item.product.variants[i].productId,\n                value: item.product.variants[i].variationValues.compatibility\n              };\n            }\n\n            let product = {\n              id,\n              type,\n              name,\n              price,\n              element,\n              brand,\n              images,\n              inStock,\n              qty,\n              total,\n              extra,\n              desc,\n              compatibility,\n              inCart\n            };\n            return product;\n          }\n        });\n        return this.clean(tempProd);\n      });\n    };\n\n    this.sort = event => {\n      let {\n        sortedProducts\n      } = this.state;\n      const value = event.target.value;\n      if (value === \"alpha\") sortedProducts = sortedProducts.sort((a, b) => a.name > b.name ? 1 : -1);else if (value === \"price\") sortedProducts = sortedProducts.sort((a, b) => a.price > b.price ? 1 : -1);\n      this.setState({\n        sortedProducts: sortedProducts\n      });\n    };\n\n    this.getProduct = element => {\n      let tempProduct = [...this.state.products];\n      const product = tempProduct.find(product => product.element === element);\n      return product;\n    };\n\n    this.resetChanges = event => {\n      let {\n        products\n      } = this.state;\n      this.setState({\n        sortedProducts: products\n      });\n    };\n\n    this.handleChanges = event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterProducts);\n    };\n\n    this.addToCart = async (id, variation) => {\n      let tempProducts = [...this.state.products];\n      const index = tempProducts.indexOf(this.getProduct(id));\n      const product = tempProducts[index];\n      product.inCart = true;\n      product.qty = 1;\n      product.total = product.price;\n      this.setState(() => {\n        return {\n          products: tempProducts,\n          cart: [...this.state.cart, product]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.increment = async id => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.element === id);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.qty++;\n      product.total = product.qty * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.decrement = async id => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.element === id);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.qty--;\n      product.total = product.qty * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.clearCart = () => {\n      this.setState(() => {\n        return {\n          cart: []\n        };\n      }, () => {\n        this.restoreValues();\n      });\n      let cart = [...this.state.cart];\n      localStorage.setItem(\"cart\", cart);\n    };\n\n    this.removeItem = async id => {\n      let tempProducts = [...this.state.products];\n      let tempCart = [...this.state.cart];\n      tempCart = tempCart.filter(item => item.element !== id);\n      const index = tempProducts.indexOf(this.getProduct(id));\n      let removedProduct = tempProducts[index];\n      removedProduct.inCart = false;\n      removedProduct.qty = 0;\n      removedProduct.total = 0;\n      this.setState(() => {\n        return {\n          cart: [...tempCart],\n          products: [...tempProducts]\n        };\n      }, () => {\n        this.addTotals();\n      });\n      let cart = [...this.state.cart];\n      localStorage.setItem(\"cart\", cart);\n    };\n\n    this.restoreValues = () => {\n      let prods = [...this.state.products];\n      prods.map(item => {\n        item.qty = 0;\n        item.total = 0;\n        item.inCart = false;\n      });\n      this.setState(() => {\n        return {\n          products: prods\n        };\n      });\n    };\n\n    this.addTotals = () => {\n      let cartTotal = 0;\n      this.state.cart.map(item => cartTotal += item.total);\n      this.setState(() => {\n        return {\n          cartTotal: cartTotal\n        };\n      });\n    };\n\n    this.filterProducts = () => {\n      let {\n        products,\n        type,\n        compatibility,\n        price,\n        brand\n      } = this.state;\n      let tempProducts = [...products]; //capacity\n\n      if (compatibility !== 'all') {\n        let tempFiltered = [];\n        tempProducts.map(product => {\n          product.compatibility.map(item => {\n            if (item.value.toLowerCase() === compatibility.toLowerCase()) tempFiltered.push(product);\n          });\n        });\n        tempProducts = tempFiltered;\n      } //type\n\n\n      if (type !== 'all') tempProducts = tempProducts.filter(product => product.type === type); //price\n\n      price = parseInt(price);\n      tempProducts = tempProducts.filter(product => product.price <= price); //brand\n\n      if (brand !== 'all') tempProducts = tempProducts.filter(product => product.brand === brand);\n      this.setState({\n        sortedProducts: tempProducts\n      });\n    };\n\n    this.state = {\n      categories: [],\n      products: [],\n      sortedProducts: [],\n      cart: [],\n      cartTotal: 0,\n      onesToWatch: [],\n      loading: true,\n      type: \"all\",\n      compatibility: \"all\",\n      brand: \"all\",\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0\n    };\n  }\n\n  async componentDidMount() {\n    /*categories*/\n    await this.getCategories().then(res => this.setState({\n      categories: res\n    })).then(res => {\n      this.setState({\n        categories: this.clean(this.state.categories)\n      });\n      console.log(this.state.categories);\n    })\n    /*products*/\n    .then(res => {\n      let temp = this.state.categories;\n      temp.map((item, index) => {\n        this.getProducts(item.id).then(res => this.setState({\n          products: this.state.products.concat(res)\n        })).then(res => {\n          if (index === temp.length - 1) {\n            let products = this.state.products;\n            console.log(products);\n            let tempSorted = products.sort((a, b) => a.price > b.price ? 1 : -1);\n            let onesToWatch = [tempSorted[0], tempSorted[1], tempSorted[2]];\n            let minPrice = Math.min(...products.map(item => item.price));\n            let maxPrice = Math.max(...products.map(item => item.price));\n            let price = maxPrice;\n            this.setState({\n              products,\n              sortedProducts: products,\n              onesToWatch,\n              maxPrice,\n              minPrice,\n              price,\n              loading: false\n            });\n          } //if\n\n        });\n      });\n    });\n    /*end-products*/\n  } //componentDidMount\n\n\n  //filterProducts\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        getProduct: this.getProduct,\n        handleChanges: this.handleChanges,\n        resetChanges: this.resetChanges,\n        sort: this.sort,\n        addToCart: this.addToCart,\n        increment: this.increment,\n        decrement: this.decrement,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart,\n        getDetails: this.getDetails\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  } //render\n\n\n} //ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\nexport function withProductConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(ProductConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 13\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 27\n      }\n    })));\n  };\n} //withProductConsumer\n\nexport { ProductProvider, ProductConsumer, ProductContext };","map":{"version":3,"sources":["/home/alessio_barbiero/headlessCommerce/client/src/contextAPI.js"],"names":["React","Component","ProductContext","createContext","ProductProvider","constructor","clean","list","filter","el","getCategories","fetch","then","res","json","categories","tempCat","map","item","id","name","category","getProducts","products","tempProd","product","type","master","classificationCategory","categoryId","productId","productName","default","price","element","brand","images","imageGroups","image","absUrl","inStock","onCar","inCart","qty","total","extra","longDescription","source","split","desc","shortDescription","compatibility","i","variants","length","value","variationValues","sort","event","sortedProducts","state","target","a","b","setState","getProduct","tempProduct","find","resetChanges","handleChanges","checked","filterProducts","addToCart","variation","tempProducts","index","indexOf","cart","addTotals","increment","tempCart","selectedProduct","decrement","clearCart","restoreValues","localStorage","setItem","removeItem","removedProduct","prods","cartTotal","tempFiltered","toLowerCase","push","parseInt","onesToWatch","loading","minPrice","maxPrice","componentDidMount","console","log","temp","concat","tempSorted","Math","min","max","render","getDetails","props","children","ProductConsumer","Consumer","withProductConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nconst ProductContext= React.createContext();\n\nexport default class ProductProvider extends Component {\n\n    constructor(){\n        super();\n        this.state={\n            categories: [],\n            products:[],\n            sortedProducts: [],\n            cart:[],\n            cartTotal:0,\n            onesToWatch: [],\n            loading: true,\n            type: \"all\",\n            compatibility: \"all\",\n            brand: \"all\",\n            price: 0,\n            minPrice: 0,\n            maxPrice: 0,\n        };\n    }\n\n    async componentDidMount(){\n        /*categories*/\n        await this.getCategories()\n        .then(res => this.setState({categories: res}))\n        .then(res => {\n            this.setState({categories: this.clean(this.state.categories)});\n            console.log(this.state.categories)\n        })\n        /*products*/\n        .then(res => {\n            let temp=this.state.categories;\n            temp.map((item,index) => {\n                this.getProducts(item.id)\n                .then(res => this.setState({products: this.state.products.concat(res)}))\n                .then(res => {\n                    if(index===temp.length-1){\n                        let products=this.state.products;\n                        console.log(products)\n                        let tempSorted=products.sort((a, b) => (a.price > b.price) ? 1 : -1);\n                        let onesToWatch=[tempSorted[0], tempSorted[1], tempSorted[2]];\n                        let minPrice=Math.min(...products.map(item => item.price));\n                        let maxPrice=Math.max(...products.map(item => item.price));\n                        let price=maxPrice;\n                        this.setState({\n                            products,\n                            sortedProducts:products,\n                            onesToWatch,\n                            maxPrice,\n                            minPrice,\n                            price,\n                            loading:false\n                        })\n                    }//if\n                })\n            });\n        })\n        /*end-products*/\n    }//componentDidMount\n\n    clean = (list) =>{\n        return list.filter(function (el) {\n            return el != null && el !== \"\";\n          });\n    }//clean\n\n    //getCategories\n    getCategories = () => {\n        return fetch(\"http://localhost:9000/categoriesAPI\")\n        .then(res => res.json())\n        .then(categories => {\n            let tempCat = categories[\"data\"].map(item => {\n                let id=item.id;\n                let name=item.id;\n                let category={id,name};\n                if(category.id!==\"root\")\n                    return category;\n            })\n            return tempCat;\n        })\n    }//getCategories\n\n    //getProducts\n    getProducts = (category) => {\n        return fetch(`http://localhost:9000/categoryProductsAPI?id=${category}`)\n        .then(res => res.json())\n        .then(products => {\n            let tempProd = products[\"hits\"].map(item => {\n                if(item.product.type.master){\n                    let type=item.product.classificationCategory.categoryId;\n                    let id=item.productId;\n                    let name=item.productName.default;\n                    let price=item.product.price;\n                    let element=id;\n                    let brand=item.product.brand;\n                    let images=item.product.imageGroups[0].images.map(image => image.absUrl);\n                    let inStock=item.product.inStock;\n                    let onCar\n                    let inCart=false;\n                    let qty=0;\n                    let total=0;\n                    let extra=this.clean(item.product.longDescription.default.source.split('.'));\n                    let desc=item.product.shortDescription.default.source;\n                    let compatibility=[];\n                    for(let i=0;i<item.product.variants.length;i++){\n                        compatibility[i]={id: item.product.variants[i].productId, value: item.product.variants[i].variationValues.compatibility};\n                    }\n                    let product={id,type,name,price,element,brand,images,inStock,qty,total,extra,desc,compatibility,inCart};\n                    return product;\n                }\n            })\n            return this.clean(tempProd);\n        })\n    }//getProducts\n\n    /*\n    getProducts = async() => {\n        let products = await \n        .then(res => res.json())\n        .catch(e => this.getProducts())\n        .then(async(products) => {\n                let tempProd = await products[\"hits\"].map((item) => {\n                let element=item.productId;\n                let id=element;\n                let name=item.productName;\n                let brand=\"test\";\n                let compatibility=[\"test\"];\n                let type=\"shoes\";\n                let price=item.price;\n                let extras=[]\n                let inCart=false;\n                let qty=0;\n                let total=0;\n                let images=[item.image.link,item.image.link,item.image.link];\n                let product={id,element,name,price,brand,compatibility,type,images,extras,inCart,qty,total};\n                return product;\n            })\n            this.setState({\n                products:tempProd\n            })\n        })\n    }\n\n    //getCart\n    getCart = async() => {\n        let res = await fetch(\"http://localhost:9000/getBasketAPI\")\n        .then(res => res.json())\n        .catch(e => this.getCart)\n        let tempCart = await res;\n        if(tempCart[\"productItems\"])\n            tempCart[\"productItems\"].map(item => {\n                let tempProducts=[...this.state.products];\n                const index=tempProducts.indexOf(this.getProduct(item.productId));\n                const product=tempProducts[index];\n                product.inCart=true;\n                product.qty=item.quantity;\n                product.total=product.price*product.qty;\n                this.setState(() => {\n                    return{products: tempProducts, cart: [...this.state.cart,product]}\n                },\n                () => {\n                    this.addTotals();\n                })\n                    })\n    }*/\n\n    //sort\n    sort = event => {\n        let {\n            sortedProducts\n        } = this.state;\n        const value=event.target.value;\n        if(value===\"alpha\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.name > b.name) ? 1 : -1);\n        else if(value===\"price\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.price > b.price) ? 1 : -1);\n        this.setState({sortedProducts:sortedProducts});\n    }//sort\n\n    //getProduct\n    getProduct = (element) => {\n        let tempProduct=[...this.state.products];\n        const product=tempProduct.find(product => product.element === element);\n        return product;\n    }//getProduct\n\n    //resetChanges\n    resetChanges = event => {\n        let{\n            products\n        } = this.state;\n        this.setState({sortedProducts:products})\n    }//resetChanges\n\n    //handleChanges\n    handleChanges = event => {\n        const target=event.target;\n        const value=target.type === 'checkbox' ? target.checked : target.value;\n        const name=event.target.name;\n        this.setState({[name]:value},this.filterProducts)\n    }//handleChanges\n\n    //addToCart\n    addToCart = async(id,variation) => {\n        let tempProducts=[...this.state.products];\n        const index=tempProducts.indexOf(this.getProduct(id));\n        const product=tempProducts[index];\n        product.inCart=true;\n        product.qty=1;\n        product.total=product.price;\n        this.setState(() => {\n            return{products: tempProducts, cart: [...this.state.cart,product]}\n        },\n        () => {\n            this.addTotals();\n        })\n    }\n\n    //increment\n    increment = async(id) => {\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item => item.element === id);\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n        product.qty++;\n        product.total=product.qty*product.price;\n        this.setState(() => {\n            return {\n                cart:[...tempCart]\n            }\n        },() => {\n            this.addTotals();\n        })\n    }\n\n    //decrement\n    decrement = async(id) => {\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item => item.element === id);\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n        product.qty--;\n        product.total=product.qty*product.price;\n        this.setState(() => {\n            return {\n                cart:[...tempCart]\n            }\n        },() => {\n            this.addTotals();\n        })\n    }\n\n    //clearCart\n    clearCart = () => {\n        this.setState(() => {\n            return{\n                cart:[]\n            }\n        }, () => {\n            this.restoreValues();\n        })\n        let cart = [...this.state.cart];\n        localStorage.setItem(\"cart\",cart);\n    }\n\n    //removeItem\n    removeItem = async(id) => {\n        let tempProducts = [...this.state.products];\n        let tempCart = [...this.state.cart];\n        tempCart = tempCart.filter(item => item.element !== id);\n        const index = tempProducts.indexOf(this.getProduct(id));\n        let removedProduct = tempProducts[index];\n        removedProduct.inCart=false;\n        removedProduct.qty=0;\n        removedProduct.total=0;\n        this.setState(() => {\n            return {\n                cart:[...tempCart],\n                products:[...tempProducts]\n            }\n        },() => {\n            this.addTotals();\n        })\n        let cart = [...this.state.cart];\n        localStorage.setItem(\"cart\",cart);\n    }\n\n    //restore\n    restoreValues = () => {\n        let prods=[...this.state.products];\n        prods.map(item => {\n            item.qty=0;\n            item.total=0;\n            item.inCart=false;\n        })\n        this.setState(() => {\n            return {\n                products: prods\n            }\n        })\n    } \n\n    //addTotals\n    addTotals = () => {\n        let cartTotal=0;\n        this.state.cart.map(item => (cartTotal += item.total));\n        this.setState(() => {\n            return {\n                cartTotal: cartTotal\n            }\n        })\n    }\n\n    filterProducts = () => {\n        let{\n            products,\n            type,\n            compatibility,\n            price,\n            brand\n        } = this.state;\n        let tempProducts=[...products];\n\n        //capacity\n        if(compatibility!=='all'){\n            let tempFiltered=[];\n            tempProducts.map(product => {\n                product.compatibility.map((item) => {\n                    if(item.value.toLowerCase() === compatibility.toLowerCase())\n                        tempFiltered.push(product);\n                })\n            })\n            tempProducts=tempFiltered;\n        }\n\n        //type\n        if(type!=='all')\n            tempProducts=tempProducts.filter(product => product.type === type);\n        \n        //price\n        price=parseInt(price);\n        tempProducts=tempProducts.filter(product => product.price <= price);\n        \n        //brand\n        if(brand!=='all')\n                tempProducts=tempProducts.filter(product => product.brand === brand)\n\n        this.setState({\n            sortedProducts:tempProducts\n        })\n    }//filterProducts\n\n    render() {\n        return (\n            <ProductContext.Provider value={{...this.state,getProduct: this.getProduct,handleChanges: this.handleChanges,\n                resetChanges:this.resetChanges,sort:this.sort, addToCart:this.addToCart, increment:this.increment,decrement:this.decrement,\n            removeItem:this.removeItem,clearCart:this.clearCart,getDetails: this.getDetails}}>\n                {this.props.children}\n            </ProductContext.Provider>\n        );\n    }//render\n}//ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport function withProductConsumer(Component){\n    return function ConsumerWrapper(props){\n        return(\n            <ProductConsumer>\n                {value => <Component {...props} context={value}/>}\n            </ProductConsumer>\n        )}\n}//withProductConsumer\n\nexport{ProductProvider,ProductConsumer,ProductContext}"]},"metadata":{},"sourceType":"module"}