{"ast":null,"code":"var _jsxFileName = \"/home/alessio_barbiero/headlessCommerce/client/src/contextAPI.js\";\nimport React, { Component } from 'react';\nconst ProductContext = React.createContext();\nexport default class ProductProvider extends Component {\n  constructor() {\n    super();\n\n    this.clean = list => {\n      return list.filter(function (el) {\n        return el != null && el !== \"\";\n      });\n    };\n\n    this.getCategories = () => {\n      return fetch(\"http://localhost:9000/categoriesAPI\").then(res => res.json()).then(categories => {\n        let tempCat = categories[\"data\"].map(item => {\n          let id = item.id;\n          let name = item.id;\n          let category = {\n            id,\n            name\n          };\n          if (category.id !== \"root\") return category;\n        });\n        return tempCat;\n      });\n    };\n\n    this.getProducts = category => {\n      return fetch(`http://localhost:9000/categoryProductsAPI?id=${category}`).then(res => res.json()).then(products => {\n        let tempProd = products[\"hits\"].map(item => {\n          if (item.product.type.master) {\n            let type = item.product.classificationCategory.categoryId;\n            let id = item.productId;\n            let name = item.productName.default;\n            let price = item.product.price;\n            let element = id;\n            let brand = item.product.brand;\n            let images = item.product.imageGroups[0].images.map(image => image.absUrl);\n            let inStock = item.product.inStock;\n            let extra = this.clean(item.product.longDescription.default.source.split('.'));\n            let desc = item.product.shortDescription.default.source;\n            let compatibility = [];\n\n            for (let i = 0; i < item.product.variants.length; i++) {\n              compatibility[i] = {\n                id: item.product.variants[i].productId,\n                value: item.product.variants[i].variationValues.compatibility\n              };\n            }\n\n            let inCartStatus = [];\n            compatibility.map((item, index) => {\n              inCartStatus[index] = {\n                qty: 0,\n                inCart: false,\n                total: 0\n              };\n            });\n            let product = {\n              id,\n              type,\n              name,\n              price,\n              element,\n              brand,\n              images,\n              inStock,\n              extra,\n              desc,\n              compatibility,\n              inCartStatus\n            };\n            return product;\n          }\n        });\n        return this.clean(tempProd);\n      });\n    };\n\n    this.getCart = () => {\n      return fetch(\"localhost:9000/getBasketAPI\").then(res => res.json());\n    };\n\n    this.sort = event => {\n      let {\n        sortedProducts\n      } = this.state;\n      const value = event.target.value;\n      if (value === \"alpha\") sortedProducts = sortedProducts.sort((a, b) => a.name > b.name ? 1 : -1);else if (value === \"price\") sortedProducts = sortedProducts.sort((a, b) => a.price > b.price ? 1 : -1);\n      this.setState({\n        sortedProducts: sortedProducts\n      });\n    };\n\n    this.getProduct = element => {\n      let tempProduct = [...this.state.products];\n      const product = tempProduct.find(product => product.element === element);\n      return product;\n    };\n\n    this.resetChanges = event => {\n      let {\n        products\n      } = this.state;\n      this.setState({\n        sortedProducts: products\n      });\n    };\n\n    this.handleChanges = event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterProducts);\n    };\n\n    this.addToCart = async (id, variation) => {\n      let tempProducts = [...this.state.products];\n      const index = tempProducts.indexOf(this.getProduct(id));\n      const product = tempProducts[index];\n      product.inCartStatus[variation].inCart = true;\n      product.inCartStatus[variation].qty = 1;\n      product.inCartStatus[variation].total = product.price;\n      let cartProduct = {\n        element: product.element,\n        variation: product.compatibility[variation].value,\n        variationId: variation,\n        name: product.name,\n        price: product.price,\n        qty: product.inCartStatus[variation].qty,\n        total: product.inCartStatus[variation].total,\n        images: product.images\n      };\n      this.setState(() => {\n        return {\n          products: tempProducts,\n          cart: [...this.state.cart, cartProduct]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.increment = async (id, variation) => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.element === id && item.variationId === variation);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.qty++;\n      product.total = product.qty * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.decrement = async (id, variation) => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.element === id && item.variationId === variation);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.qty--;\n      product.total = product.qty * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.clearCart = () => {\n      this.setState(() => {\n        return {\n          cart: []\n        };\n      }, () => {\n        this.restoreValues();\n      });\n    };\n\n    this.removeItem = async (id, variation) => {\n      let tempProducts = [...this.state.products];\n      let tempCart = [...this.state.cart];\n      tempCart = tempCart.filter(item => item.element !== id || item.element === id && item.variationId !== variation);\n      const index = tempProducts.indexOf(this.getProduct(id));\n      let removedProduct = tempProducts[index];\n      removedProduct.inCartStatus[variation].inCart = false;\n      removedProduct.inCartStatus[variation].qty = 0;\n      removedProduct.inCartStatus[variation].total = 0;\n      this.setState(() => {\n        return {\n          cart: [...tempCart],\n          products: [...tempProducts]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.restoreValues = () => {\n      let prods = [...this.state.products];\n      prods.map(item => {\n        item.inCartStatus.map(order => {\n          order.qty = 0;\n          order.total = 0;\n          order.inCart = false;\n        });\n      });\n      this.setState(() => {\n        return {\n          products: prods\n        };\n      });\n    };\n\n    this.addTotals = () => {\n      let cartTotal = 0;\n      this.state.cart.map(item => {\n        cartTotal += item.total;\n      });\n      this.setState(() => {\n        return {\n          cartTotal: cartTotal\n        };\n      });\n    };\n\n    this.filterProducts = () => {\n      let {\n        products,\n        type,\n        compatibility,\n        price,\n        brand\n      } = this.state;\n      let tempProducts = [...products]; //capacity\n\n      if (compatibility !== 'all') {\n        let tempFiltered = [];\n        tempProducts.map(product => {\n          product.compatibility.map(item => {\n            if (item.value.toLowerCase() === compatibility.toLowerCase()) tempFiltered.push(product);\n          });\n        });\n        tempProducts = tempFiltered;\n      } //type\n\n\n      if (type !== 'all') tempProducts = tempProducts.filter(product => product.type === type); //price\n\n      price = parseInt(price);\n      tempProducts = tempProducts.filter(product => product.price <= price); //brand\n\n      if (brand !== 'all') tempProducts = tempProducts.filter(product => product.brand === brand);\n      this.setState({\n        sortedProducts: tempProducts\n      });\n    };\n\n    this.state = {\n      categories: [],\n      products: [],\n      sortedProducts: [],\n      cart: [],\n      cartTotal: 0,\n      onesToWatch: [],\n      loading: true,\n      type: \"all\",\n      compatibility: \"all\",\n      brand: \"all\",\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0\n    };\n  }\n\n  async componentDidMount() {\n    /*categories*/\n    await this.getCategories().then(res => this.setState({\n      categories: res\n    })).then(res => {\n      this.setState({\n        categories: this.clean(this.state.categories)\n      });\n      console.log(this.state.categories);\n    })\n    /*products*/\n    .then(res => {\n      let temp = this.state.categories;\n      temp.map((item, index) => {\n        this.getProducts(item.id).then(res => this.setState({\n          products: this.state.products.concat(res)\n        })).then(res => {\n          if (index === temp.length - 1) {\n            let products = this.state.products;\n            console.log(products);\n            let tempSorted = products.sort((a, b) => a.price > b.price ? 1 : -1);\n            let onesToWatch = [tempSorted[0], tempSorted[1], tempSorted[2]];\n            let minPrice = Math.min(...products.map(item => item.price));\n            let maxPrice = Math.max(...products.map(item => item.price));\n            let price = maxPrice;\n            this.setState({\n              products,\n              sortedProducts: products,\n              onesToWatch,\n              maxPrice,\n              minPrice,\n              price,\n              loading: false\n            });\n          } //if\n\n        });\n      });\n    })\n    /*end-products*/\n\n    /*cart*/\n    .then(res => {\n      this.getCart().then(res => this.setState({\n        cart: res\n      }));\n    });\n  } //componentDidMount\n\n\n  //filterProducts\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        getProduct: this.getProduct,\n        handleChanges: this.handleChanges,\n        resetChanges: this.resetChanges,\n        sort: this.sort,\n        addToCart: this.addToCart,\n        increment: this.increment,\n        decrement: this.decrement,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart,\n        getDetails: this.getDetails\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  } //render\n\n\n} //ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\nexport function withProductConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(ProductConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 13\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 27\n      }\n    })));\n  };\n} //withProductConsumer\n\nexport { ProductProvider, ProductConsumer, ProductContext };","map":{"version":3,"sources":["/home/alessio_barbiero/headlessCommerce/client/src/contextAPI.js"],"names":["React","Component","ProductContext","createContext","ProductProvider","constructor","clean","list","filter","el","getCategories","fetch","then","res","json","categories","tempCat","map","item","id","name","category","getProducts","products","tempProd","product","type","master","classificationCategory","categoryId","productId","productName","default","price","element","brand","images","imageGroups","image","absUrl","inStock","extra","longDescription","source","split","desc","shortDescription","compatibility","i","variants","length","value","variationValues","inCartStatus","index","qty","inCart","total","getCart","sort","event","sortedProducts","state","target","a","b","setState","getProduct","tempProduct","find","resetChanges","handleChanges","checked","filterProducts","addToCart","variation","tempProducts","indexOf","cartProduct","variationId","cart","addTotals","increment","tempCart","selectedProduct","decrement","clearCart","restoreValues","removeItem","removedProduct","prods","order","cartTotal","tempFiltered","toLowerCase","push","parseInt","onesToWatch","loading","minPrice","maxPrice","componentDidMount","console","log","temp","concat","tempSorted","Math","min","max","render","getDetails","props","children","ProductConsumer","Consumer","withProductConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nconst ProductContext= React.createContext();\n\nexport default class ProductProvider extends Component {\n\n    constructor(){\n        super();\n        this.state={\n            categories: [],\n            products:[],\n            sortedProducts: [],\n            cart:[],\n            cartTotal:0,\n            onesToWatch: [],\n            loading: true,\n            type: \"all\",\n            compatibility: \"all\",\n            brand: \"all\",\n            price: 0,\n            minPrice: 0,\n            maxPrice: 0,\n        };\n    }\n\n    async componentDidMount(){\n        /*categories*/\n        await this.getCategories()\n        .then(res => this.setState({categories: res}))\n        .then(res => {\n            this.setState({categories: this.clean(this.state.categories)});\n            console.log(this.state.categories)\n        })\n        /*products*/\n        .then(res => {\n            let temp=this.state.categories;\n            temp.map((item,index) => {\n                this.getProducts(item.id)\n                .then(res => this.setState({products: this.state.products.concat(res)}))\n                .then(res => {\n                    if(index===temp.length-1){\n                        let products=this.state.products;\n                        console.log(products)\n                        let tempSorted=products.sort((a, b) => (a.price > b.price) ? 1 : -1);\n                        let onesToWatch=[tempSorted[0], tempSorted[1], tempSorted[2]];\n                        let minPrice=Math.min(...products.map(item => item.price));\n                        let maxPrice=Math.max(...products.map(item => item.price));\n                        let price=maxPrice;\n                        this.setState({\n                            products,\n                            sortedProducts:products,\n                            onesToWatch,\n                            maxPrice,\n                            minPrice,\n                            price,\n                            loading:false\n                        })\n                    }//if\n                })\n            });\n        })\n        /*end-products*/\n        /*cart*/\n        .then(res => {\n            this.getCart()\n            .then(res => this.setState({cart:res}))\n        })\n    }//componentDidMount\n\n    clean = (list) =>{\n        return list.filter(function (el) {\n            return el != null && el !== \"\";\n          });\n    }//clean\n\n    //getCategories\n    getCategories = () => {\n        return fetch(\"http://localhost:9000/categoriesAPI\")\n        .then(res => res.json())\n        .then(categories => {\n            let tempCat = categories[\"data\"].map(item => {\n                let id=item.id;\n                let name=item.id;\n                let category={id,name};\n                if(category.id!==\"root\")\n                    return category;\n            })\n            return tempCat;\n        })\n    }//getCategories\n\n    //getProducts\n    getProducts = (category) => {\n        return fetch(`http://localhost:9000/categoryProductsAPI?id=${category}`)\n        .then(res => res.json())\n        .then(products => {\n            let tempProd = products[\"hits\"].map(item => {\n                if(item.product.type.master){\n                    let type=item.product.classificationCategory.categoryId;\n                    let id=item.productId;\n                    let name=item.productName.default;\n                    let price=item.product.price;\n                    let element=id;\n                    let brand=item.product.brand;\n                    let images=item.product.imageGroups[0].images.map(image => image.absUrl);\n                    let inStock=item.product.inStock;\n                    let extra=this.clean(item.product.longDescription.default.source.split('.'));\n                    let desc=item.product.shortDescription.default.source;\n                    let compatibility=[];\n                    for(let i=0;i<item.product.variants.length;i++){\n                        compatibility[i]={id: item.product.variants[i].productId, value: item.product.variants[i].variationValues.compatibility};\n                    }\n                    let inCartStatus=[];\n                    compatibility.map((item,index) => {\n                        inCartStatus[index]={qty:0,inCart:false,total:0}\n                    })\n                    let product={id,type,name,price,element,brand,images,inStock,extra,desc,compatibility,inCartStatus};\n                    return product;\n                }\n            })\n            return this.clean(tempProd);\n        })\n    }//getProducts\n\n    getCart = () => {\n        return fetch(\"localhost:9000/getBasketAPI\")\n        .then(res => res.json())\n    }\n\n    //sort\n    sort = event => {\n        let {\n            sortedProducts\n        } = this.state;\n        const value=event.target.value;\n        if(value===\"alpha\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.name > b.name) ? 1 : -1);\n        else if(value===\"price\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.price > b.price) ? 1 : -1);\n        this.setState({sortedProducts:sortedProducts});\n    }//sort\n\n    //getProduct\n    getProduct = (element) => {\n        let tempProduct=[...this.state.products];\n        const product=tempProduct.find(product => product.element === element);\n        return product;\n    }//getProduct\n\n    //resetChanges\n    resetChanges = event => {\n        let{\n            products\n        } = this.state;\n        this.setState({sortedProducts:products})\n    }//resetChanges\n\n    //handleChanges\n    handleChanges = event => {\n        const target=event.target;\n        const value=target.type === 'checkbox' ? target.checked : target.value;\n        const name=event.target.name;\n        this.setState({[name]:value},this.filterProducts)\n    }//handleChanges\n\n    //addToCart\n    addToCart = async(id,variation) => {\n        let tempProducts=[...this.state.products];\n        const index=tempProducts.indexOf(this.getProduct(id));\n        const product=tempProducts[index];\n        product.inCartStatus[variation].inCart=true;\n        product.inCartStatus[variation].qty=1;\n        product.inCartStatus[variation].total=product.price;\n        let cartProduct={element: product.element,variation: product.compatibility[variation].value,variationId: variation,name: product.name, price:product.price,\n            qty: product.inCartStatus[variation].qty,total: product.inCartStatus[variation].total,images: product.images}\n        this.setState(() => {\n            return{products: tempProducts, cart: [...this.state.cart,cartProduct]}\n        },\n        () => {\n            this.addTotals();\n        })\n    }\n\n    //increment\n    increment = async(id,variation) => {\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item => item.element === id && item.variationId === variation);\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n        product.qty++;\n        product.total=product.qty*product.price;\n        this.setState(() => {\n            return {\n                cart:[...tempCart]\n            }\n        },() => {\n            this.addTotals();\n        })\n    }\n\n    //decrement\n    decrement = async(id,variation) => {\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item => item.element === id && item.variationId === variation);\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n        product.qty--;\n        product.total=product.qty*product.price;\n        this.setState(() => {\n            return {\n                cart:[...tempCart]\n            }\n        },() => {\n            this.addTotals();\n        })\n    }\n\n    //clearCart\n    clearCart = () => {\n        this.setState(() => {\n            return{\n                cart:[]\n            }\n        }, () => {\n            this.restoreValues();\n        })\n    }\n\n    //removeItem\n    removeItem = async(id,variation) => {\n        let tempProducts = [...this.state.products];\n        let tempCart = [...this.state.cart];\n        tempCart = tempCart.filter(item => item.element !== id || (item.element === id && item.variationId !== variation));\n        const index = tempProducts.indexOf(this.getProduct(id));\n        let removedProduct = tempProducts[index];\n        removedProduct.inCartStatus[variation].inCart=false;\n        removedProduct.inCartStatus[variation].qty=0;\n        removedProduct.inCartStatus[variation].total=0;\n        this.setState(() => {\n            return {\n                cart:[...tempCart],\n                products:[...tempProducts]\n            }\n        },() => {\n            this.addTotals();\n        })\n    }\n\n    //restore\n    restoreValues = () => {\n        let prods=[...this.state.products];\n        prods.map(item => {\n            item.inCartStatus.map(order => {\n                order.qty=0;\n                order.total=0;\n                order.inCart=false;\n            })\n        })\n        this.setState(() => {\n            return {\n                products: prods\n            }\n        })\n    } \n\n    //addTotals\n    addTotals = () => {\n        let cartTotal=0;\n        this.state.cart.map(item => {\n            cartTotal+=item.total;\n        });\n        this.setState(() => {\n            return {\n                cartTotal: cartTotal\n            }\n        })\n    }\n\n    filterProducts = () => {\n        let{\n            products,\n            type,\n            compatibility,\n            price,\n            brand\n        } = this.state;\n        let tempProducts=[...products];\n\n        //capacity\n        if(compatibility!=='all'){\n            let tempFiltered=[];\n            tempProducts.map(product => {\n                product.compatibility.map((item) => {\n                    if(item.value.toLowerCase() === compatibility.toLowerCase())\n                        tempFiltered.push(product);\n                })\n            })\n            tempProducts=tempFiltered;\n        }\n\n        //type\n        if(type!=='all')\n            tempProducts=tempProducts.filter(product => product.type === type);\n        \n        //price\n        price=parseInt(price);\n        tempProducts=tempProducts.filter(product => product.price <= price);\n        \n        //brand\n        if(brand!=='all')\n                tempProducts=tempProducts.filter(product => product.brand === brand)\n\n        this.setState({\n            sortedProducts:tempProducts\n        })\n    }//filterProducts\n\n    render() {\n        return (\n            <ProductContext.Provider value={{...this.state,getProduct: this.getProduct,handleChanges: this.handleChanges,\n                resetChanges:this.resetChanges,sort:this.sort, addToCart:this.addToCart, increment:this.increment,decrement:this.decrement,\n            removeItem:this.removeItem,clearCart:this.clearCart,getDetails: this.getDetails}}>\n                {this.props.children}\n            </ProductContext.Provider>\n        );\n    }//render\n}//ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport function withProductConsumer(Component){\n    return function ConsumerWrapper(props){\n        return(\n            <ProductConsumer>\n                {value => <Component {...props} context={value}/>}\n            </ProductConsumer>\n        )}\n}//withProductConsumer\n\nexport{ProductProvider,ProductConsumer,ProductContext}"]},"metadata":{},"sourceType":"module"}