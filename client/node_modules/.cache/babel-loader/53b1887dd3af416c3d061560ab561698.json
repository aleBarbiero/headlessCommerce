{"ast":null,"code":"var _jsxFileName = \"/home/alessio_barbiero/headlessCommerce/client/src/contextAPI.js\";\nimport React, { Component } from 'react';\nconst ProductContext = React.createContext();\nexport default class ProductProvider extends Component {\n  constructor() {\n    super();\n\n    this.clean = list => {\n      return list.filter(function (el) {\n        return el != null;\n      });\n    };\n\n    this.getCategories = () => {\n      return fetch(\"http://localhost:9000/categoriesAPI\").then(res => res.json()).then(categories => {\n        let tempCat = categories[\"data\"].map(item => {\n          let id = item.id;\n          let name = item.id;\n          let category = {\n            id,\n            name\n          };\n          if (category.id !== \"root\") return category;\n        });\n        return tempCat;\n      });\n    };\n\n    this.getProducts = () => {\n      let tempProds = [];\n\n      for (const category of this.state.categories) {\n        var current = category.id;\n        fetch(`http://localhost:9000/categoryProductsAPI?id=${current}`).then(res => res.json()).then(res => tempProds = [...tempProds, res]);\n      }\n\n      console;\n    };\n\n    this.state = {\n      categories: [],\n      products: [],\n      sortedProducts: [],\n      cart: [],\n      cartTotal: 0,\n      onesToWatch: [],\n      loading: true,\n      type: \"all\",\n      compatibility: \"all\",\n      brand: \"all\",\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0\n    };\n  }\n\n  async componentDidMount() {\n    /*categories*/\n    await this.getCategories().then(res => this.setState({\n      categories: res\n    })).then(res => {\n      this.setState({\n        categories: this.clean(this.state.categories)\n      });\n      console.log(this.state.categories);\n    });\n    /*products*/\n\n    await this.getProducts();\n  }\n\n  /*setUp = async() => {\n      try{\n          await this.getProducts();\n          let products=this.state.products;\n          setTimeout(await this.getCart(),5000);\n          let tempSorted=products.sort((a, b) => (a.price > b.price) ? 1 : -1);\n          let onesToWatch=[tempSorted[0], tempSorted[1], tempSorted[2]];\n          let minPrice=Math.min(...products.map(item => item.price));\n          let maxPrice=Math.max(...products.map(item => item.price));\n          let price=maxPrice;\n          this.setState({\n              products,\n              sortedProducts:products,\n              onesToWatch,\n              maxPrice,\n              minPrice,\n              price,\n              loading:false\n          })\n      }catch(error){\n          console.log(error);\n      }//try_catch\n  }//setUp\n   //getDetails\n  getDetails = async(id) => {\n      let res = await fetch(`http://localhost:9000/detailsAPI?id=${id}`)\n      .then(res => res.json())\n  }\n   getProducts = async() => {\n      let products = await \n      .then(res => res.json())\n      .catch(e => this.getProducts())\n      .then(async(products) => {\n              let tempProd = await products[\"hits\"].map((item) => {\n              let element=item.productId;\n              let id=element;\n              let name=item.productName;\n              let brand=\"test\";\n              let compatibility=[\"test\"];\n              let type=\"shoes\";\n              let price=item.price;\n              let extras=[]\n              let inCart=false;\n              let qty=0;\n              let total=0;\n              let images=[item.image.link,item.image.link,item.image.link];\n              let product={id,element,name,price,brand,compatibility,type,images,extras,inCart,qty,total};\n              return product;\n          })\n          this.setState({\n              products:tempProd\n          })\n      })\n  }\n   //getCart\n  getCart = async() => {\n      let res = await fetch(\"http://localhost:9000/getBasketAPI\")\n      .then(res => res.json())\n      .catch(e => this.getCart)\n      let tempCart = await res;\n      if(tempCart[\"productItems\"])\n          tempCart[\"productItems\"].map(item => {\n              let tempProducts=[...this.state.products];\n              const index=tempProducts.indexOf(this.getProduct(item.productId));\n              const product=tempProducts[index];\n              product.inCart=true;\n              product.qty=item.quantity;\n              product.total=product.price*product.qty;\n              this.setState(() => {\n                  return{products: tempProducts, cart: [...this.state.cart,product]}\n              },\n              () => {\n                  this.addTotals();\n              })\n                  })\n  }\n   //sort\n  sort = event => {\n      let {\n          sortedProducts\n      } = this.state;\n      const value=event.target.value;\n      if(value===\"alpha\")\n          sortedProducts=sortedProducts.sort((a, b) => (a.name > b.name) ? 1 : -1);\n      else if(value===\"price\")\n          sortedProducts=sortedProducts.sort((a, b) => (a.price > b.price) ? 1 : -1);\n      this.setState({sortedProducts:sortedProducts});\n  }//sort\n   //getProduct\n  getProduct = (element) => {\n      let tempProduct=[...this.state.products];\n      const product=tempProduct.find(product => product.element === element);\n      return product;\n  }//getProduct\n   //resetChanges\n  resetChanges = event => {\n      let{\n          products\n      } = this.state;\n      this.setState({sortedProducts:products})\n  }//resetChanges\n   //handleChanges\n  handleChanges = event => {\n      const target=event.target;\n      const value=target.type === 'checkbox' ? target.checked : target.value;\n      const name=event.target.name;\n      this.setState({[name]:value},this.filterProducts)\n  }//handleChanges\n   //addToCart\n  addToCart = async(id) => {\n      await fetch(`http://localhost:9000/addItemToBasketAPI?item=${id}`)\n      .then(res => res.json())\n      .catch(err => err);\n      let tempProducts=[...this.state.products];\n      const index=tempProducts.indexOf(this.getProduct(id));\n      const product=tempProducts[index];\n      product.inCart=true;\n      product.qty=1;\n      product.total=product.price;\n      this.setState(() => {\n          return{products: tempProducts, cart: [...this.state.cart,product]}\n      },\n      () => {\n          this.addTotals();\n      })\n  }\n   //increment\n  increment = async(id) => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.element === id);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.qty++;\n      product.total=product.qty*product.price;\n      this.setState(() => {\n          return {\n              cart:[...tempCart]\n          }\n      },() => {\n          this.addTotals();\n      })\n  }\n   //decrement\n  decrement = async(id) => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.element === id);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.qty--;\n      product.total=product.qty*product.price;\n      this.setState(() => {\n          return {\n              cart:[...tempCart]\n          }\n      },() => {\n          this.addTotals();\n      })\n  }\n   //clearCart\n  clearCart = () => {\n      this.setState(() => {\n          return{\n              cart:[]\n          }\n      }, () => {\n          this.restoreValues();\n      })\n      let cart = [...this.state.cart];\n      localStorage.setItem(\"cart\",cart);\n  }\n   //removeItem\n  removeItem = async(id) => {\n      let tempProducts = [...this.state.products];\n      let tempCart = [...this.state.cart];\n      tempCart = tempCart.filter(item => item.element !== id);\n      const index = tempProducts.indexOf(this.getProduct(id));\n      let removedProduct = tempProducts[index];\n      removedProduct.inCart=false;\n      removedProduct.qty=0;\n      removedProduct.total=0;\n      this.setState(() => {\n          return {\n              cart:[...tempCart],\n              products:[...tempProducts]\n          }\n      },() => {\n          this.addTotals();\n      })\n      let cart = [...this.state.cart];\n      localStorage.setItem(\"cart\",cart);\n  }\n   //restore\n  restoreValues = () => {\n      let prods=[...this.state.products];\n      prods.map(item => {\n          item.qty=0;\n          item.total=0;\n          item.inCart=false;\n      })\n      this.setState(() => {\n          return {\n              products: prods\n          }\n      })\n  } \n   //addTotals\n  addTotals = () => {\n      let cartTotal=0;\n      this.state.cart.map(item => (cartTotal += item.total));\n      this.setState(() => {\n          return {\n              cartTotal: cartTotal\n          }\n      })\n  }\n   filterProducts = () => {\n      let{\n          products,\n          type,\n          compatibility,\n          price,\n          brand\n      } = this.state;\n      let tempProducts=[...products];\n       //capacity\n      if(compatibility!=='all')\n          tempProducts=tempProducts.filter(product => product.compatibility.includes(compatibility))\n       //type\n      if(type!=='all')\n          tempProducts=tempProducts.filter(product => product.type === type);\n      \n      //price\n      price=parseInt(price);\n      tempProducts=tempProducts.filter(product => product.price <= price);\n      \n      //brand\n      if(brand!=='all')\n              tempProducts=tempProducts.filter(product => product.brand === brand)\n       this.setState({\n          sortedProducts:tempProducts\n      })\n  }//filterProducts*/\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        getProduct: this.getProduct,\n        handleChanges: this.handleChanges,\n        resetChanges: this.resetChanges,\n        sort: this.sort,\n        addToCart: this.addToCart,\n        increment: this.increment,\n        decrement: this.decrement,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart,\n        getDetails: this.getDetails\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  } //render\n\n\n} //ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\nexport function withProductConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(ProductConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 13\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 27\n      }\n    })));\n  };\n} //withProductConsumer\n\nexport { ProductProvider, ProductConsumer, ProductContext };","map":{"version":3,"sources":["/home/alessio_barbiero/headlessCommerce/client/src/contextAPI.js"],"names":["React","Component","ProductContext","createContext","ProductProvider","constructor","clean","list","filter","el","getCategories","fetch","then","res","json","categories","tempCat","map","item","id","name","category","getProducts","tempProds","state","current","console","products","sortedProducts","cart","cartTotal","onesToWatch","loading","type","compatibility","brand","price","minPrice","maxPrice","componentDidMount","setState","log","render","getProduct","handleChanges","resetChanges","sort","addToCart","increment","decrement","removeItem","clearCart","getDetails","props","children","ProductConsumer","Consumer","withProductConsumer","ConsumerWrapper","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nconst ProductContext= React.createContext();\n\nexport default class ProductProvider extends Component {\n\n    constructor(){\n        super();\n        this.state={\n            categories: [],\n            products:[],\n            sortedProducts: [],\n            cart:[],\n            cartTotal:0,\n            onesToWatch: [],\n            loading: true,\n            type: \"all\",\n            compatibility: \"all\",\n            brand: \"all\",\n            price: 0,\n            minPrice: 0,\n            maxPrice: 0,\n        };\n    }\n\n    async componentDidMount(){\n        /*categories*/\n        await this.getCategories()\n        .then(res => this.setState({categories: res}))\n        .then(res => {\n            this.setState({categories: this.clean(this.state.categories)});\n            console.log(this.state.categories)\n        })\n        /*products*/\n        await this.getProducts()\n    }\n\n    clean = (list) =>{\n        return list.filter(function (el) {\n            return el != null;\n          });\n    }//clean\n\n    //getCategories\n    getCategories = () => {\n        return fetch(\"http://localhost:9000/categoriesAPI\")\n        .then(res => res.json())\n        .then(categories => {\n            let tempCat = categories[\"data\"].map(item => {\n                let id=item.id;\n                let name=item.id;\n                let category={id,name};\n                if(category.id!==\"root\")\n                    return category;\n            })\n            return tempCat;\n        })\n    }//getCategories\n\n    //getProducts\n    getProducts = () => {\n        let tempProds=[];\n        for(const category of this.state.categories){\n            var current = category.id;\n            fetch(`http://localhost:9000/categoryProductsAPI?id=${current}`)\n            .then(res => res.json())\n            .then(res => tempProds=[...tempProds,res])\n        }\n        console\n    }\n\n    /*setUp = async() => {\n        try{\n            await this.getProducts();\n            let products=this.state.products;\n            setTimeout(await this.getCart(),5000);\n            let tempSorted=products.sort((a, b) => (a.price > b.price) ? 1 : -1);\n            let onesToWatch=[tempSorted[0], tempSorted[1], tempSorted[2]];\n            let minPrice=Math.min(...products.map(item => item.price));\n            let maxPrice=Math.max(...products.map(item => item.price));\n            let price=maxPrice;\n            this.setState({\n                products,\n                sortedProducts:products,\n                onesToWatch,\n                maxPrice,\n                minPrice,\n                price,\n                loading:false\n            })\n        }catch(error){\n            console.log(error);\n        }//try_catch\n    }//setUp\n\n    //getDetails\n    getDetails = async(id) => {\n        let res = await fetch(`http://localhost:9000/detailsAPI?id=${id}`)\n        .then(res => res.json())\n    }\n\n    getProducts = async() => {\n        let products = await \n        .then(res => res.json())\n        .catch(e => this.getProducts())\n        .then(async(products) => {\n                let tempProd = await products[\"hits\"].map((item) => {\n                let element=item.productId;\n                let id=element;\n                let name=item.productName;\n                let brand=\"test\";\n                let compatibility=[\"test\"];\n                let type=\"shoes\";\n                let price=item.price;\n                let extras=[]\n                let inCart=false;\n                let qty=0;\n                let total=0;\n                let images=[item.image.link,item.image.link,item.image.link];\n                let product={id,element,name,price,brand,compatibility,type,images,extras,inCart,qty,total};\n                return product;\n            })\n            this.setState({\n                products:tempProd\n            })\n        })\n    }\n\n    //getCart\n    getCart = async() => {\n        let res = await fetch(\"http://localhost:9000/getBasketAPI\")\n        .then(res => res.json())\n        .catch(e => this.getCart)\n        let tempCart = await res;\n        if(tempCart[\"productItems\"])\n            tempCart[\"productItems\"].map(item => {\n                let tempProducts=[...this.state.products];\n                const index=tempProducts.indexOf(this.getProduct(item.productId));\n                const product=tempProducts[index];\n                product.inCart=true;\n                product.qty=item.quantity;\n                product.total=product.price*product.qty;\n                this.setState(() => {\n                    return{products: tempProducts, cart: [...this.state.cart,product]}\n                },\n                () => {\n                    this.addTotals();\n                })\n                    })\n    }\n\n    //sort\n    sort = event => {\n        let {\n            sortedProducts\n        } = this.state;\n        const value=event.target.value;\n        if(value===\"alpha\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.name > b.name) ? 1 : -1);\n        else if(value===\"price\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.price > b.price) ? 1 : -1);\n        this.setState({sortedProducts:sortedProducts});\n    }//sort\n\n    //getProduct\n    getProduct = (element) => {\n        let tempProduct=[...this.state.products];\n        const product=tempProduct.find(product => product.element === element);\n        return product;\n    }//getProduct\n\n    //resetChanges\n    resetChanges = event => {\n        let{\n            products\n        } = this.state;\n        this.setState({sortedProducts:products})\n    }//resetChanges\n\n    //handleChanges\n    handleChanges = event => {\n        const target=event.target;\n        const value=target.type === 'checkbox' ? target.checked : target.value;\n        const name=event.target.name;\n        this.setState({[name]:value},this.filterProducts)\n    }//handleChanges\n\n    //addToCart\n    addToCart = async(id) => {\n        await fetch(`http://localhost:9000/addItemToBasketAPI?item=${id}`)\n        .then(res => res.json())\n        .catch(err => err);\n        let tempProducts=[...this.state.products];\n        const index=tempProducts.indexOf(this.getProduct(id));\n        const product=tempProducts[index];\n        product.inCart=true;\n        product.qty=1;\n        product.total=product.price;\n        this.setState(() => {\n            return{products: tempProducts, cart: [...this.state.cart,product]}\n        },\n        () => {\n            this.addTotals();\n        })\n    }\n\n    //increment\n    increment = async(id) => {\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item => item.element === id);\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n        product.qty++;\n        product.total=product.qty*product.price;\n        this.setState(() => {\n            return {\n                cart:[...tempCart]\n            }\n        },() => {\n            this.addTotals();\n        })\n    }\n\n    //decrement\n    decrement = async(id) => {\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item => item.element === id);\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n        product.qty--;\n        product.total=product.qty*product.price;\n        this.setState(() => {\n            return {\n                cart:[...tempCart]\n            }\n        },() => {\n            this.addTotals();\n        })\n    }\n\n    //clearCart\n    clearCart = () => {\n        this.setState(() => {\n            return{\n                cart:[]\n            }\n        }, () => {\n            this.restoreValues();\n        })\n        let cart = [...this.state.cart];\n        localStorage.setItem(\"cart\",cart);\n    }\n\n    //removeItem\n    removeItem = async(id) => {\n        let tempProducts = [...this.state.products];\n        let tempCart = [...this.state.cart];\n        tempCart = tempCart.filter(item => item.element !== id);\n        const index = tempProducts.indexOf(this.getProduct(id));\n        let removedProduct = tempProducts[index];\n        removedProduct.inCart=false;\n        removedProduct.qty=0;\n        removedProduct.total=0;\n        this.setState(() => {\n            return {\n                cart:[...tempCart],\n                products:[...tempProducts]\n            }\n        },() => {\n            this.addTotals();\n        })\n        let cart = [...this.state.cart];\n        localStorage.setItem(\"cart\",cart);\n    }\n\n    //restore\n    restoreValues = () => {\n        let prods=[...this.state.products];\n        prods.map(item => {\n            item.qty=0;\n            item.total=0;\n            item.inCart=false;\n        })\n        this.setState(() => {\n            return {\n                products: prods\n            }\n        })\n    } \n\n    //addTotals\n    addTotals = () => {\n        let cartTotal=0;\n        this.state.cart.map(item => (cartTotal += item.total));\n        this.setState(() => {\n            return {\n                cartTotal: cartTotal\n            }\n        })\n    }\n\n    filterProducts = () => {\n        let{\n            products,\n            type,\n            compatibility,\n            price,\n            brand\n        } = this.state;\n        let tempProducts=[...products];\n\n        //capacity\n        if(compatibility!=='all')\n            tempProducts=tempProducts.filter(product => product.compatibility.includes(compatibility))\n\n        //type\n        if(type!=='all')\n            tempProducts=tempProducts.filter(product => product.type === type);\n        \n        //price\n        price=parseInt(price);\n        tempProducts=tempProducts.filter(product => product.price <= price);\n        \n        //brand\n        if(brand!=='all')\n                tempProducts=tempProducts.filter(product => product.brand === brand)\n\n        this.setState({\n            sortedProducts:tempProducts\n        })\n    }//filterProducts*/\n\n    render() {\n        return (\n            <ProductContext.Provider value={{...this.state,getProduct: this.getProduct,handleChanges: this.handleChanges,\n                resetChanges:this.resetChanges,sort:this.sort, addToCart:this.addToCart, increment:this.increment,decrement:this.decrement,\n                removeItem:this.removeItem,clearCart:this.clearCart,getDetails: this.getDetails}}>\n                {this.props.children}\n            </ProductContext.Provider>\n        );\n    }//render\n}//ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport function withProductConsumer(Component){\n    return function ConsumerWrapper(props){\n        return(\n            <ProductConsumer>\n                {value => <Component {...props} context={value}/>}\n            </ProductConsumer>\n        )}\n}//withProductConsumer\n\nexport{ProductProvider,ProductConsumer,ProductContext}"]},"metadata":{},"sourceType":"module"}