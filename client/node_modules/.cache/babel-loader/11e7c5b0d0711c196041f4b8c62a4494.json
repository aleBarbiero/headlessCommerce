{"ast":null,"code":"var _jsxFileName = \"/home/alessio_barbiero/headlessCommerce/client/src/contextAPI.js\";\nimport React, { Component } from 'react';\nconst ProductContext = React.createContext();\nexport default class ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categories: [],\n      products: [],\n      sortedProducts: [],\n      cart: [],\n      cartTotal: 0,\n      onesToWatch: [],\n      loading: true,\n      type: \"all\",\n      compatibility: \"all\",\n      brand: \"all\",\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0\n    };\n\n    this.setUp = async () => {\n      let categories = await this.getCategories().then(() => console.log(categories));\n    };\n\n    this.getCategories = async () => {\n      let res = await fetch(\"http://localhost:9000/categoriesAPI\");\n      let categories = await res.json();\n      let tempCat = await categories[\"data\"].map(item => {\n        let id = item.id;\n        let name = item.name.default;\n        let category = {\n          id,\n          name\n        };\n        return category;\n      });\n      return tempCat;\n    };\n\n    this.sort = event => {\n      let {\n        sortedProducts\n      } = this.state;\n      const value = event.target.value;\n      if (value === \"alpha\") sortedProducts = sortedProducts.sort((a, b) => a.name > b.name ? 1 : -1);else if (value === \"price\") sortedProducts = sortedProducts.sort((a, b) => a.price > b.price ? 1 : -1);\n      this.setState({\n        sortedProducts: sortedProducts\n      });\n    };\n\n    this.getProduct = element => {\n      let tempProduct = [...this.state.products];\n      const product = tempProduct.find(product => product.element === element);\n      return product;\n    };\n\n    this.resetChanges = event => {\n      let {\n        products\n      } = this.state;\n      this.setState({\n        sortedProducts: products\n      });\n    };\n\n    this.handleChanges = event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterProducts);\n    };\n\n    this.addToCart = async id => {\n      await fetch(`http://localhost:9000/addItemToBasketAPI?item=${id}`).then(res => res.json()).catch(err => err);\n      let tempProducts = [...this.state.products];\n      const index = tempProducts.indexOf(this.getProduct(id));\n      const product = tempProducts[index];\n      product.inCart = true;\n      product.qty = 1;\n      product.total = product.price;\n      this.setState(() => {\n        return {\n          products: tempProducts,\n          cart: [...this.state.cart, product]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.increment = async id => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.element === id);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.qty++;\n      product.total = product.qty * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.decrement = async id => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.element === id);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.qty--;\n      product.total = product.qty * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.clearCart = () => {\n      this.setState(() => {\n        return {\n          cart: []\n        };\n      }, () => {\n        this.restoreValues();\n      });\n      let cart = [...this.state.cart];\n      localStorage.setItem(\"cart\", cart);\n    };\n\n    this.removeItem = async id => {\n      let tempProducts = [...this.state.products];\n      let tempCart = [...this.state.cart];\n      tempCart = tempCart.filter(item => item.element !== id);\n      const index = tempProducts.indexOf(this.getProduct(id));\n      let removedProduct = tempProducts[index];\n      removedProduct.inCart = false;\n      removedProduct.qty = 0;\n      removedProduct.total = 0;\n      this.setState(() => {\n        return {\n          cart: [...tempCart],\n          products: [...tempProducts]\n        };\n      }, () => {\n        this.addTotals();\n      });\n      let cart = [...this.state.cart];\n      localStorage.setItem(\"cart\", cart);\n    };\n\n    this.restoreValues = () => {\n      let prods = [...this.state.products];\n      prods.map(item => {\n        item.qty = 0;\n        item.total = 0;\n        item.inCart = false;\n      });\n      this.setState(() => {\n        return {\n          products: prods\n        };\n      });\n    };\n\n    this.addTotals = () => {\n      let cartTotal = 0;\n      this.state.cart.map(item => cartTotal += item.total);\n      this.setState(() => {\n        return {\n          cartTotal: cartTotal\n        };\n      });\n    };\n\n    this.filterProducts = () => {\n      let {\n        products,\n        type,\n        compatibility,\n        price,\n        brand\n      } = this.state;\n      let tempProducts = [...products]; //capacity\n\n      if (compatibility !== 'all') tempProducts = tempProducts.filter(product => product.compatibility.includes(compatibility)); //type\n\n      if (type !== 'all') tempProducts = tempProducts.filter(product => product.type === type); //price\n\n      price = parseInt(price);\n      tempProducts = tempProducts.filter(product => product.price <= price); //brand\n\n      if (brand !== 'all') tempProducts = tempProducts.filter(product => product.brand === brand);\n      this.setState({\n        sortedProducts: tempProducts\n      });\n    };\n  }\n\n  //filterProducts*/\n  componentDidMount() {\n    this.setUp();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        getProduct: this.getProduct,\n        handleChanges: this.handleChanges,\n        resetChanges: this.resetChanges,\n        sort: this.sort,\n        addToCart: this.addToCart,\n        increment: this.increment,\n        decrement: this.decrement,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart,\n        getDetails: this.getDetails\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  } //render\n\n\n} //ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\nexport function withProductConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(ProductConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 13\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 27\n      }\n    })));\n  };\n} //withProductConsumer\n\nexport { ProductProvider, ProductConsumer, ProductContext };","map":{"version":3,"sources":["/home/alessio_barbiero/headlessCommerce/client/src/contextAPI.js"],"names":["React","Component","ProductContext","createContext","ProductProvider","state","categories","products","sortedProducts","cart","cartTotal","onesToWatch","loading","type","compatibility","brand","price","minPrice","maxPrice","setUp","getCategories","then","console","log","res","fetch","json","tempCat","map","item","id","name","default","category","sort","event","value","target","a","b","setState","getProduct","element","tempProduct","product","find","resetChanges","handleChanges","checked","filterProducts","addToCart","catch","err","tempProducts","index","indexOf","inCart","qty","total","addTotals","increment","tempCart","selectedProduct","decrement","clearCart","restoreValues","localStorage","setItem","removeItem","filter","removedProduct","prods","includes","parseInt","componentDidMount","render","getDetails","props","children","ProductConsumer","Consumer","withProductConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nconst ProductContext= React.createContext();\n\nexport default class ProductProvider extends Component {\n\n    state={\n        categories: [],\n        products:[],\n        sortedProducts: [],\n        cart:[],\n        cartTotal:0,\n        onesToWatch: [],\n        loading: true,\n        type: \"all\",\n        compatibility: \"all\",\n        brand: \"all\",\n        price: 0,\n        minPrice: 0,\n        maxPrice: 0,\n    };\n\n    setUp = async() => {\n        let categories = await this.getCategories()\n        .then(() => console.log(categories))\n    }\n\n    /*setUp = async() => {\n        try{\n            await this.getProducts();\n            let products=this.state.products;\n            setTimeout(await this.getCart(),5000);\n            let tempSorted=products.sort((a, b) => (a.price > b.price) ? 1 : -1);\n            let onesToWatch=[tempSorted[0], tempSorted[1], tempSorted[2]];\n            let minPrice=Math.min(...products.map(item => item.price));\n            let maxPrice=Math.max(...products.map(item => item.price));\n            let price=maxPrice;\n            this.setState({\n                products,\n                sortedProducts:products,\n                onesToWatch,\n                maxPrice,\n                minPrice,\n                price,\n                loading:false\n            })\n        }catch(error){\n            console.log(error);\n        }//try_catch\n    }//setUp\n\n    //getDetails\n    getDetails = async(id) => {\n        let res = await fetch(`http://localhost:9000/detailsAPI?id=${id}`)\n        .then(res => res.json())\n    }\n\n    //getProducts\n    getProducts = async() => {\n        let products = await fetch(\"http://localhost:9000/searchAPI?param=shoes\")\n        .then(res => res.json())\n        .catch(e => this.getProducts())\n        .then(async(products) => {\n                let tempProd = await products[\"hits\"].map((item) => {\n                let element=item.productId;\n                let id=element;\n                let name=item.productName;\n                let brand=\"test\";\n                let compatibility=[\"test\"];\n                let type=\"shoes\";\n                let price=item.price;\n                let extras=[]\n                let inCart=false;\n                let qty=0;\n                let total=0;\n                let images=[item.image.link,item.image.link,item.image.link];\n                let product={id,element,name,price,brand,compatibility,type,images,extras,inCart,qty,total};\n                return product;\n            })\n            this.setState({\n                products:tempProd\n            })\n        })\n    }\n\n    //getCart\n    getCart = async() => {\n        let res = await fetch(\"http://localhost:9000/getBasketAPI\")\n        .then(res => res.json())\n        .catch(e => this.getCart)\n        let tempCart = await res;\n        if(tempCart[\"productItems\"])\n            tempCart[\"productItems\"].map(item => {\n                let tempProducts=[...this.state.products];\n                const index=tempProducts.indexOf(this.getProduct(item.productId));\n                const product=tempProducts[index];\n                product.inCart=true;\n                product.qty=item.quantity;\n                product.total=product.price*product.qty;\n                this.setState(() => {\n                    return{products: tempProducts, cart: [...this.state.cart,product]}\n                },\n                () => {\n                    this.addTotals();\n                })\n                    })\n    }*/\n\n    //getCategories\n    getCategories = async() => {\n        let res = await fetch(\"http://localhost:9000/categoriesAPI\");\n        let categories = await res.json();\n        let tempCat = await categories[\"data\"].map(item => {\n            let id=item.id;\n            let name=item.name.default;\n            let category={id,name};\n            return category;\n        })\n        return tempCat;\n    }//getCategories\n\n    //sort\n    sort = event => {\n        let {\n            sortedProducts\n        } = this.state;\n        const value=event.target.value;\n        if(value===\"alpha\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.name > b.name) ? 1 : -1);\n        else if(value===\"price\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.price > b.price) ? 1 : -1);\n        this.setState({sortedProducts:sortedProducts});\n    }//sort\n\n    //getProduct\n    getProduct = (element) => {\n        let tempProduct=[...this.state.products];\n        const product=tempProduct.find(product => product.element === element);\n        return product;\n    }//getProduct\n\n    //resetChanges\n    resetChanges = event => {\n        let{\n            products\n        } = this.state;\n        this.setState({sortedProducts:products})\n    }//resetChanges\n\n    //handleChanges\n    handleChanges = event => {\n        const target=event.target;\n        const value=target.type === 'checkbox' ? target.checked : target.value;\n        const name=event.target.name;\n        this.setState({[name]:value},this.filterProducts)\n    }//handleChanges\n\n    //addToCart\n    addToCart = async(id) => {\n        await fetch(`http://localhost:9000/addItemToBasketAPI?item=${id}`)\n        .then(res => res.json())\n        .catch(err => err);\n        let tempProducts=[...this.state.products];\n        const index=tempProducts.indexOf(this.getProduct(id));\n        const product=tempProducts[index];\n        product.inCart=true;\n        product.qty=1;\n        product.total=product.price;\n        this.setState(() => {\n            return{products: tempProducts, cart: [...this.state.cart,product]}\n        },\n        () => {\n            this.addTotals();\n        })\n    }\n\n    //increment\n    increment = async(id) => {\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item => item.element === id);\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n        product.qty++;\n        product.total=product.qty*product.price;\n        this.setState(() => {\n            return {\n                cart:[...tempCart]\n            }\n        },() => {\n            this.addTotals();\n        })\n    }\n\n    //decrement\n    decrement = async(id) => {\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item => item.element === id);\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n        product.qty--;\n        product.total=product.qty*product.price;\n        this.setState(() => {\n            return {\n                cart:[...tempCart]\n            }\n        },() => {\n            this.addTotals();\n        })\n    }\n\n    //clearCart\n    clearCart = () => {\n        this.setState(() => {\n            return{\n                cart:[]\n            }\n        }, () => {\n            this.restoreValues();\n        })\n        let cart = [...this.state.cart];\n        localStorage.setItem(\"cart\",cart);\n    }\n\n    //removeItem\n    removeItem = async(id) => {\n        let tempProducts = [...this.state.products];\n        let tempCart = [...this.state.cart];\n        tempCart = tempCart.filter(item => item.element !== id);\n        const index = tempProducts.indexOf(this.getProduct(id));\n        let removedProduct = tempProducts[index];\n        removedProduct.inCart=false;\n        removedProduct.qty=0;\n        removedProduct.total=0;\n        this.setState(() => {\n            return {\n                cart:[...tempCart],\n                products:[...tempProducts]\n            }\n        },() => {\n            this.addTotals();\n        })\n        let cart = [...this.state.cart];\n        localStorage.setItem(\"cart\",cart);\n    }\n\n    //restore\n    restoreValues = () => {\n        let prods=[...this.state.products];\n        prods.map(item => {\n            item.qty=0;\n            item.total=0;\n            item.inCart=false;\n        })\n        this.setState(() => {\n            return {\n                products: prods\n            }\n        })\n    } \n\n    //addTotals\n    addTotals = () => {\n        let cartTotal=0;\n        this.state.cart.map(item => (cartTotal += item.total));\n        this.setState(() => {\n            return {\n                cartTotal: cartTotal\n            }\n        })\n    }\n\n    filterProducts = () => {\n        let{\n            products,\n            type,\n            compatibility,\n            price,\n            brand\n        } = this.state;\n        let tempProducts=[...products];\n\n        //capacity\n        if(compatibility!=='all')\n            tempProducts=tempProducts.filter(product => product.compatibility.includes(compatibility))\n\n        //type\n        if(type!=='all')\n            tempProducts=tempProducts.filter(product => product.type === type);\n        \n        //price\n        price=parseInt(price);\n        tempProducts=tempProducts.filter(product => product.price <= price);\n        \n        //brand\n        if(brand!=='all')\n                tempProducts=tempProducts.filter(product => product.brand === brand)\n\n        this.setState({\n            sortedProducts:tempProducts\n        })\n    }//filterProducts*/\n    \n    componentDidMount(){\n        this.setUp()\n    }\n\n    render() {\n        return (\n            <ProductContext.Provider value={{...this.state,getProduct: this.getProduct,handleChanges: this.handleChanges,\n                resetChanges:this.resetChanges,sort:this.sort, addToCart:this.addToCart, increment:this.increment,decrement:this.decrement,\n                removeItem:this.removeItem,clearCart:this.clearCart,getDetails: this.getDetails}}>\n                {this.props.children}\n            </ProductContext.Provider>\n        );\n    }//render\n}//ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport function withProductConsumer(Component){\n    return function ConsumerWrapper(props){\n        return(\n            <ProductConsumer>\n                {value => <Component {...props} context={value}/>}\n            </ProductConsumer>\n        )}\n}//withProductConsumer\n\nexport{ProductProvider,ProductConsumer,ProductContext}"]},"metadata":{},"sourceType":"module"}