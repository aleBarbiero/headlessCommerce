{"ast":null,"code":"var _jsxFileName = \"/home/alessio_barbiero/headlessCommerce/client/src/contextAPI.js\";\nimport React, { Component } from 'react';\nconst ProductContext = React.createContext();\nexport default class ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categories: [],\n      products: [],\n      sortedProducts: [],\n      cart: [],\n      cartTotal: 0,\n      onesToWatch: [],\n      loading: true,\n      type: \"all\",\n      compatibility: \"all\",\n      brand: \"all\",\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0\n    };\n\n    this.setUp = async () => {\n      try {\n        //let categories=await this.getCategories();\n        let products = await this.getProducts(); //let cart=await this.getCart();\n\n        let tempSorted = products.sort((a, b) => a.price > b.price ? 1 : -1);\n        let onesToWatch = [tempSorted[0], tempSorted[1], tempSorted[2]];\n        let minPrice = Math.min(...products.map(item => item.price));\n        let maxPrice = Math.max(...products.map(item => item.price));\n        let price = maxPrice;\n        /*this.setState({\n            categories,\n            products,\n            sortedProducts:products,\n            cart,\n            onesToWatch,\n            loading:false,\n            maxPrice,\n            minPrice,\n            price\n        });*/\n      } catch (error) {\n        console.log(error);\n      } //try_catch\n\n    };\n\n    this.getProducts = async () => {\n      let prods = await fetch(\"http://localhost:9000/searchAPI?param=shoes\").then(res => res.json()).catch(err => err);\n      console.log(prods);\n      let tempProd = prods[\"hits\"].map(item => {\n        let id = item.productId;\n        let name = item.productName;\n        let price = item.price;\n        let inCart = false;\n        let qty = 0;\n        let total = 0;\n        let images = [item.image.link, item.image.link, item.image.link];\n        let product = {\n          id\n        };\n      });\n    };\n\n    this.getCart = async () => {\n      let cart = await fetch(\"http://localhost:9000/getBasketAPI\").then(res => res.json()).catch(err => err);\n      let tempCart = [];\n      if (cart[\"productItems\"]) cart[\"productitems\"].map(product => {\n        let id = product.productId;\n        let price = product.price;\n        let name = product.productName;\n        let item = {\n          id,\n          price,\n          name\n        };\n        return item;\n      });\n      return tempCart;\n    };\n\n    this.getCategories = async () => {\n      let categories = await fetch(\"http://localhost:9000/categoriesAPI\").then(res => res.json()).catch(err => err);\n      let tempCat = categories[\"data\"].map(item => {\n        let id = item.id;\n        let name = item.name.default;\n        let category = {\n          id,\n          name\n        };\n        return category;\n      });\n      return tempCat;\n    };\n\n    this.sort = event => {\n      let {\n        sortedProducts\n      } = this.state;\n      const value = event.target.value;\n      if (value === \"alpha\") sortedProducts = sortedProducts.sort((a, b) => a.name > b.name ? 1 : -1);else if (value === \"price\") sortedProducts = sortedProducts.sort((a, b) => a.price > b.price ? 1 : -1);\n      this.setState({\n        sortedProducts: sortedProducts\n      });\n    };\n\n    this.getProduct = element => {\n      let tempProduct = [...this.state.products];\n      const product = tempProduct.find(product => product.element === element);\n      return product;\n    };\n\n    this.resetChanges = event => {\n      let {\n        products\n      } = this.state;\n      this.setState({\n        sortedProducts: products\n      });\n    };\n\n    this.handleChanges = event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterProducts);\n    };\n\n    this.addToCart = async id => {\n      await fetch(`http://localhost:9000/addItemToBasketAPI?item=${id}`).then(res => res.json()).catch(err => err);\n      let cart = this.getCart();\n      this.setState({\n        cart\n      });\n    };\n\n    this.increment = async id => {};\n\n    this.decrement = async id => {};\n\n    this.clearCart = () => {};\n\n    this.removeItem = async id => {};\n\n    this.restoreValues = () => {};\n\n    this.addTotals = () => {};\n\n    this.filterProducts = () => {\n      let {\n        products,\n        type,\n        compatibility,\n        price,\n        brand\n      } = this.state;\n      let tempProducts = [...products]; //capacity\n\n      if (compatibility !== 'all') tempProducts = tempProducts.filter(product => product.compatibility.includes(compatibility)); //type\n\n      if (type !== 'all') tempProducts = tempProducts.filter(product => product.type === type); //price\n\n      price = parseInt(price);\n      tempProducts = tempProducts.filter(product => product.price <= price); //brand\n\n      if (brand !== 'all') tempProducts = tempProducts.filter(product => product.brand === brand);\n      this.setState({\n        sortedProducts: tempProducts\n      });\n    };\n  }\n\n  //filterProducts\n  componentDidMount() {\n    this.setUp();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        getProduct: this.getProduct\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  } //render\n\n\n} //ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\nexport function withProductConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(ProductConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 27\n      }\n    })));\n  };\n} //withProductConsumer\n\nexport { ProductProvider, ProductConsumer, ProductContext };","map":{"version":3,"sources":["/home/alessio_barbiero/headlessCommerce/client/src/contextAPI.js"],"names":["React","Component","ProductContext","createContext","ProductProvider","state","categories","products","sortedProducts","cart","cartTotal","onesToWatch","loading","type","compatibility","brand","price","minPrice","maxPrice","setUp","getProducts","tempSorted","sort","a","b","Math","min","map","item","max","error","console","log","prods","fetch","then","res","json","catch","err","tempProd","id","productId","name","productName","inCart","qty","total","images","image","link","product","getCart","tempCart","getCategories","tempCat","default","category","event","value","target","setState","getProduct","element","tempProduct","find","resetChanges","handleChanges","checked","filterProducts","addToCart","increment","decrement","clearCart","removeItem","restoreValues","addTotals","tempProducts","filter","includes","parseInt","componentDidMount","render","props","children","ProductConsumer","Consumer","withProductConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nconst ProductContext= React.createContext();\n\nexport default class ProductProvider extends Component {\n\n    state={\n        categories: [],\n        products:[],\n        sortedProducts: [],\n        cart:[],\n        cartTotal:0,\n        onesToWatch: [],\n        loading: true,\n        type: \"all\",\n        compatibility: \"all\",\n        brand: \"all\",\n        price: 0,\n        minPrice: 0,\n        maxPrice: 0,\n    };\n\n    setUp = async() => {\n        try{\n            //let categories=await this.getCategories();\n            \n            let products=await this.getProducts();\n            //let cart=await this.getCart();\n            let tempSorted=products.sort((a, b) => (a.price > b.price) ? 1 : -1);\n            let onesToWatch=[tempSorted[0], tempSorted[1], tempSorted[2]];\n            let minPrice=Math.min(...products.map(item => item.price));\n            let maxPrice=Math.max(...products.map(item => item.price));\n            let price=maxPrice;\n\n            /*this.setState({\n                categories,\n                products,\n                sortedProducts:products,\n                cart,\n                onesToWatch,\n                loading:false,\n                maxPrice,\n                minPrice,\n                price\n            });*/\n        }catch(error){\n            console.log(error);\n        }//try_catch\n    }//setUp\n\n    //getProducts\n    getProducts = async() => {\n        let prods = await fetch(\"http://localhost:9000/searchAPI?param=shoes\")\n        .then(res => res.json())\n        .catch(err => err);\n        console.log(prods);\n        let tempProd=prods[\"hits\"].map(item => {\n            let id=item.productId;\n            let name=item.productName;\n            let price=item.price;\n            let inCart=false;\n            let qty=0;\n            let total=0;\n            let images=[item.image.link,item.image.link,item.image.link];\n            let product={id}\n        })\n    }\n\n    //getCart\n    getCart = async() => {\n        let cart = await fetch(\"http://localhost:9000/getBasketAPI\")\n        .then(res => res.json())\n        .catch(err => err);\n        let tempCart = [];\n        if(cart[\"productItems\"])\n            cart[\"productitems\"].map(product => {\n                let id=product.productId;\n                let price=product.price;\n                let name=product.productName;\n                let item={id,price,name};\n                return item;\n            });\n        return tempCart;\n    }//getCart\n\n    //getCategories\n    getCategories = async() => {\n        let categories = await fetch(\"http://localhost:9000/categoriesAPI\")\n        .then(res => res.json())\n        .catch(err => err);\n        let tempCat =  categories[\"data\"].map(item => {\n            let id=item.id;\n            let name=item.name.default;\n            let category={id,name};\n            return category;\n        })\n        return tempCat;\n    }//getCategories\n\n    //sort\n    sort = event => {\n        let {\n            sortedProducts\n        } = this.state;\n        const value=event.target.value;\n        if(value===\"alpha\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.name > b.name) ? 1 : -1);\n        else if(value===\"price\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.price > b.price) ? 1 : -1);\n        this.setState({sortedProducts:sortedProducts});\n    }//sort\n\n    //getProduct\n    getProduct = (element) => {\n        let tempProduct=[...this.state.products];\n        const product=tempProduct.find(product => product.element === element);\n        return product;\n    }//getProduct\n\n    //resetChanges\n    resetChanges = event => {\n        let{\n            products\n        } = this.state;\n        this.setState({sortedProducts:products})\n    }//resetChanges\n\n    //handleChanges\n    handleChanges = event => {\n        const target=event.target;\n        const value=target.type === 'checkbox' ? target.checked : target.value;\n        const name=event.target.name;\n        this.setState({[name]:value},this.filterProducts)\n    }//handleChanges\n\n    //addToCart\n    addToCart = async(id) => {\n        await fetch(`http://localhost:9000/addItemToBasketAPI?item=${id}`)\n        .then(res => res.json())\n        .catch(err => err);\n        let cart=this.getCart();\n        this.setState({cart});\n    }\n\n    //increment\n    increment = async(id) => {\n\n    }\n\n    //decrement\n    decrement = async(id) => {\n\n    }\n\n    //clearCart\n    clearCart = () => {\n\n    }\n\n    //removeItem\n    removeItem = async(id) => {\n\n    }\n\n    //restore\n    restoreValues = () => {\n\n    } \n\n    //addTotals\n    addTotals = () => {\n\n    }\n\n    filterProducts = () => {\n        let{\n            products,\n            type,\n            compatibility,\n            price,\n            brand\n        } = this.state;\n        let tempProducts=[...products];\n\n        //capacity\n        if(compatibility!=='all')\n            tempProducts=tempProducts.filter(product => product.compatibility.includes(compatibility))\n\n        //type\n        if(type!=='all')\n            tempProducts=tempProducts.filter(product => product.type === type);\n        \n        //price\n        price=parseInt(price);\n        tempProducts=tempProducts.filter(product => product.price <= price);\n        \n        //brand\n        if(brand!=='all')\n                tempProducts=tempProducts.filter(product => product.brand === brand)\n\n        this.setState({\n            sortedProducts:tempProducts\n        })\n    }//filterProducts\n    \n    componentDidMount(){\n        this.setUp();\n    }\n\n    render() {\n        return (\n            <ProductContext.Provider value={{...this.state,getProduct: this.getProduct}}>\n                {this.props.children}\n            </ProductContext.Provider>\n        );\n    }//render\n}//ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport function withProductConsumer(Component){\n    return function ConsumerWrapper(props){\n        return(\n            <ProductConsumer>\n                {value => <Component {...props} context={value}/>}\n            </ProductConsumer>\n        )}\n}//withProductConsumer\n\nexport{ProductProvider,ProductConsumer,ProductContext}"]},"metadata":{},"sourceType":"module"}