{"ast":null,"code":"var _jsxFileName = \"/home/alessio_barbiero/headlessCommerce/client/src/contextAPI.js\";\nimport React, { Component } from 'react';\nconst ProductContext = React.createContext();\nexport default class ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categories: [],\n      products: [],\n      sortedProducts: [],\n      cart: [],\n      cartTotal: 0,\n      onesToWatch: [],\n      loading: true,\n      type: \"all\",\n      compatibility: \"all\",\n      brand: \"all\",\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0\n    };\n\n    this.setUp = async () => {\n      try {\n        let products = await this.getProducts();\n        let tempSorted = products.sort((a, b) => a.price > b.price ? 1 : -1);\n        let onesToWatch = [tempSorted[0], tempSorted[1], tempSorted[2]];\n        let minPrice = Math.min(...products.map(item => item.price));\n        let maxPrice = Math.max(...products.map(item => item.price));\n        let price = maxPrice;\n        this.setState({\n          products,\n          sortedProducts: products,\n          onesToWatch,\n          maxPrice,\n          minPrice,\n          price,\n          loading: false\n        });\n      } catch (error) {\n        console.log(error);\n      } //try_catch\n\n    };\n\n    this.getProducts = async () => {\n      let res = await fetch(\"http://localhost:9000/searchAPI?param=shoes\");\n      let products = await res.json();\n      console.log(products);\n      let tempProd = await products[\"hits\"].map(item => {\n        let element = item.productId;\n        let id = element;\n        let name = item.productName;\n        let brand = \"test\";\n        let compatibility = [\"test\"];\n        let type = \"shoes\";\n        let price = item.price;\n        let inCart = false;\n        let qty = 0;\n        let total = 0;\n        let images = [item.image.link, item.image.link, item.image.link];\n        let product = {\n          id,\n          element,\n          name,\n          price,\n          brand,\n          compatibility,\n          type,\n          images,\n          inCart,\n          qty,\n          total\n        };\n        return product;\n      });\n      return tempProd;\n    };\n\n    this.getCart = async () => {\n      let cart = await fetch(\"http://localhost:9000/getBasketAPI\").then(res => res.json()).catch(err => err);\n      let tempCart = [];\n      if (cart[\"productItems\"]) cart[\"productitems\"].map(product => {\n        let id = product.productId;\n        let price = product.price;\n        let name = product.productName;\n        let item = {\n          id,\n          price,\n          name\n        };\n        return item;\n      });\n      return tempCart;\n    };\n\n    this.getCategories = async () => {\n      let res = await fetch(\"http://localhost:9000/categoriesAPI\");\n      let categories = await res.json();\n      console.log(categories);\n      let tempCat = await categories[\"data\"].map(item => {\n        let id = item.id;\n        let name = item.name.default;\n        let category = {\n          id,\n          name\n        };\n        return category;\n      });\n      return tempCat;\n    };\n\n    this.sort = event => {\n      let {\n        sortedProducts\n      } = this.state;\n      const value = event.target.value;\n      if (value === \"alpha\") sortedProducts = sortedProducts.sort((a, b) => a.name > b.name ? 1 : -1);else if (value === \"price\") sortedProducts = sortedProducts.sort((a, b) => a.price > b.price ? 1 : -1);\n      this.setState({\n        sortedProducts: sortedProducts\n      });\n    };\n\n    this.getProduct = element => {\n      let tempProduct = [...this.state.products];\n      const product = tempProduct.find(product => product.element === element);\n      return product;\n    };\n\n    this.resetChanges = event => {\n      let {\n        products\n      } = this.state;\n      this.setState({\n        sortedProducts: products\n      });\n    };\n\n    this.handleChanges = event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterProducts);\n    };\n\n    this.addToCart = async id => {\n      await fetch(`http://localhost:9000/addItemToBasketAPI?item=${id}`).then(res => res.json()).catch(err => err);\n      let cart = this.getCart();\n      this.setState({\n        cart\n      });\n    };\n\n    this.increment = async id => {};\n\n    this.decrement = async id => {};\n\n    this.clearCart = () => {};\n\n    this.removeItem = async id => {};\n\n    this.restoreValues = () => {};\n\n    this.addTotals = () => {};\n\n    this.filterProducts = () => {\n      let {\n        products,\n        type,\n        compatibility,\n        price,\n        brand\n      } = this.state;\n      let tempProducts = [...products]; //capacity\n\n      if (compatibility !== 'all') tempProducts = tempProducts.filter(product => product.compatibility.includes(compatibility)); //type\n\n      if (type !== 'all') tempProducts = tempProducts.filter(product => product.type === type); //price\n\n      price = parseInt(price);\n      tempProducts = tempProducts.filter(product => product.price <= price); //brand\n\n      if (brand !== 'all') tempProducts = tempProducts.filter(product => product.brand === brand);\n      this.setState({\n        sortedProducts: tempProducts\n      });\n    };\n  }\n\n  //filterProducts\n  componentDidMount() {\n    this.setUp();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        getProduct: this.getProduct,\n        sort: this.sort,\n        hande\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  } //render\n\n\n} //ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\nexport function withProductConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(ProductConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 27\n      }\n    })));\n  };\n} //withProductConsumer\n\nexport { ProductProvider, ProductConsumer, ProductContext };","map":{"version":3,"sources":["/home/alessio_barbiero/headlessCommerce/client/src/contextAPI.js"],"names":["React","Component","ProductContext","createContext","ProductProvider","state","categories","products","sortedProducts","cart","cartTotal","onesToWatch","loading","type","compatibility","brand","price","minPrice","maxPrice","setUp","getProducts","tempSorted","sort","a","b","Math","min","map","item","max","setState","error","console","log","res","fetch","json","tempProd","element","productId","id","name","productName","inCart","qty","total","images","image","link","product","getCart","then","catch","err","tempCart","getCategories","tempCat","default","category","event","value","target","getProduct","tempProduct","find","resetChanges","handleChanges","checked","filterProducts","addToCart","increment","decrement","clearCart","removeItem","restoreValues","addTotals","tempProducts","filter","includes","parseInt","componentDidMount","render","hande","props","children","ProductConsumer","Consumer","withProductConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nconst ProductContext= React.createContext();\n\nexport default class ProductProvider extends Component {\n\n    state={\n        categories: [],\n        products:[],\n        sortedProducts: [],\n        cart:[],\n        cartTotal:0,\n        onesToWatch: [],\n        loading: true,\n        type: \"all\",\n        compatibility: \"all\",\n        brand: \"all\",\n        price: 0,\n        minPrice: 0,\n        maxPrice: 0,\n    };\n\n    setUp = async() => {\n        try{\n            let products=await this.getProducts();\n            let tempSorted=products.sort((a, b) => (a.price > b.price) ? 1 : -1);\n            let onesToWatch=[tempSorted[0], tempSorted[1], tempSorted[2]];\n            let minPrice=Math.min(...products.map(item => item.price));\n            let maxPrice=Math.max(...products.map(item => item.price));\n            let price=maxPrice;\n            this.setState({\n                products,\n                sortedProducts:products,\n                onesToWatch,\n                maxPrice,\n                minPrice,\n                price,\n                loading:false\n            })\n        }catch(error){\n            console.log(error);\n        }//try_catch\n    }//setUp\n\n    //getProducts\n    getProducts = async() => {\n        let res = await fetch(\"http://localhost:9000/searchAPI?param=shoes\");\n        let products = await res.json();\n        console.log(products);\n        let tempProd=await products[\"hits\"].map(item => {\n            let element=item.productId;\n            let id=element;\n            let name=item.productName;\n            let brand=\"test\";\n            let compatibility=[\"test\"];\n            let type=\"shoes\";\n            let price=item.price;\n            let inCart=false;\n            let qty=0;\n            let total=0;\n            let images=[item.image.link,item.image.link,item.image.link];\n            let product={id,element,name,price,brand,compatibility,type,images,inCart,qty,total};\n            return product;\n        })\n        return tempProd;\n    }\n\n    //getCart\n    getCart = async() => {\n        let cart = await fetch(\"http://localhost:9000/getBasketAPI\")\n        .then(res => res.json())\n        .catch(err => err);\n        let tempCart = [];\n        if(cart[\"productItems\"])\n            cart[\"productitems\"].map(product => {\n                let id=product.productId;\n                let price=product.price;\n                let name=product.productName;\n                let item={id,price,name};\n                return item;\n            });\n        return tempCart;\n    }//getCart\n\n    //getCategories\n    getCategories = async() => {\n        let res = await fetch(\"http://localhost:9000/categoriesAPI\");\n        let categories = await res.json();\n        console.log(categories);\n        let tempCat = await categories[\"data\"].map(item => {\n            let id=item.id;\n            let name=item.name.default;\n            let category={id,name};\n            return category;\n        })\n        return tempCat;\n    }//getCategories\n\n    //sort\n    sort = event => {\n        let {\n            sortedProducts\n        } = this.state;\n        const value=event.target.value;\n        if(value===\"alpha\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.name > b.name) ? 1 : -1);\n        else if(value===\"price\")\n            sortedProducts=sortedProducts.sort((a, b) => (a.price > b.price) ? 1 : -1);\n        this.setState({sortedProducts:sortedProducts});\n    }//sort\n\n    //getProduct\n    getProduct = (element) => {\n        let tempProduct=[...this.state.products];\n        const product=tempProduct.find(product => product.element === element);\n        return product;\n    }//getProduct\n\n    //resetChanges\n    resetChanges = event => {\n        let{\n            products\n        } = this.state;\n        this.setState({sortedProducts:products})\n    }//resetChanges\n\n    //handleChanges\n    handleChanges = event => {\n        const target=event.target;\n        const value=target.type === 'checkbox' ? target.checked : target.value;\n        const name=event.target.name;\n        this.setState({[name]:value},this.filterProducts)\n    }//handleChanges\n\n    //addToCart\n    addToCart = async(id) => {\n        await fetch(`http://localhost:9000/addItemToBasketAPI?item=${id}`)\n        .then(res => res.json())\n        .catch(err => err);\n        let cart=this.getCart();\n        this.setState({cart});\n    }\n\n    //increment\n    increment = async(id) => {\n\n    }\n\n    //decrement\n    decrement = async(id) => {\n\n    }\n\n    //clearCart\n    clearCart = () => {\n\n    }\n\n    //removeItem\n    removeItem = async(id) => {\n\n    }\n\n    //restore\n    restoreValues = () => {\n\n    } \n\n    //addTotals\n    addTotals = () => {\n\n    }\n\n    filterProducts = () => {\n        let{\n            products,\n            type,\n            compatibility,\n            price,\n            brand\n        } = this.state;\n        let tempProducts=[...products];\n\n        //capacity\n        if(compatibility!=='all')\n            tempProducts=tempProducts.filter(product => product.compatibility.includes(compatibility))\n\n        //type\n        if(type!=='all')\n            tempProducts=tempProducts.filter(product => product.type === type);\n        \n        //price\n        price=parseInt(price);\n        tempProducts=tempProducts.filter(product => product.price <= price);\n        \n        //brand\n        if(brand!=='all')\n                tempProducts=tempProducts.filter(product => product.brand === brand)\n\n        this.setState({\n            sortedProducts:tempProducts\n        })\n    }//filterProducts\n    \n    componentDidMount(){\n        this.setUp();\n    }\n\n    render() {\n        return (\n            <ProductContext.Provider value={{...this.state,getProduct: this.getProduct,sort:this.sort,hande}}>\n                {this.props.children}\n            </ProductContext.Provider>\n        );\n    }//render\n}//ProductProvider\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport function withProductConsumer(Component){\n    return function ConsumerWrapper(props){\n        return(\n            <ProductConsumer>\n                {value => <Component {...props} context={value}/>}\n            </ProductConsumer>\n        )}\n}//withProductConsumer\n\nexport{ProductProvider,ProductConsumer,ProductContext}"]},"metadata":{},"sourceType":"module"}